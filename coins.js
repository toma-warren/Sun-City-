// ===============================
// üìå –ë–õ–û–ö 1: –ò–ú–ü–û–†–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò
// ===============================
import { Client, GatewayIntentBits, EmbedBuilder,  ActionRowBuilder, ButtonBuilder, ButtonStyle,AttachmentBuilder} from 'discord.js';
import fs from 'fs';
import moment from 'moment';
import 'moment/locale/ru.js';

import canvas from 'canvas';
import { createCanvas, loadImage, registerFont } from 'canvas';
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMessageReactions,
  ],
});

// ===== ‚öôÔ∏è –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º =====
const prefix = '/';
const bonusRolesPath = './bonusRoles.json';
const dbPath = './coins.json';

// ===== üé≠ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ä–æ–ª–µ–π –∏ –∫–∞–Ω–∞–ª–æ–≤ =====
const COINS_CHANNEL_ID = '1402007519991435324'; // –ö–∞–Ω–∞–ª –ö–æ–∏–Ω–æ–≤
const ADMIN_ROLE_ID = '1393554205880619028'; // –†–æ–ª–∏ –ê–¥–º–∏–Ω –¥–∏—Å–∫–æ—Ä–¥/–ì–ê/–ó–ì–ê/–ö—É—Ä–∞—Ç–æ—Ä—ã
const MAIN_MOD_ROLE_ID = '1383801971714297927'; // –†–æ–ª–∏ –ì–ú/–ê–¥–º–∏–Ω –¥–∏—Å–∫–æ—Ä–¥/–ì–ê/–ó–ì–ê/–ö—É—Ä–∞—Ç–æ—Ä—ã
const CUR_MOD_ROLE_ID = '1393534657106153482'; // –†–æ–ª—å –ö—É—Ä–∞—Ç–æ—Ä–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏/–ì–ú/–ê–¥–º–∏–Ω –¥–∏—Å–∫–æ—Ä–¥/–ì–ê/–ó–ì–ê/–ö—É—Ä–∞—Ç–æ—Ä—ã
const MOD_ROLE_ID = '1383087454965207050'; // –†–æ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏/–ö—É—Ä–∞—Ç–æ—Ä–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏/–ì–ú/–ê–¥–º–∏–Ω –¥–∏—Å–∫–æ—Ä–¥/–ì–ê/–ó–ì–ê/–ö—É—Ä–∞—Ç–æ—Ä—ã
const FAM_CATEGORY_ID = '1393535932807774290 '; // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏(—Ñ–∞–º—ã)
const MOD_CONFIRM_CHANNEL_ID = '1393535980836753438'; // üí¨ –ö–∞–Ω–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏(–ø–µ—Ä–µ–¥–∞—á–∞ —Ñ–∞–º—ã)
const REFERENCE_ROLE_ID = '1401512311344205904'; //ID —Ä–æ–ª–∏, –ø–æ–¥ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —Ä–∞–∑–º–µ—â–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Ä–æ–ª—å
const FAM_ROLE_ID = '1401475495845036133'; // ID —Ä–æ–ª–∏, –ø–æ–¥ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–æ–∑–¥–∞–≤–∞–µ–º—É—é —Ä–æ–ª—å —Å–µ–º—å–∏

// ===== üéüÔ∏è –õ–æ—Ç–µ—Ä–µ—è =====
const LOTTERY_ENTRY_COST = 100;
const INITIAL_PRIZE = 4000;

let lotteryMessage = null;
let lotteryInterval = null;
const lotteryParticipants = new Set();



// ===============================
// üì¶ –ë–õ–û–ö 2: –ë–ê–ó–ê –î–ê–ù–ù–´–• –ò –ù–ê–ß–ê–õ–û
// ===============================
let data = {
  coinsData: {},
  promocodes: {},
  privateRoles: {},
  disabledChannels: [],
};
if (fs.existsSync(dbPath)) {
  try {
    data = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã:', e);
  }
}
if (!Array.isArray(data.disabledChannels)) data.disabledChannels = [];
// ===============================
// üîß –ë–õ–û–ö 3: –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ===============================
function checkExpiredFamilies() {
  const now = Date.now();

  for (const [roleId, fam] of Object.entries(data.families || {})) {
    const remaining = fam.expiresAt - now;

    if (remaining <= 0) {
      const guild = client.guilds.cache.first();
      const famChannel = guild.channels.cache.get(fam.channelId);
      const famRole = guild.roles.cache.get(roleId);

      if (famChannel) famChannel.delete().catch(() => {});
      if (famRole) famRole.delete().catch(() => {});

      delete data.families[roleId];
      saveData();

      client.users.fetch(fam.ownerId).then(user => {
        user.send({
          embeds: [new EmbedBuilder()
            .setColor('#E74C3C')
            .setTitle('‚è∞ –°–µ–º—å—è —É–¥–∞–ª–µ–Ω–∞')
            .setDescription(`–í–∞—à–∞ —Å–µ–º—å—è **[FAM] ${fam.name}** –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è.`)
            .setTimestamp()
          ]
        }).catch(() => {});
      });

    } else if (remaining <= 3 * 24 * 60 * 60 * 1000 && !fam.warned) {
      client.users.fetch(fam.ownerId).then(user => {
        user.send({
          embeds: [new EmbedBuilder()
            .setColor('#F1C40F')
            .setTitle('‚ö†Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ–º—å–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É')
            .setDescription(`–í–∞—à–∞ —Å–µ–º—å—è **[FAM] ${fam.name}** –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ **3 –¥–Ω—è**.`)
            .setTimestamp()
          ]
        }).catch(() => {});
      });

      fam.warned = true;
      saveData();
    }
  }
}
function saveData() {
  fs.writeFileSync(dbPath, JSON.stringify(data, null, 2));
  console.log('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
}
function createEmbed({ title = '', description = '', color = '#6A5ACD', footerText = 'Arizona Sun-Ciry', timestamp = new Date() }) {
  return new EmbedBuilder()
    .setColor(color)
    .setTitle(title)
    .setDescription(description)
    .setFooter({ text: footerText })
    .setTimestamp(timestamp);
}
function sendError(message, text) {
  const embed = createEmbed({ title: '‚ùå –û—à–∏–±–∫–∞', description: text, color: '#FF5555' });
  return message.channel.send({ embeds: [embed] }).then(msg => setTimeout(() => msg.delete().catch(() => {}), 7000));
}
function sendWarning(message, text) {
  const embed = createEmbed({ title: '‚ö† –í–Ω–∏–º–∞–Ω–∏–µ', description: text, color: '#FFAA00' });
  return message.channel.send({ embeds: [embed] }).then(msg => setTimeout(() => msg.delete().catch(() => {}), 7000));
}
function sendSuccess(message, text) {
  const embed = createEmbed({ title: '‚úÖ –£—Å–ø–µ—à–Ω–æ', description: text, color: '#00CC66' });
  return message.channel.send({ embeds: [embed] });
}
function declOfNum(number, words) {
  number = Math.abs(number) % 100;
  const n1 = number % 10;
  if (number > 10 && number < 20) return words[2];
  if (n1 > 1 && n1 < 5) return words[1];
  if (n1 === 1) return words[0];
  return words[2];
}
function getStatus(coins) {
  if (coins >= 200000) return '–ê–±—Å–æ–ª—é—Ç';
  if (coins >= 150000) return '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –í–µ—Ç–µ—Ä–∞–Ω';
  if (coins >= 100000) return '–ò–º–ø–µ—Ä–∞—Ç–æ—Ä';
  if (coins >= 75000) return '–≠–ª–∏—Ç–∞';
  if (coins >= 50000) return '–õ–µ–≥–µ–Ω–¥–∞';
  if (coins >= 30000) return '–≠–∫—Å–ø–µ—Ä—Ç';
  if (coins >= 20000) return '–ú–µ–Ω–µ–¥–∂–µ—Ä';
  if (coins >= 15000) return '–°—Ç—Ä–∞—Ç–µ–≥';
  if (coins >= 10000) return '–ê–∫—Ç–∏–≤–∏—Å—Ç';
  if (coins >= 7500) return '–≠–Ω—Ç—É–∑–∏–∞—Å—Ç';
  if (coins >= 5000) return '–£—á–∞—Å—Ç–Ω–∏–∫';
  if (coins >= 2500) return '–ù–∞—á–∏–Ω–∞—é—â–∏–π –ü—Ä–æ—Ñ–∏';
  if (coins >= 1000) return '–ù–æ–≤–∏—á–æ–∫';
  if (coins >= 100) return '–ì–æ—Å—Ç—å';
  return '–ù–∞—á–∏–Ω–∞—é—â–∏–π';
}
function saveBonusRoles(bonusRoles) {
  try {
    const toSave = {};
    for (const roleId in bonusRoles) {
      toSave[roleId] = { amount: bonusRoles[roleId].amount };
    }
    fs.writeFileSync(bonusRolesPath, JSON.stringify(toSave, null, 2), 'utf-8');
    console.log('–ë–æ–Ω—É—Å–Ω—ã–µ —Ä–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ bonusRoles.json:', error);
  }
}
function loadBonusRoles() {
  if (!fs.existsSync(bonusRolesPath)) return {};
  try {
    return JSON.parse(fs.readFileSync(bonusRolesPath, 'utf-8'));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ bonusRoles.json:', error);
    return {};
  }
}
function ensureDepositFields(userId) {
  if (!data.coinsData[userId].deposit) data.coinsData[userId].deposit = 0;
  if (!data.coinsData[userId].depositIncome) data.coinsData[userId].depositIncome = 0;
}
function createRoleNoticeEmbed(title, description, color) {
  return createEmbed({
    title,
    description,
    color,
    timestamp: new Date(),
    footerText: '–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π.',
  });
}
// ===============================
// üí¨ –ë–õ–û–ö 4: –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô (–ö–û–ú–ê–ù–î)
// ===============================
client.once('ready', () => {
  console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∞–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
  setInterval(checkExpiredFamilies, 10 * 60 * 1000);
});
client.on('messageCreate', async (message) => {
  if (message.author.bot) return;
  const userId = message.author.id;
  if (!data.coinsData[userId]) {
    data.coinsData[userId] = {
      coins: 0,
      promocode: null,
      usedPromocode: null,
    };
    saveData();
  }
  if (message.channel.id === COINS_CHANNEL_ID) {
    if (!message.content.startsWith(prefix)) {
      await message.delete().catch(() => {});
      return;
    }
  }
if (!message.content.startsWith(prefix) && !data.disabledChannels.includes(message.channel.id)) {
  data.coinsData[userId].coins += 10;
  saveData();
}
   if (!message.content.startsWith(prefix)) return;
  const args = message.content.slice(prefix.length).trim().split(/\s+/);
  const command = args.shift().toLowerCase();

  // ===============================
  // üí∞ –ë–õ–û–ö 5: –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ê–ù–î–´
  // ===============================

if (command === 'info') {
  if (message.channel.id !== COINS_CHANNEL_ID) {
    return message.delete().catch(() => {});
  }

  await message.delete().catch(() => {});

  const targetMember =
    message.mentions.members.first() ||
    message.guild.members.cache.get(args[0]) ||
    message.member;

  const targetUser = targetMember.user;
  const targetId = targetUser.id;

  if (!data.coinsData[targetId]) {
    data.coinsData[targetId] = {
      coins: 0,
      deposit: 0,
      depositIncome: 0,
      promocode: null,
      usedPromocode: null
    };
    saveData();
  }

  const userData = data.coinsData[targetId];
  const coins = userData.coins || 0;
  const deposit = userData.deposit || 0;
  const income = Math.floor(deposit * 0.005);
  const usedPromocode = userData.usedPromocode || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
  const status = getStatus(coins);

  const image = await generateUserInfoImage(
    targetUser,
    targetMember,
    coins,
    deposit,
    income,
    usedPromocode,
    status
  );

  const infoMsg = await message.channel.send({ files: [image] });
  setTimeout(() => infoMsg.delete().catch(() => {}), 60000);
}
async function generateUserInfoImage(user, member, coins, deposit, income, promocode, status) {
  const canvasWidth = 950;
  const canvasHeight = 460;
  const canvas = createCanvas(canvasWidth, canvasHeight);
  const ctx = canvas.getContext('2d');

  function declOfNum(number, titles) {
    number = Math.abs(number) % 100;
    const n1 = number % 10;
    if (number > 10 && number < 20) return titles[2];
    if (n1 > 1 && n1 < 5) return titles[1];
    if (n1 === 1) return titles[0];
    return titles[2];
  }

  const bgGradient = ctx.createLinearGradient(0, 0, 0, canvasHeight);
  bgGradient.addColorStop(0, '#121417');
  bgGradient.addColorStop(1, '#25282f');
  ctx.fillStyle = bgGradient;
  ctx.fillRect(0, 0, canvasWidth, canvasHeight);

  const noiseCanvas = createCanvas(canvasWidth, canvasHeight);
  const noiseCtx = noiseCanvas.getContext('2d');
  const imageData = noiseCtx.createImageData(canvasWidth, canvasHeight);
  for (let i = 0; i < imageData.data.length; i += 4) {
    const v = Math.random() * 30;
    imageData.data[i] = v;
    imageData.data[i + 1] = v;
    imageData.data[i + 2] = v;
    imageData.data[i + 3] = 15;
  }
  noiseCtx.putImageData(imageData, 0, 0);
  ctx.drawImage(noiseCanvas, 0, 0);

  const cardX = 40;
  const cardY = 40;
  const cardWidth = canvasWidth - 80;
  const cardHeight = canvasHeight - 80;
  const cardRadius = 30;

  ctx.shadowColor = 'rgba(255, 204, 53, 0.2)';
  ctx.shadowBlur = 30;
  ctx.fillStyle = '#2a2d37cc';
  ctx.roundRect(cardX, cardY, cardWidth, cardHeight, cardRadius);
  ctx.fill();

  ctx.shadowBlur = 0;
  const borderGradient = ctx.createLinearGradient(cardX, cardY, cardX + cardWidth, cardY + cardHeight);
  borderGradient.addColorStop(0, '#f7dc6f');
  borderGradient.addColorStop(0.5, '#f39c12');
  borderGradient.addColorStop(1, '#f7dc6f');
  ctx.strokeStyle = borderGradient;
  ctx.lineWidth = 5;
  ctx.roundRect(cardX, cardY, cardWidth, cardHeight, cardRadius);
  ctx.stroke();

  const avatar = await loadImage(user.displayAvatarURL({ extension: 'png', size: 256 }));
  const avatarX = 70;
  const avatarY = 140;
  const avatarSize = 180;

  ctx.shadowColor = 'rgba(247, 156, 18, 0.6)';
  ctx.shadowBlur = 20;
  ctx.roundRect(avatarX - 12, avatarY - 12, avatarSize + 24, avatarSize + 24, 24);
  ctx.fillStyle = '#191a1f';
  ctx.fill();
  ctx.shadowBlur = 0;

  const avatarBorderGrad = ctx.createLinearGradient(avatarX, avatarY, avatarX + avatarSize, avatarY + avatarSize);
  avatarBorderGrad.addColorStop(0, '#f7dc6f');
  avatarBorderGrad.addColorStop(1, '#f39c12');
  ctx.strokeStyle = avatarBorderGrad;
  ctx.lineWidth = 5;
  ctx.roundRect(avatarX - 12, avatarY - 12, avatarSize + 24, avatarSize + 24, 24);
  ctx.stroke();

  // –ê–≤–∞—Ç–∞—Ä (—Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ)
  ctx.save();
  ctx.beginPath();
  ctx.roundRect(avatarX, avatarY, avatarSize, avatarSize, 20);
  ctx.clip();
  ctx.drawImage(avatar, avatarX, avatarY, avatarSize, avatarSize);
  ctx.restore();

  const coinWord = declOfNum(coins, ['–∫–æ–∏–Ω', '–∫–æ–∏–Ω–∞', '–∫–æ–∏–Ω–æ–≤']);
  const depositWord = declOfNum(deposit, ['–∫–æ–∏–Ω', '–∫–æ–∏–Ω–∞', '–∫–æ–∏–Ω–æ–≤']);
  const incomeWord = declOfNum(income, ['–∫–æ–∏–Ω', '–∫–æ–∏–Ω–∞', '–∫–æ–∏–Ω–æ–≤']);

  const infoX = 280;
  const infoY = 160;
  const lineHeight = 48;

  ctx.font = '600 26px Arial';
  const infoItems = [
    ['üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', member.displayName],
    ['üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', `${coins.toLocaleString('ru-RU')} ${coinWord}`],
    ['üè¶ –î–µ–ø–æ–∑–∏—Ç', `${deposit.toLocaleString('ru-RU')} ${depositWord}`],
    ['üìà –î–æ—Ö–æ–¥ –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞', `${income.toLocaleString('ru-RU')} ${incomeWord}`],
    ['üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥', promocode || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'],
    ['üìä –°—Ç–∞—Ç—É—Å', status]
  ];

  for (let i = 0; i < infoItems.length; i++) {
    const [label, value] = infoItems[i];
    const y = infoY + i * lineHeight;

    ctx.fillStyle = '#f7dc6f';
    ctx.shadowColor = 'rgba(247, 220, 111, 0.6)';
    ctx.shadowBlur = 6;
    ctx.fillText(label + ':', infoX, y);

    const labelWidth = ctx.measureText(label + ':').width + 20;

    ctx.shadowBlur = 8;
    ctx.shadowColor = 'rgba(255, 255, 255, 0.3)';

    const valueGradient = ctx.createLinearGradient(infoX + labelWidth, y, infoX + labelWidth + 300, y);
    valueGradient.addColorStop(0, '#c9c6c6ff'); // —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
    valueGradient.addColorStop(1, '#ffffff'); // –±–µ–ª—ã–π –¥–ª—è –±–ª–∏–∫–∞

    ctx.fillStyle = valueGradient;

    let displayValue = value;
    const maxWidth = cardWidth - (infoX + labelWidth) - 40;
    if (ctx.measureText(displayValue).width > maxWidth) {
      while (ctx.measureText(displayValue + '‚Ä¶').width > maxWidth) {
        displayValue = displayValue.slice(0, -1);
      }
      displayValue += '‚Ä¶';
    }

    ctx.fillText(displayValue, infoX + labelWidth, y);
    ctx.shadowBlur = 0;
  }

  ctx.font = 'bold 48px Arial';
  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';
  const title = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Sun City';
  const titleX = cardX + cardWidth / 2;
  const titleY = cardY + 50;

  const titleGradient = ctx.createLinearGradient(titleX - 150, titleY, titleX + 150, titleY);
  titleGradient.addColorStop(0, '#f7dc6f');
  titleGradient.addColorStop(1, '#f39c12');

  ctx.fillStyle = titleGradient;
  ctx.shadowColor = 'rgba(255, 198, 60, 0.9)';
  ctx.shadowBlur = 14;
  ctx.fillText(title, titleX, titleY);
  ctx.shadowBlur = 0;

  return new AttachmentBuilder(canvas.toBuffer('image/png'), { name: 'profile.png' });
}
if (command === 'deposit') {
  if (message.channel.id !== COINS_CHANNEL_ID) return message.delete().catch(() => {});
  await message.delete().catch(() => {});

  if (!data.coinsData[userId].deposit) data.coinsData[userId].deposit = 0;
  if (!data.coinsData[userId].depositIncome) data.coinsData[userId].depositIncome = 0;

  const amount = parseInt(args[0]);

  if (isNaN(amount) || amount <= 0) {
    const error = await message.channel.send({
      embeds: [new EmbedBuilder()
        .setTitle('‚ùå –û—à–∏–±–∫–∞')
        .setDescription('üí° –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞.')
        .setColor('#FF0000')]
    });
    return setTimeout(() => error.delete().catch(() => {}), 30000);
  }

  if (data.coinsData[userId].coins < amount) {
    const error = await message.channel.send({
      embeds: [new EmbedBuilder()
        .setTitle('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤')
        .setDescription('üí∏ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞.')
        .setColor('#FF0000')]
    });
    return setTimeout(() => error.delete().catch(() => {}), 30000);
  }

  data.coinsData[userId].coins -= amount;
  data.coinsData[userId].deposit += amount;
  saveData();

  const confirm = await message.channel.send({
    embeds: [new EmbedBuilder()
      .setTitle('üè¶ –î–µ–ø–æ–∑–∏—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω')
      .setDescription(`‚úÖ –í—ã –≤–Ω–µ—Å–ª–∏ **${amount.toLocaleString('ru-RU')}** –∫–æ–∏–Ω–æ–≤ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç.`)
      .setColor('#00FF7F')]
  });
  setTimeout(() => confirm.delete().catch(() => {}), 30000);
}
if (command === 'withdraw') {
  if (message.channel.id !== COINS_CHANNEL_ID) return message.delete().catch(() => {});
  await message.delete().catch(() => {});

  if (!data.coinsData[userId].deposit) data.coinsData[userId].deposit = 0;
  if (!data.coinsData[userId].depositIncome) data.coinsData[userId].depositIncome = 0;

  const amount = parseInt(args[0]);

  if (isNaN(amount) || amount <= 0) {
    const error = await message.channel.send({
      embeds: [new EmbedBuilder()
        .setTitle('‚ùå –û—à–∏–±–∫–∞')
        .setDescription('üí° –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è.')
        .setColor('#FF0000')]
    });
    return setTimeout(() => error.delete().catch(() => {}), 30000);
  }

  if (data.coinsData[userId].deposit < amount) {
    const error = await message.channel.send({
      embeds: [new EmbedBuilder()
        .setTitle('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
        .setDescription('üè¶ –ù–∞ –≤–∞—à–µ–º –¥–µ–ø–æ–∑–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è.')
        .setColor('#FF0000')]
    });
    return setTimeout(() => error.delete().catch(() => {}), 30000);
  }

  data.coinsData[userId].deposit -= amount;
  data.coinsData[userId].coins += amount;
  saveData();

  const confirm = await message.channel.send({
    embeds: [new EmbedBuilder()
      .setTitle('üí∏ –°–Ω—è—Ç–∏–µ —Å –¥–µ–ø–æ–∑–∏—Ç–∞')
      .setDescription(`‚úÖ –í—ã —Å–Ω—è–ª–∏ **${amount.toLocaleString('ru-RU')}** –∫–æ–∏–Ω–æ–≤ —Å –¥–µ–ø–æ–∑–∏—Ç–∞.`)
      .setColor('#00FF7F')]
  });
  setTimeout(() => confirm.delete().catch(() => {}), 30000);
}
else if (command === 'createpromo') {
  if (message.channel.id !== COINS_CHANNEL_ID) return message.delete().catch(() => {});

  const promoName = args[0]?.toLowerCase();

  if (!promoName) {
    return sendWarning(message, '‚ùó –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: `/createpromo <–Ω–∞–∑–≤–∞–Ω–∏–µ>`');
  }

  if (!data.coinsData[userId]) {
    data.coinsData[userId] = {
      coins: 0,
      promocode: null,
      usedPromocode: null,
    };
  }

  if (data.coinsData[userId].promocode) {
    return sendWarning(message, `‚ùó –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥: \`${data.coinsData[userId].promocode}\``);
  }

  if (data.promocodes[promoName]) {
    return sendError(message, '‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.');
  }

  const cost = 5000;
  if (data.coinsData[userId].coins < cost) {
    return sendError(message, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤. –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è: ${cost.toLocaleString('ru-RU')} –∫–æ–∏–Ω–æ–≤.`);
  }

  data.coinsData[userId].coins -= cost;
  data.coinsData[userId].promocode = promoName;
  data.promocodes[promoName] = {
    ownerId: userId,
    uses: 0,
  };

  saveData();

  const embed = createEmbed({
    title: 'üéâ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω',
    description: `–¢—ã —Å–æ–∑–¥–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥: \`${promoName}\` –∑–∞ **${cost.toLocaleString('ru-RU')}** –∫–æ–∏–Ω–æ–≤.`,
    color: '#00CC66',
    footerText: '–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!',
    timestamp: new Date(),
  });

  const sentMsg = await message.channel.send({ embeds: [embed] });
  await message.delete().catch(() => {});
  setTimeout(() => sentMsg.delete().catch(() => {}), 15000);
}
else if (command === 'promo') {
  if (message.channel.id !== COINS_CHANNEL_ID) return message.delete().catch(() => {});

  const promoName = args[0]?.toLowerCase();

  if (!promoName) {
    return sendWarning(message, '‚ùó –£–∫–∞–∂–∏ –ø—Ä–æ–º–æ–∫–æ–¥: `/promo <–Ω–∞–∑–≤–∞–Ω–∏–µ>`');
  }

  const promo = data.promocodes[promoName];
  if (!promo) {
    return sendError(message, '‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }

  if (promo.ownerId === userId) {
    return sendError(message, '‚ùå –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.');
  }

  const bonus = 300;
  data.coinsData[userId].coins += bonus;
  promo.uses += 1;
  data.coinsData[userId].usedPromocode = promoName;

  saveData();

  const embed = createEmbed({
    title: 'üéÅ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω',
    description: `–¢—ã –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å **+${bonus.toLocaleString('ru-RU')} –∫–æ–∏–Ω–æ–≤** –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ \`${promoName}\`.`,
    color: '#0099FF',
  });

  const sentMsg = await message.channel.send({ embeds: [embed] });
  await message.delete().catch(() => {});
  setTimeout(() => sentMsg.delete().catch(() => {}), 15000);
}
else if (command === 'promocodes') {
  if (!message.member.roles.cache.has(MOD_ROLE_ID)) {
    return sendError(message, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
  }

  await message.delete().catch(() => {});

  const allPromos = Object.entries(data.promocodes);
  if (allPromos.length === 0) {
    return sendSuccess(message, 'üòï –ü—Ä–æ–º–æ–∫–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
  }

  const chunkSize = 6;
  const page = 0; 

  function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
    if (typeof radius === 'number') {
      radius = { tl: radius, tr: radius, br: radius, bl: radius };
    } else {
      for (let side of ['tl', 'tr', 'br', 'bl']) {
        radius[side] = radius[side] || 0;
      }
    }
    ctx.beginPath();
    ctx.moveTo(x + radius.tl, y);
    ctx.lineTo(x + width - radius.tr, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);
    ctx.lineTo(x + width, y + height - radius.br);
    ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);
    ctx.lineTo(x + radius.bl, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);
    ctx.lineTo(x, y + radius.tl);
    ctx.quadraticCurveTo(x, y, x + radius.tl, y);
    ctx.closePath();
    if (fill) ctx.fill();
    if (stroke) ctx.stroke();
  }

  const canvasWidth = 1100;
  const rowHeight = 80;
  const headerHeight = 120;
  const footerHeight = 30;
  const sidePadding = 50;

  const makeEmbed = () => {
    const chunk = allPromos.slice(page * chunkSize, page * chunkSize + chunkSize);
    const canvasHeight = headerHeight + chunk.length * rowHeight + footerHeight;

    const canvas = createCanvas(canvasWidth, canvasHeight);
    const ctx = canvas.getContext('2d');

 
    const gradient = ctx.createLinearGradient(0, 0, 0, canvasHeight);
    gradient.addColorStop(0, '#1e2125');
    gradient.addColorStop(1, '#2e3238');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, canvasWidth, canvasHeight);

    
    const titleText = 'üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤';
    ctx.font = 'bold 36px Sans';
    const titleWidth = ctx.measureText(titleText).width;
    const grad = ctx.createLinearGradient(sidePadding, 0, sidePadding + titleWidth, 0);
    grad.addColorStop(0, '#6a5acd');
    grad.addColorStop(1, '#483d8b');
    ctx.fillStyle = grad;
    ctx.shadowColor = 'rgba(106, 90, 205, 0.6)';
    ctx.shadowBlur = 10;
    ctx.fillText(titleText, sidePadding, 50);
    ctx.shadowColor = 'transparent';

  
    const sepGradient = ctx.createLinearGradient(0, 70, 0, 76);
    sepGradient.addColorStop(0, '#6a5acd33');
    sepGradient.addColorStop(0.5, '#483d8b33');
    sepGradient.addColorStop(1, '#6a5acd33');
    ctx.fillStyle = sepGradient;
    ctx.fillRect(sidePadding, 70, canvasWidth - sidePadding * 2, 6);

   
    const columns = {
      number: sidePadding + 20,              // ‚Ññ
      code: sidePadding + 170,              // –ü—Ä–æ–º–æ–∫–æ–¥
      owner: sidePadding + 400,             // –í–ª–∞–¥–µ–ª–µ—Ü
      uses: canvasWidth - sidePadding - 100 // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    };

  
    ctx.font = 'bold 24px Sans';
    ctx.fillStyle = '#ddd';
    ctx.textBaseline = 'middle';
    ctx.textAlign = 'left';
    ctx.fillText('‚Ññ', columns.number, headerHeight - 20);
     ctx.textAlign = 'center';
    ctx.fillText('–ü—Ä–æ–º–æ–∫–æ–¥', columns.code, headerHeight - 20);
       ctx.textAlign = 'left';
    ctx.fillText('–í–ª–∞–¥–µ–ª–µ—Ü', columns.owner, headerHeight - 20);
    ctx.textAlign = 'center';
    ctx.fillText('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π', columns.uses, headerHeight - 20);


    ctx.font = '22px Sans';
    let y = headerHeight;
    for (let i = 0; i < chunk.length; i++) {
      const [promoName, info] = chunk[i];


      ctx.fillStyle = i % 2 === 0 ? 'rgba(106, 90, 205, 0.1)' : 'rgba(72, 61, 139, 0.1)';
      roundRect(ctx, sidePadding - 10, y + 6, canvasWidth - sidePadding * 2 + 20, rowHeight - 12, 10, true, false);

      ctx.strokeStyle = 'rgba(106, 90, 205, 0.3)';
      ctx.lineWidth = 2;
      roundRect(ctx, sidePadding - 10, y + 6, canvasWidth - sidePadding * 2 + 20, rowHeight - 12, 10, false, true);

      ctx.textBaseline = 'middle';
      ctx.fillStyle = '#eee';

  
      ctx.textAlign = 'left';
      ctx.fillText(`${page * chunkSize + i + 1}`, columns.number, y + rowHeight / 2);

 
      const displayPromo = promoName.length > 20 ? promoName.slice(0, 20) + '‚Ä¶' : promoName;
      ctx.fillText(displayPromo, columns.code, y + rowHeight / 2);


      let ownerName = '–ù–µ –Ω–∞–π–¥–µ–Ω';
      const ownerMember = message.guild.members.cache.get(info.ownerId);
      if (ownerMember) {
        ownerName = ownerMember.user.username;
        if (ownerName.length > 20) ownerName = ownerName.slice(0, 20) + '‚Ä¶';
      } else {
        ownerName = `ID: ${info.ownerId}`; 
      }
      ctx.fillText(ownerName, columns.owner, y + rowHeight / 2);

   
      ctx.textAlign = 'right';
      ctx.fillText(info.uses.toString(), columns.uses, y + rowHeight / 2);

      y += rowHeight;
    }

  
    ctx.fillStyle = '#888';
    ctx.font = '16px Sans';
    ctx.textAlign = 'left';
    const formattedTime = moment().format('HH:mm');
    ctx.fillText(`–í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: ${allPromos.length} | –í—Ä–µ–º—è: ${formattedTime}`, sidePadding, canvasHeight - 15);

    return canvas.toBuffer();
  };

  const buffer = makeEmbed();

  const row = new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId('delete_promocodes')
      .setLabel('–£–¥–∞–ª–∏—Ç—å')
      .setStyle(ButtonStyle.Danger)
  );

  const sentMsg = await message.channel.send({
    files: [{ attachment: buffer, name: 'promocodes.png' }],
    components: [row],
  });

  const collector = sentMsg.createMessageComponentCollector({ time: 60000 });
  collector.on('collect', async (interaction) => {
    if (interaction.customId === 'delete_promocodes' && interaction.user.id === message.author.id) {
      await sentMsg.delete().catch(() => {});
      collector.stop();
    } else {
      await interaction.reply({ content: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.', ephemeral: true });
    }
  });

  collector.on('end', () => {
    if (sentMsg) {
      sentMsg.edit({ components: [] }).catch(() => {});
    }
  });
}
else if (command === 'delpromo') {
  if (!message.member.roles.cache.has(CUR_MOD_ROLE_ID)) {
    const errorEmbed = new EmbedBuilder()
      .setColor('#E74C3C')
      .setTitle('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
      .setDescription('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
      .setTimestamp()
      .setFooter({ text: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω', iconURL: message.author.displayAvatarURL({ dynamic: true }) });

    const errMsg = await message.channel.send({ embeds: [errorEmbed] });
    setTimeout(() => errMsg.delete().catch(() => {}), 5000);
    await message.delete().catch(() => {});
    return;
  }

  const messagesToDelete = [];

  async function askQuestion(question) {
    const filter = m => m.author.id === message.author.id;

    const botMsg = await message.channel.send({
      embeds: [new EmbedBuilder()
        .setColor('#b19fe3')
        .setDescription(question)
        .setFooter({ text: '–û—Ç–≤–µ—Ç—å—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥' })]
    });

    messagesToDelete.push(botMsg);

    try {
      const collected = await message.channel.awaitMessages({ filter, max: 1, time: 60000, errors: ['time'] });
      const userMsg = collected.first();
      messagesToDelete.push(userMsg);

      await Promise.all(messagesToDelete.map(m => m.delete().catch(() => {})));
      messagesToDelete.length = 0;

      return userMsg.content.trim();
    } catch {
      const timeoutEmbed = new EmbedBuilder()
        .setColor('#FF5555')
        .setTitle('‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ')
        .setDescription('–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');

      const timeoutMsg = await message.channel.send({ embeds: [timeoutEmbed] });
      setTimeout(() => timeoutMsg.delete().catch(() => {}), 5000);

      throw new Error('timeout');
    }
  }

  try {
    messagesToDelete.push(message);

    let promoName = args[0]?.toLowerCase();
    if (!promoName) {
      promoName = await askQuestion('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
    }

    if (!data.promocodes[promoName]) {
      const notFoundMsg = await message.channel.send('‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      setTimeout(() => notFoundMsg.delete().catch(() => {}), 5000);
      return;
    }

    const reason = await askQuestion('üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:');

    const confirmEmbed = new EmbedBuilder()
      .setColor('#FFAA00')
      .setTitle('‚ö† –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ')
      .setDescription(`–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ \`${promoName}\`?\n**–ü—Ä–∏—á–∏–Ω–∞:** ${reason}`)
      .setFooter({ text: '–ù–∞–∂–º–∏—Ç–µ ‚úÖ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ ‚ùå –¥–ª—è –æ—Ç–º–µ–Ω—ã (60 —Å–µ–∫—É–Ω–¥)' });

    const confirmMsg = await message.channel.send({ embeds: [confirmEmbed] });
    await confirmMsg.react('‚úÖ');
    await confirmMsg.react('‚ùå');

    const reactionFilter = (reaction, user) =>
      ['‚úÖ', '‚ùå'].includes(reaction.emoji.name) && user.id === message.author.id;

    const collectedReaction = await confirmMsg.awaitReactions({
      filter: reactionFilter,
      max: 1,
      time: 60000,
      errors: ['time'],
    });

    const choice = collectedReaction.first().emoji.name;

    await Promise.all([
      confirmMsg.delete().catch(() => {}),
      message.delete().catch(() => {}),
    ]);

    if (choice === '‚ùå') {
      const cancelEmbed = new EmbedBuilder()
        .setColor('#FFAA00')
        .setTitle('‚ùå –û—Ç–º–µ–Ω–∞')
        .setDescription('–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');

      const cancelMsg = await message.channel.send({ embeds: [cancelEmbed] });
      setTimeout(() => cancelMsg.delete().catch(() => {}), 5000);
      return;
    }

    const promoInfo = data.promocodes[promoName];
    const ownerId = promoInfo.ownerId;
    let ownerUser = null;

    try {
      ownerUser = await client.users.fetch(ownerId);
    } catch (e) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ownerId}:`, e);
    }

    const deleterTag = message.author.tag;
    delete data.promocodes[promoName];

    for (const uid in data.coinsData) {
      if (data.coinsData[uid].promocode === promoName) data.coinsData[uid].promocode = null;
      if (data.coinsData[uid].usedPromocode === promoName) data.coinsData[uid].usedPromocode = null;
    }

    saveData();

    const resultEmbed = new EmbedBuilder()
      .setTitle('üóëÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª—ë–Ω')
      .setColor('#FF5555')
      .setDescription(`**–ü—Ä–æ–º–æ–∫–æ–¥:** \`${promoName}\`\n` +
        `**–í–ª–∞–¥–µ–ª–µ—Ü:** ${ownerUser ? ownerUser.tag : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}\n` +
        `**–ü—Ä–∏—á–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è:** ${reason}\n` +
        `**–£–¥–∞–ª—ë–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º:** ${deleterTag}`)
      .setTimestamp();

    await message.channel.send({ embeds: [resultEmbed] });

    if (ownerUser) {
      try {
        await ownerUser.send({
          embeds: [new EmbedBuilder()
            .setTitle('‚ùó –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª —É–¥–∞–ª—ë–Ω')
            .setColor('#FF5555')
            .setDescription(`–ü—Ä–æ–º–æ–∫–æ–¥ \`${promoName}\` –±—ã–ª —É–¥–∞–ª—ë–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${deleterTag}.\n` +
              `–ü—Ä–∏—á–∏–Ω–∞: ${reason}`)
            .setFooter({ text: '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.' })],
        });
      } catch {

      }
    }

  } catch (e) {
    if (e.message !== 'timeout') {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', e);
      const errorEmbed = new EmbedBuilder()
        .setColor('#E74C3C')
        .setTitle('‚ùå –û—à–∏–±–∫–∞')
        .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.');
      const errMsg = await message.channel.send({ embeds: [errorEmbed] });
      setTimeout(() => errMsg.delete().catch(() => {}), 5000);
    }
  }
}
else if (command === 'pay') {
  if (message.channel.id !== COINS_CHANNEL_ID) return message.delete().catch(() => {});

  let rawUser = args[0];
  let amountStr = args[1];

  if (!rawUser) {
    return sendError('‚ùó –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–æ–∏–Ω—ã, —á–µ—Ä–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ ID.');
  }

  const userIdMatch = rawUser.match(/^<@!?(\d+)>$/);
  const userId = userIdMatch ? userIdMatch[1] : rawUser;

  const target = await message.client.users.fetch(userId).catch(() => null);

  if (!target) {
    return sendError('‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ.');
  }

  if (!amountStr || isNaN(amountStr)) {
    return sendError('‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.');
  }

  const amount = parseInt(amountStr, 10);
  if (amount <= 0) {
    return sendError('‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.');
  }

  const senderId = message.author.id;
  const receiverId = target.id;

  if (senderId === receiverId) {
    return sendError('‚ùó –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∫–æ–∏–Ω—ã —Å–∞–º–æ–º—É —Å–µ–±–µ.');
  }

  if (!data.coinsData[senderId]) {
    data.coinsData[senderId] = { coins: 0, promocode: null, usedPromocode: null };
  }
  if (!data.coinsData[receiverId]) {
    data.coinsData[receiverId] = { coins: 0, promocode: null, usedPromocode: null };
  }

  if (data.coinsData[senderId].coins < amount) {
    return sendError(`‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${data.coinsData[senderId].coins} –∫–æ–∏–Ω–æ–≤.`);
  }

  data.coinsData[senderId].coins -= amount;
  data.coinsData[receiverId].coins += amount;
  saveData();

  const coinWordSender = declOfNum(amount, ['–∫–æ–∏–Ω', '–∫–æ–∏–Ω–∞', '–∫–æ–∏–Ω–æ–≤']);
  const coinWordReceiver = declOfNum(amount, ['–∫–æ–∏–Ω', '–∫–æ–∏–Ω–∞', '–∫–æ–∏–Ω–æ–≤']);

  const reply = 
    `–° –±–∞–ª–∞–Ω—Å–∞ <@${senderId}> –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ ${amount.toLocaleString('ru-RU')} ${coinWordSender}\n` +
    `–ù–∞ –±–∞–ª–∞–Ω—Å <@${receiverId}> –ø–æ—Å—Ç—É–ø–∏–ª–æ ${amount.toLocaleString('ru-RU')} ${coinWordReceiver}`;

  const sentMessage = await message.channel.send(reply);

  setTimeout(() => {
    sentMessage.delete().catch(() => {});
  }, 30000);

  await message.delete().catch(() => {});
}
if (command === 'create_role') {
  if (!message.member.roles.cache.has(CUR_MOD_ROLE_ID)) {
    return sendError(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞).');
  }

  await message.delete().catch(() => {});

  async function ask(prompt) {
    const promptMsg = await message.channel.send({
      embeds: [createEmbed({ title: 'üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏', description: prompt, color: '#6A5ACD' })]
    });

    try {
      const collected = await message.channel.awaitMessages({
        filter: m => m.author.id === message.author.id,
        max: 1,
        time: 60000,
        errors: ['time']
      });

      const reply = collected.first();
      await reply.delete().catch(() => {});
      await promptMsg.delete().catch(() => {});
      return reply.content.trim();
    } catch {
      await promptMsg.delete().catch(() => {});
      const timeoutMsg = await message.channel.send({
        embeds: [createEmbed({ title: '‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ', description: '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.', color: '#FF5555' })]
      });
      setTimeout(() => timeoutMsg.delete().catch(() => {}), 5000);
      throw new Error('–û—Ç–º–µ–Ω–∞');
    }
  }

  async function askReaction(prompt, emojis, isEmbed = false) {
    const msg = await message.channel.send({
      embeds: isEmbed
        ? [prompt]
        : [createEmbed({ title: 'üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏', description: prompt, color: '#6A5ACD' })]
    });

    for (const e of emojis) await msg.react(e);

    try {
      const collected = await msg.awaitReactions({
        filter: (r, u) => emojis.includes(r.emoji.name) && u.id === message.author.id,
        max: 1,
        time: 60000,
        errors: ['time']
      });
      const choice = collected.first().emoji.name;
      await msg.delete().catch(() => {});
      return choice;
    } catch {
      await msg.delete().catch(() => {});
      const timeoutMsg = await message.channel.send({
        embeds: [createEmbed({ title: '‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ', description: '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.', color: '#FF5555' })]
      });
      setTimeout(() => timeoutMsg.delete().catch(() => {}), 5000);
      throw new Error('–û—Ç–º–µ–Ω–∞');
    }
  }

  async function askMembers(count) {
    const promptEmbed = createEmbed({
      title: 'üë• –í–≤–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
      description:
        count === 1
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–ø–æ–º—è–Ω–∏—Ç–µ **–æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞** –¥–ª—è —Ä–æ–ª–∏.\n\n–ü—Ä–∏–º–µ—Ä: `@User`'
          : `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–æ–≤–Ω–æ **${count} —É—á–∞—Å—Ç–Ω–∏–∫–∞(–æ–≤)** —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (ID –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è).\n\n–ü—Ä–∏–º–µ—Ä: \`@User1 @User2\``,
      color: '#6A5ACD',
      footerText: '–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: 60 —Å–µ–∫—É–Ω–¥'
    });

    const promptMsg = await message.channel.send({ embeds: [promptEmbed] });

    try {
      const collected = await message.channel.awaitMessages({
        filter: m => m.author.id === message.author.id,
        max: 1,
        time: 60000,
        errors: ['time']
      });

      const reply = collected.first();
      await reply.delete().catch(() => {});
      await promptMsg.delete().catch(() => {});

      return reply.content.trim();
    } catch {
      await promptMsg.delete().catch(() => {});
      const timeoutMsg = await message.channel.send({
        embeds: [createEmbed({ title: '‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ', description: '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.', color: '#FF5555' })]
      });
      setTimeout(() => timeoutMsg.delete().catch(() => {}), 5000);
      throw new Error('–û—Ç–º–µ–Ω–∞');
    }
  }

  try {
    const countChoice = await askReaction(
      '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–ª–∏:\n\n1Ô∏è‚É£ ‚Äî –û–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫\n2Ô∏è‚É£ ‚Äî –î–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞',
      ['1Ô∏è‚É£', '2Ô∏è‚É£']
    );
    const count = countChoice === '1Ô∏è‚É£' ? 1 : 2;

    const step2 = await askMembers(count);
    const usersRaw = step2.split(/\s+/);
    if (usersRaw.length !== count) {
      return sendError(message, `–ù—É–∂–Ω–æ —Ä–æ–≤–Ω–æ ${count} —É—á–∞—Å—Ç–Ω–∏–∫–∞(–æ–≤).`);
    }

    const memberIds = [];
    for (const u of usersRaw) {
      const match = u.match(/^<@!?(\d+)>$/);
      const userId = match ? match[1] : u;
      const member = await message.guild.members.fetch(userId).catch(() => null);
      if (!member) return sendError(message, `–£—á–∞—Å—Ç–Ω–∏–∫ "${u}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      memberIds.push(member.id);
    }

    let payerId = memberIds[0];
    if (count === 2) {
      const payerChoice = await askReaction(
        `–ö—Ç–æ –±—É–¥–µ—Ç –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —Ä–æ–ª—å?\n\n1Ô∏è‚É£ ‚Äî <@${memberIds[0]}>\n2Ô∏è‚É£ ‚Äî <@${memberIds[1]}>`,
        ['1Ô∏è‚É£', '2Ô∏è‚É£']
      );
      payerId = payerChoice === '1Ô∏è‚É£' ? memberIds[0] : memberIds[1];
    }

    const roleName = await ask('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ (–æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):');
    if (roleName.length < 1 || roleName.length > 100) return sendError(message, '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.');

    let color = await ask('–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Ä–æ–ª–∏ –≤ HEX —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä #FF0000):');
    if (!/^#?[0-9A-Fa-f]{6}$/.test(color)) return sendError(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞.');
    if (!color.startsWith('#')) color = '#' + color;

    const costStr = await ask('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–æ–ª–∏ –≤ –∫–æ–∏–Ω–∞—Ö (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):');
    const cost = parseInt(costStr, 10);
    if (isNaN(cost) || cost <= 0) return sendError(message, '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.');

    let finalRoleName = roleName;

    const wantEmojis = await askReaction(
      '–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–º–∞–π–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏?\n\n‚úÖ ‚Äî –î–∞\n‚ùå ‚Äî –ù–µ—Ç',
      ['‚úÖ', '‚ùå']
    );

    let emojis = [];
    if (wantEmojis === '‚úÖ') {
      const emojisRaw = await ask('–í–≤–µ–¥–∏—Ç–µ —Å–º–∞–π–ª—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:');
      emojis = emojisRaw.split(/\s+/).filter(e => e.length > 0);

      const placement = await askReaction(
        '**üé® –ö—É–¥–∞ –≤—Å—Ç–∞–≤–∏—Ç—å —Å–º–∞–π–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ä–æ–ª–∏?**\n\n' +
        'üîº ‚Äî –í –Ω–∞—á–∞–ª–µ‚ÄÉ‚Üí‚ÄÉ`üòÑ –ù–∞–∑–≤–∞–Ω–∏–µ`\n' +
        'üîΩ ‚Äî –í –∫–æ–Ω—Ü–µ‚ÄÉ‚ÄÉ‚Üí‚ÄÉ`–ù–∞–∑–≤–∞–Ω–∏–µ üòÑ`\n' +
        'üîÅ ‚Äî –ü–æ –±–æ–∫–∞–º‚ÄÉ‚Üí‚ÄÉ`üòÑ –ù–∞–∑–≤–∞–Ω–∏–µ üòÑ`',
        ['üîº', 'üîΩ', 'üîÅ']
      );

      if (placement === 'üîº') {
        finalRoleName = `${emojis.join(' ')} ${roleName}`;
      } else if (placement === 'üîΩ') {
        finalRoleName = `${roleName} ${emojis.join(' ')}`;
      } else if (placement === 'üîÅ') {
        finalRoleName = `${emojis.join(' ')} ${roleName} ${emojis.join(' ')}`;
      }
    }

    if (!data.coinsData[payerId]) data.coinsData[payerId] = { coins: 0 };
    if (data.coinsData[payerId].coins < cost) return sendError(message, `<@${payerId}> –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ (–Ω—É–∂–Ω–æ ${cost}).`);

    const previewEmbed = createEmbed({
      title: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏',
      description:
        `**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${finalRoleName}\n` +
        `**–¶–≤–µ—Ç:** ${color}\n` +
        `**–°—Ç–æ–∏–º–æ—Å—Ç—å:** ${cost} –∫–æ–∏–Ω–æ–≤\n` +
        `**–£—á–∞—Å—Ç–Ω–∏–∫–∏:** ${memberIds.map(id => `<@${id}>`).join(', ')}\n` +
        (count === 2 ? `**–ü–ª–∞—Ç–µ–ª—å—â–∏–∫:** <@${payerId}>\n` : '') +
        `**–°–º–∞–π–ª—ã:** ${emojis.length ? emojis.join(' ') : '–ù–µ—Ç'}`,
      color,
      footerText: '–ù–∞–∂–º–∏—Ç–µ ‚úÖ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ ‚ùå –¥–ª—è –æ—Ç–º–µ–Ω—ã'
    });

    const confirm = await askReaction(previewEmbed, ['‚úÖ', '‚ùå'], true);
    if (confirm === '‚ùå') throw new Error('–û—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');

    const role = await message.guild.roles.create({
      name: finalRoleName,
      color,
      mentionable: true,
      reason: `–°–æ–∑–¥–∞–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${message.author.tag}`
    });

    const referenceRole = message.guild.roles.cache.get(REFERENCE_ROLE_ID);
    if (referenceRole) {
      await role.setPosition(referenceRole.position - 1).catch(console.error);
    }

    for (const id of memberIds) {
      const member = await message.guild.members.fetch(id);
      await member.roles.add(role);
    }

    data.coinsData[payerId].coins -= cost;

    if (!data.privateRoles) data.privateRoles = {};
    data.privateRoles[role.id] = {
      ownerIds: memberIds,
      createdAt: Date.now(),
      expiresAt: Date.now() + 30 * 24 * 60 * 60 * 1000, // 30 –¥–Ω–µ–π
      warning48Sent: false,
      warning24Sent: false,
      cost,
      color,
      emojis,
      roleName: finalRoleName,
      payerId,
    };
    saveData();

    await message.channel.send({
      embeds: [createEmbed({
        title: 'üéâ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!',
        description:
          `**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${finalRoleName}\n` +
          `**–£—á–∞—Å—Ç–Ω–∏–∫–∏:** ${memberIds.map(id => `<@${id}>`).join(', ')}\n` +
          `**–¶–≤–µ—Ç:** ${color}\n` +
          `**–°—Ç–æ–∏–º–æ—Å—Ç—å:** ${cost} –∫–æ–∏–Ω–æ–≤\n` +
          (count === 2 ? `**–ü–ª–∞—Ç–µ–ª—å—â–∏–∫:** <@${payerId}>\n` : '') +
          `**–°–º–∞–π–ª—ã:** ${emojis.length ? emojis.join(' ') : '–ù–µ—Ç'}\n\n` +
          `–†–æ–ª—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ **30 –¥–Ω–µ–π**.`,
        color,
        footerText: `–°–æ–∑–¥–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${message.author.tag}`
      })]
    });

  } catch (e) {
    if (e.message !== '–û—Ç–º–µ–Ω–∞') {
      console.error(e);
      await sendError(message, e.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏.');
    }
  }
}
const ms = 24 * 60 * 60 * 1000;
 if (command === 'del_role') {
  if (!message.member.roles.cache.has(CUR_MOD_ROLE_ID)) {
    const errorEmbed = new EmbedBuilder()
      .setColor('#E74C3C')
      .setTitle('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
      .setDescription('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
      .setTimestamp()
      .setFooter({ text: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω', iconURL: message.author.displayAvatarURL({ dynamic: true }) });

    const errMsg = await message.channel.send({ embeds: [errorEmbed] });
    setTimeout(() => errMsg.delete().catch(() => {}), 5000);
    await message.delete().catch(() => {});
    return;
  }

  const messagesToDelete = [];

  async function askQuestion(question) {
    const filter = m => m.author.id === message.author.id;

    const botMsg = await message.channel.send({
      embeds: [new EmbedBuilder()
        .setColor('#6A5ACD')
        .setDescription(question)
        .setFooter({ text: '–û—Ç–≤–µ—Ç—å—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥' })]
    });

    messagesToDelete.push(botMsg);

    try {
      const collected = await message.channel.awaitMessages({ filter, max: 1, time: 60000, errors: ['time'] });
      const userMsg = collected.first();
      messagesToDelete.push(userMsg);

      await Promise.all(messagesToDelete.map(m => m.delete().catch(() => {})));
      messagesToDelete.length = 0;

      return userMsg.content.trim();
    } catch {
      const timeoutEmbed = new EmbedBuilder()
        .setColor('#FF5555')
        .setTitle('‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ')
        .setDescription('–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.');

      const timeoutMsg = await message.channel.send({ embeds: [timeoutEmbed] });
      setTimeout(() => timeoutMsg.delete().catch(() => {}), 5000);

      throw new Error('timeout');
    }
  }

  try {
    messagesToDelete.push(message);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å
    let roleRaw = args[0];
    if (!roleRaw) {
      roleRaw = await askQuestion('üìù –£–ø–æ–º—è–Ω–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ—ë ID:');
    }

    const roleIdMatch = roleRaw.match(/^<@&(\d+)>$/) || roleRaw.match(/^(\d+)$/);
    if (!roleIdMatch) {
      const errEmbed = new EmbedBuilder()
        .setColor('#E74C3C')
        .setDescription('‚ùå –†–æ–ª—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –£–∫–∞–∂–∏—Ç–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ ID —Ä–æ–ª–∏.');
      const errMsg = await message.channel.send({ embeds: [errEmbed] });
      setTimeout(() => errMsg.delete().catch(() => {}), 5000);
      return;
    }
    const roleId = roleIdMatch[1];

    const role = message.guild.roles.cache.get(roleId);
    if (!role) {
      const errEmbed = new EmbedBuilder()
        .setColor('#E74C3C')
        .setDescription('‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.');
      const errMsg = await message.channel.send({ embeds: [errEmbed] });
      setTimeout(() => errMsg.delete().catch(() => {}), 5000);
      return;
    }

    if (!data.privateRoles || !data.privateRoles[roleId]) {
      const errEmbed = new EmbedBuilder()
        .setColor('#E74C3C')
        .setDescription('‚ùå –î–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è.');
      const errMsg = await message.channel.send({ embeds: [errEmbed] });
      setTimeout(() => errMsg.delete().catch(() => {}), 5000);
      return;
    }

    // –ó–∞–ø—Ä–æ—Å –ø—Ä–∏—á–∏–Ω—ã
    const reason = await askQuestion('üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏:');

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
    const confirmEmbed = new EmbedBuilder()
      .setColor('#FFAA00')
      .setTitle('‚ö† –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ')
      .setDescription(`–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å <@&${roleId}>?\n**–ü—Ä–∏—á–∏–Ω–∞:** ${reason}`);

    const buttons = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('confirm_delete')
          .setLabel('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
          .setStyle(ButtonStyle.Success),
        new ButtonBuilder()
          .setCustomId('cancel_delete')
          .setLabel(' –û—Ç–º–µ–Ω–∞')
          .setStyle(ButtonStyle.Danger)
      );

    const confirmMsg = await message.channel.send({ embeds: [confirmEmbed], components: [buttons] });

    const filter = i => ['confirm_delete', 'cancel_delete'].includes(i.customId) && i.user.id === message.author.id;

    const interaction = await confirmMsg.awaitMessageComponent({ filter, time: 60000 }).catch(async () => {
      await confirmMsg.delete().catch(() => {});
      const timeoutEmbed = new EmbedBuilder()
        .setColor('#FF5555')
        .setTitle('‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ')
        .setDescription('–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
      const timeoutMsg = await message.channel.send({ embeds: [timeoutEmbed] });
      setTimeout(() => timeoutMsg.delete().catch(() => {}), 5000);
      throw new Error('timeout');
    });

    await confirmMsg.delete().catch(() => {});
    await message.delete().catch(() => {});

    if (interaction.customId === 'cancel_delete') {
      const cancelEmbed = new EmbedBuilder()
        .setColor('#FFAA00')
        .setTitle('‚ùå –û—Ç–º–µ–Ω–∞')
        .setDescription('–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.');

      const cancelMsg = await message.channel.send({ embeds: [cancelEmbed] });
      setTimeout(() => cancelMsg.delete().catch(() => {}), 5000);
      return;
    }

    // –°–Ω–∏–º–∞–µ–º —Ä–æ–ª—å —É –≤—Å–µ—Ö
    for (const [memberId, member] of role.members) {
      try {
        await member.roles.remove(role);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –õ–°
        try {
          await member.send({
            embeds: [new EmbedBuilder()
              .setColor('#FF5555')
              .setTitle('‚ö† –†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞')
              .setDescription(`–†–æ–ª—å **${role.name}** –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${message.author.tag}.\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`)
              .setFooter({ text: '–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.' })]
          });
        } catch {}
      } catch {}
    }

    // –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å
    await role.delete('–£–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π —Ä–æ–ª–∏');

    // –£–¥–∞–ª—è–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    delete data.privateRoles[roleId];
    saveData();

    const resultEmbed = new EmbedBuilder()
      .setTitle('‚úÖ –†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞')
      .setColor('#00FF00')
      .setDescription(`–†–æ–ª—å <@&${roleId}> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}\n–£–¥–∞–ª–∏–ª: ${message.author.tag}`);

    await message.channel.send({ embeds: [resultEmbed] });

  } catch (e) {
    if (e.message !== 'timeout') {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π —Ä–æ–ª–∏:', e);
      const errorEmbed = new EmbedBuilder()
        .setColor('#E74C3C')
        .setTitle('‚ùå –û—à–∏–±–∫–∞')
        .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏.');
      const errMsg = await message.channel.send({ embeds: [errorEmbed] });
      setTimeout(() => errMsg.delete().catch(() => {}), 5000);
    }
  }
}
setInterval(async () => {
  const now = Date.now();

  if (!data.privateRoles) return;

  for (const [roleId, roleData] of Object.entries(data.privateRoles)) {
    const timeLeft = roleData.expiresAt - now;

    if (timeLeft <= 0) {
      const guildRole = message.guild.roles.cache.get(roleId);
      if (guildRole) {
        try {
          await guildRole.delete('–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Ä–æ–ª–∏');
        } catch (e) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ ${roleId}:`, e);
        }
      }

      const deletedEmbed = createRoleNoticeEmbed(
        'üóëÔ∏è –†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞',
        `–í–∞—à–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ä–æ–ª—å **${roleData.roleName}** –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏.\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!`,
        '#FF4500'
      );

      for (const memberId of roleData.ownerIds) {
        try {
          const member = await message.guild.members.fetch(memberId);
          await member.send({ embeds: [deletedEmbed] });
        } catch {}
      }

      delete data.privateRoles[roleId];
      saveData();

    } else if (timeLeft <= 2 * ms && !roleData.warning48Sent) {
      roleData.warning48Sent = true;

      const warn48Embed = createRoleNoticeEmbed(
        '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –†–æ–ª—å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 2 –¥–Ω—è',
        `–í–∞—à–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ä–æ–ª—å **${roleData.roleName}** –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 2 –¥–Ω—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å —Ä–æ–ª—å.`,
        '#FFA500'
      );

      for (const memberId of roleData.ownerIds) {
        try {
          const member = await message.guild.members.fetch(memberId);
          await member.send({ embeds: [warn48Embed] });
        } catch {}
      }

      saveData();

    } else if (timeLeft <= ms && !roleData.warning24Sent) {
      roleData.warning24Sent = true;

      const warn24Embed = createRoleNoticeEmbed(
        '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –†–æ–ª—å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å',
        `–í–∞—à–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ä–æ–ª—å **${roleData.roleName}** –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å —Ä–æ–ª—å.`,
        '#FFA500'
      );

      for (const memberId of roleData.ownerIds) {
        try {
          const member = await message.guild.members.fetch(memberId);
          await member.send({ embeds: [warn24Embed] });
        } catch {}
      }

      saveData();
    }
  }
}, 60 * 60 * 1000);
if (command === 'extendrole') {
  try {
    await message.delete().catch(() => {});

    const userId = message.author.id;
    const roleMention = message.mentions.roles.first();

    if (!roleMention) {
      const errorMsg = await message.channel.send({
        embeds: [createEmbed({
          title: '‚ùå –û—à–∏–±–∫–∞',
          description: '–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å, —É–ø–æ–º—è–Ω—É–≤ –µ—ë –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.',
          color: '#E74C3C',
        })],
      });
      setTimeout(() => errorMsg.delete().catch(() => {}), 10000);
      return;
    }

    const roleEntry = Object.entries(data.privateRoles).find(([roleId, roleInfo]) => 
      roleId === roleMention.id && roleInfo.ownerIds.includes(userId)
    );

    if (!roleEntry) {
      const errorMsg = await message.channel.send({
        embeds: [createEmbed({
          title: '‚ùå –û—à–∏–±–∫–∞',
          description: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–π —Ä–æ–ª–∏ —Å —Ç–∞–∫–∏–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ—ë –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.',
          color: '#E74C3C',
        })],
      });
      setTimeout(() => errorMsg.delete().catch(() => {}), 10000);
      return;
    }

    const [roleId, roleInfo] = roleEntry;


    if (!data.coinsData[userId]) data.coinsData[userId] = { coins: 0 };
    const extendCost = Math.ceil(roleInfo.cost * 0.2);

    if (data.coinsData[userId].coins < extendCost) {
      const errorMsg = await message.channel.send({
        embeds: [createEmbed({
          title: '‚ùå –û—à–∏–±–∫–∞',
          description: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Ä–æ–ª–∏ (–Ω—É–∂–Ω–æ ${extendCost}).`,
          color: '#E74C3C',
        })],
      });
      setTimeout(() => errorMsg.delete().catch(() => {}), 10000);
      return;
    }


    data.coinsData[userId].coins -= extendCost;


    const now = Date.now();
    roleInfo.expiresAt = Math.max(roleInfo.expiresAt, now) + 30 * 24 * 60 * 60 * 1000;
    roleInfo.warningSent = false;
    saveData();

    const successMsg = await message.channel.send({
      embeds: [createEmbed({
        title: '‚úÖ –†–æ–ª—å –ø—Ä–æ–¥–ª–µ–Ω–∞',
        description: `–†–æ–ª—å **${roleInfo.roleName}** –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è: ${extendCost} –∫–æ–∏–Ω–æ–≤.`,
        color: roleInfo.color || '#6A5ACD',
      })],
    });
    setTimeout(() => successMsg.delete().catch(() => {}), 10000);

  } catch (error) {
    console.error(error);
    const errorMsg = await message.channel.send({
      embeds: [createEmbed({
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.',
        color: '#E74C3C',
      })],
    });
    setTimeout(() => errorMsg.delete().catch(() => {}), 10000);
  }
}
else if (command === 'checkroles') {
  try {
    await message.delete().catch(() => {});

    const userId = message.author.id;
    const now = Date.now();

    const rolesOwned = Object.entries(data.privateRoles)
      .filter(([_, roleInfo]) => roleInfo.ownerIds.includes(userId) && roleInfo.expiresAt > now)
      .sort(([, a], [, b]) => a.expiresAt - b.expiresAt);

    if (rolesOwned.length === 0) {
      const noRolesMsg = await message.channel.send({
        embeds: [createEmbed({
          title: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
          description: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Ä–æ–ª–µ–π.',
          color: '#6A5ACD',
        })],
      });
      setTimeout(() => noRolesMsg.delete().catch(() => {}), 30000);
      return;
    }

    const canvasWidth = 1300;
    const rowHeight = 60;
    const headerHeight = 100;
    const tableHeaderHeight = 80;
    const footerHeight = -20;
    const sidePadding = 60;
const canvasHeight = headerHeight + tableHeaderHeight + rolesOwned.length * rowHeight + footerHeight;

    const canvas = createCanvas(canvasWidth, canvasHeight);
    const ctx = canvas.getContext('2d');

    const gradient = ctx.createLinearGradient(0, 0, 0, canvasHeight);
    gradient.addColorStop(0, '#1e2125');
    gradient.addColorStop(1, '#2e3238');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, canvasWidth, canvasHeight);


    const titleText = 'üìã –í–∞—à–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ä–æ–ª–∏';
    ctx.font = 'bold 42px Sans';
    const textWidth = ctx.measureText(titleText).width;
    const grad = ctx.createLinearGradient(sidePadding, 0, sidePadding + textWidth, 0);
    grad.addColorStop(0, '#e3c55a');
    grad.addColorStop(1, '#c2912a');

    ctx.fillStyle = grad;
    ctx.shadowColor = 'rgba(255, 200, 0, 0.4)';
    ctx.shadowBlur = 12;
    ctx.fillText(titleText, sidePadding, 60);
    ctx.shadowColor = 'transparent';


    const sepGradient = ctx.createLinearGradient(0, 70, 0, 76);
    sepGradient.addColorStop(0, '#ffd70033');
    sepGradient.addColorStop(0.5, '#ffaa0033');
    sepGradient.addColorStop(1, '#ffd70033');

    ctx.fillStyle = sepGradient;
    ctx.fillRect(sidePadding, 70, canvasWidth - sidePadding * 2, 6);


    const columns = [
      { title: '‚Ññ', x: sidePadding + 20, align: 'left' },
      { title: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏', x: sidePadding + 100, align: 'left' },
      { title: '–ò—Å—Ç–µ–∫–∞–µ—Ç', x: sidePadding + 820, align: 'right' },
      { title: '–û—Å—Ç–∞–ª–æ—Å—å', x: sidePadding + 1100, align: 'right' }
    ];

    ctx.font = 'bold 26px Sans';
    ctx.fillStyle = '#929090ff';
    for (const col of columns) {
      ctx.textAlign = col.align;
      ctx.fillText(col.title, col.x, headerHeight + 10);
    }


    let y = headerHeight + tableHeaderHeight - rowHeight / 2;
    ctx.font = '22px Sans';

    for (let i = 0; i < rolesOwned.length; i++) {
      const [_, roleInfo] = rolesOwned[i];
      const expiresAt = roleInfo.expiresAt;
      const remainingMs = expiresAt - now;

  
      let hexColor = roleInfo.color || '#6A5ACD';
      if (!hexColor || hexColor === '#000000') hexColor = '#6A5ACD';


      ctx.fillStyle = hexToRgba(hexColor, 0.1);
      roundRect(ctx, sidePadding - 10, y - rowHeight / 2 + 5, canvasWidth - sidePadding * 2 + 20, rowHeight - 10, 10, true, false);

  
      ctx.strokeStyle = hexToRgba(hexColor, 0.2);
      ctx.lineWidth = 2;
      roundRect(ctx, sidePadding - 10, y - rowHeight / 2 + 5, canvasWidth - sidePadding * 2 + 20, rowHeight - 10, 10, false, true);

      ctx.fillStyle = '#a5a4a4ff';
      ctx.textBaseline = 'middle';
      ctx.textAlign = 'left';
      ctx.fillText(`${i + 1}`, sidePadding + 20, y);

      ctx.fillText(roleInfo.roleName.length > 40 ? roleInfo.roleName.slice(0, 40) + '‚Ä¶' : roleInfo.roleName, sidePadding + 100, y);

      ctx.textAlign = 'right';
      ctx.fillStyle = '#b6b5b5ff';
      ctx.fillText(moment(expiresAt).format('DD.MM.YYYY'), sidePadding + 820, y);

      const remainingDays = Math.ceil(remainingMs / (24 * 60 * 60 * 1000));
      ctx.fillText(`${remainingDays} –¥–Ω.`, sidePadding + 1100, y);

      y += rowHeight; 
    }

  
    ctx.fillStyle = '#888';
    ctx.font = '16px Sans';
    ctx.textAlign = 'left';
    const formattedTime = moment().format('DD.MM.YYYY ‚Ä¢ HH:mm');
    ctx.fillText(`–í—Å–µ–≥–æ —Ä–æ–ª–µ–π: ${rolesOwned.length} ‚Ä¢ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: ${formattedTime}`, sidePadding, canvasHeight - 15);

    const buffer = canvas.toBuffer();

    const sentMsg = await message.channel.send({
      files: [{ attachment: buffer, name: 'roles.png' }]
    });

    setTimeout(() => {
      sentMsg.delete().catch(() => {});
    }, 30000);

  } catch (error) {
    console.error(error);
    const errorMsg = await message.channel.send({
      embeds: [createEmbed({
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.',
        color: '#E74C3C',
      })],
    });
    setTimeout(() => errorMsg.delete().catch(() => {}), 30000);
  }
}
function hexToRgba(hex, alpha = 1) {
  hex = hex.replace('#', '');
  const bigint = parseInt(hex, 16);
  const r = (bigint >> 16) & 255;
  const g = (bigint >> 8) & 255;
  const b = bigint & 255;
  return `rgba(${r}, ${g}, ${b}, ${alpha})`;
}
function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
  if (typeof radius === 'number') {
    radius = { tl: radius, tr: radius, br: radius, bl: radius };
  } else {
    for (let side of ['tl', 'tr', 'br', 'bl']) {
      radius[side] = radius[side] || 0;
    }
  }
  ctx.beginPath();
  ctx.moveTo(x + radius.tl, y);
  ctx.lineTo(x + width - radius.tr, y);
  ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);
  ctx.lineTo(x + width, y + height - radius.br);
  ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);
  ctx.lineTo(x + radius.bl, y + height);
  ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);
  ctx.lineTo(x, y + radius.tl);
  ctx.quadraticCurveTo(x, y, x + radius.tl, y);
  ctx.closePath();
  if (fill) ctx.fill();
  if (stroke) ctx.stroke();
}
if (command === 'give_coins') {

  if (!message.member.roles.cache.has(MAIN_MOD_ROLE_ID)) {
    const errorEmbed = {
      color: 0xE74C3C, 
      title: '‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞',
      description: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.',
      timestamp: new Date(),
      footer: {
        text: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω',
        icon_url: message.author.displayAvatarURL({ dynamic: true }),
      },
    };

    const botMsg = await message.channel.send({ embeds: [errorEmbed] });
    setTimeout(() => botMsg.delete().catch(() => {}), 5000);
    await message.delete().catch(() => {});
    return;
  }

  const userMention = args[0];
  const amount = parseInt(args[1], 10);
  const reason = args.slice(2).join(' ') || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';

  if (!userMention || isNaN(amount) || amount <= 0) {
    const usageEmbed = {
      color: 0xE67E22, 
      title: '‚ùó –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã',
      description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n`/give_coins @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—á–∏–Ω–∞`',
      timestamp: new Date(),
      footer: {
        text: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
        icon_url: message.author.displayAvatarURL({ dynamic: true }),
      },
    };

    const botMsg = await message.channel.send({ embeds: [usageEmbed] });
    setTimeout(() => botMsg.delete().catch(() => {}), 5000);
    await message.delete().catch(() => {});
    return;
  }

  const userIdMatch = userMention.match(/^<@!?(\d+)>$/);
  if (!userIdMatch) {
    const invalidUserEmbed = {
      color: 0xE74C3C,
      title: '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ (@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å).',
      timestamp: new Date(),
      footer: {
        text: '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞',
        icon_url: message.author.displayAvatarURL({ dynamic: true }),
      },
    };

    const botMsg = await message.channel.send({ embeds: [invalidUserEmbed] });
    setTimeout(() => botMsg.delete().catch(() => {}), 5000);
    await message.delete().catch(() => {});
    return;
  }

  const targetUserId = userIdMatch[1];

  if (!data.coinsData[targetUserId]) {
    data.coinsData[targetUserId] = { coins: 0, promocode: null, usedPromocode: null };
  }

  data.coinsData[targetUserId].coins += amount;
  saveData();

  const successEmbed = {
    color: 0x9B59B6,
    title: '‚ú® –í—ã–¥–∞—á–∞ –∫–æ–∏–Ω–æ–≤',
    description: `–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä <@${message.author.id}> –≤—ã–¥–∞–ª –∫–æ–∏–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫—É.`,
    fields: [
      {
        name: 'üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å',
        value: `<@${targetUserId}>`,
        inline: true,
      },
      {
        name: 'üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        value: `**${amount.toLocaleString('ru-RU')}** –∫–æ–∏–Ω–æ–≤`,
        inline: true,
      },
      {
        name: 'üìù –ü—Ä–∏—á–∏–Ω–∞',
        value: reason,
        inline: false,
      },
    ],
    timestamp: new Date(),
    footer: {
      text: '–í—ã–¥–∞—á–∞ –∫–æ–∏–Ω–æ–≤',
      icon_url: message.author.displayAvatarURL({ dynamic: true }),
    },
  };

  await message.channel.send({ embeds: [successEmbed] });

  await message.delete().catch(() => {});
}
else if (command === 'take_coins') {

  if (!message.member.roles.cache.has(MAIN_MOD_ROLE_ID)) {
    const errorEmbed = {
      color: 0xE74C3C,
      title: '‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞',
      description: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.',
      timestamp: new Date(),
      footer: {
        text: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω',
        icon_url: message.author.displayAvatarURL({ dynamic: true }),
      },
    };

    const botMsg = await message.channel.send({ embeds: [errorEmbed] });
    setTimeout(() => botMsg.delete().catch(() => {}), 5000);
    await message.delete().catch(() => {});
    return;
  }

  const userMention = args[0];
  const amount = parseInt(args[1], 10);
  const reason = args.slice(2).join(' ') || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';

  if (!userMention || isNaN(amount) || amount <= 0) {
    const usageEmbed = {
      color: 0xE67E22,
      title: '‚ùó –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã',
      description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n`/take_coins @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—á–∏–Ω–∞`',
      timestamp: new Date(),
      footer: {
        text: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
        icon_url: message.author.displayAvatarURL({ dynamic: true }),
      },
    };

    const botMsg = await message.channel.send({ embeds: [usageEmbed] });
    setTimeout(() => botMsg.delete().catch(() => {}), 5000);
    await message.delete().catch(() => {});
    return;
  }

  const userIdMatch = userMention.match(/^<@!?(\d+)>$/);
  if (!userIdMatch) {
    const invalidUserEmbed = {
      color: 0xE74C3C,
      title: '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ (@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å).',
      timestamp: new Date(),
      footer: {
        text: '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞',
        icon_url: message.author.displayAvatarURL({ dynamic: true }),
      },
    };

    const botMsg = await message.channel.send({ embeds: [invalidUserEmbed] });
    setTimeout(() => botMsg.delete().catch(() => {}), 5000);
    await message.delete().catch(() => {});
    return;
  }

  const targetUserId = userIdMatch[1];

  if (!data.coinsData[targetUserId]) {
    data.coinsData[targetUserId] = { coins: 0, promocode: null, usedPromocode: null };
  }

  data.coinsData[targetUserId].coins = Math.max(0, data.coinsData[targetUserId].coins - amount);
  saveData();

  const successEmbed = {
    color: 0x3498DB,
    title: 'üí∏ –°–Ω—è—Ç–∏–µ –∫–æ–∏–Ω–æ–≤',
    description: `–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä <@${message.author.id}> —Å–Ω—è–ª –∫–æ–∏–Ω—ã —É —É—á–∞—Å—Ç–Ω–∏–∫–∞.`,
    fields: [
      {
        name: 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫',
        value: `<@${targetUserId}>`,
        inline: true,
      },
      {
        name: 'üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        value: `**${amount.toLocaleString('ru-RU')}** –∫–æ–∏–Ω–æ–≤`,
        inline: true,
      },
      {
        name: 'üìù –ü—Ä–∏—á–∏–Ω–∞',
        value: reason,
        inline: false,
      },
    ],
    timestamp: new Date(),
    footer: {
      text: '–°–Ω—è—Ç–∏–µ –∫–æ–∏–Ω–æ–≤',
      icon_url: message.author.displayAvatarURL({ dynamic: true }),
    },
  };

  await message.channel.send({ embeds: [successEmbed] });
  await message.delete().catch(() => {});
}
else if (command === 'give_bonus_role') {
  if (!message.member.roles.cache.has(MAIN_MOD_ROLE_ID)) {
    const noAccess = await message.reply({
      embeds: [{
        color: 0xE74C3C,
        title: '‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞',
        description: 'üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.',
        timestamp: new Date(),
        footer: {
          text: '–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤',
          icon_url: message.guild.iconURL({ dynamic: true })
        }
      }]
    });
    setTimeout(() => noAccess.delete().catch(() => {}), 10000);
    message.delete().catch(() => {});
    return;
  }

  const roleMention = args[0];
  const amount = parseInt(args[1], 10);

  if (!roleMention || isNaN(amount) || amount <= 0) {
    const invalidUsage = await message.reply({
      embeds: [{
        color: 0xE67E22,
        title: '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ',
        description: '‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give_bonus_role @—Ä–æ–ª—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        timestamp: new Date(),
        footer: {
          text: '–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤',
          icon_url: message.guild.iconURL({ dynamic: true })
        }
      }]
    });
    setTimeout(() => invalidUsage.delete().catch(() => {}), 10000);
    message.delete().catch(() => {});
    return;
  }

  const roleIdMatch = roleMention.match(/^<@&(\d+)>$/);
  if (!roleIdMatch) {
    const invalidMention = await message.reply({
      embeds: [{
        color: 0xE67E22,
        title: '‚ö†Ô∏è –û—à–∏–±–∫–∞',
        description: '‚ùó –£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º.',
        timestamp: new Date(),
        footer: {
          text: '–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤',
          icon_url: message.guild.iconURL({ dynamic: true })
        }
      }]
    });
    setTimeout(() => invalidMention.delete().catch(() => {}), 10000);
    message.delete().catch(() => {});
    return;
  }

  const targetRoleId = roleIdMatch[1];
  const role = message.guild.roles.cache.get(targetRoleId);
  if (!role) {
    const roleNotFound = await message.reply({
      embeds: [{
        color: 0xE74C3C,
        title: '‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        description: '‚ùó –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.',
        timestamp: new Date(),
        footer: {
          text: '–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤',
          icon_url: message.guild.iconURL({ dynamic: true })
        }
      }]
    });
    setTimeout(() => roleNotFound.delete().catch(() => {}), 10000);
    message.delete().catch(() => {});
    return;
  }


  if (!global.activeBonusRoles) global.activeBonusRoles = {};

  
  if (global.activeBonusRoles[targetRoleId]) {
    clearInterval(global.activeBonusRoles[targetRoleId].intervalId);
  }


  const intervalId = setInterval(() => {
    const bonusRole = message.guild.roles.cache.get(targetRoleId);
    if (!bonusRole) {
      clearInterval(intervalId);
      delete global.activeBonusRoles[targetRoleId];
      saveBonusRoles(global.activeBonusRoles);
      return;
    }

 
    if (!data.coinsData) data.coinsData = {};

    bonusRole.members.forEach(member => {
      if (!data.coinsData[member.id]) {
        data.coinsData[member.id] = {
          coins: 0,
          promocode: null,
          usedPromocode: null,
          deposit: 0,
          depositIncome: 0,
          status: "üå± –ù–∞—á–∏–Ω–∞—é—â–∏–π"
        };
      }

      data.coinsData[member.id].coins += amount;
    });

    saveData();
  }, 3600000); // 1 —á–∞—Å

  global.activeBonusRoles[targetRoleId] = { amount, intervalId };
  saveBonusRoles(global.activeBonusRoles);

  const successEmbed = {
    color: 0x3498DB,
    title: '‚ú® –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ',
    description: `üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–∏–Ω–æ–≤ –¥–ª—è —Ä–æ–ª–∏ <@&${targetRoleId}> —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ.`,
    fields: [
      { name: 'üé≠ –†–æ–ª—å', value: `<@&${targetRoleId}>`, inline: true },
      { name: 'üí∞ –ë–æ–Ω—É—Å', value: `**${amount.toLocaleString('ru-RU')}** –∫–æ–∏–Ω–æ–≤`, inline: true },
      { name: '‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª', value: '–ö–∞–∂–¥—ã–π —á–∞—Å', inline: true }
    ],
    footer: {
      text: '–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤',
      icon_url: message.guild.iconURL({ dynamic: true })
    },
    timestamp: new Date()
  };

  await message.channel.send({ embeds: [successEmbed] });
  message.delete().catch(() => {});
}
else if (command === 'remove_bonus_role') {
  if (!message.member.roles.cache.has(MAIN_MOD_ROLE_ID)) {
    const errorEmbed = {
      color: 0xE74C3C,
      title: '‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞',
      description: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.',
      timestamp: new Date(),
      footer: {
        text: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω',
        icon_url: message.author.displayAvatarURL({ dynamic: true }),
      },
    };
    const errorMsg = await message.channel.send({ embeds: [errorEmbed] });
    setTimeout(() => errorMsg.delete().catch(() => {}), 30000);
    await message.delete().catch(() => {});
    return;
  }

  const roleMention = args[0];
  if (!roleMention) {
    const usageEmbed = {
      color: 0xE67E22,
      title: '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ',
      description: '–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞.\n–ü—Ä–∏–º–µ—Ä: `/remove_bonus_role @–†–æ–ª—å`',
      timestamp: new Date(),
      footer: {
        text: '–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤',
        icon_url: message.guild.iconURL({ dynamic: true }),
      },
    };
    const usageMsg = await message.channel.send({ embeds: [usageEmbed] });
    setTimeout(() => usageMsg.delete().catch(() => {}), 30000);
    await message.delete().catch(() => {});
    return;
  }

  const roleIdMatch = roleMention.match(/^<@&(\d+)>$/);
  if (!roleIdMatch) {
    const invalidEmbed = {
      color: 0xE67E22,
      title: '‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–æ–ª–∏',
      description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `@–†–æ–ª—å`).',
      timestamp: new Date(),
      footer: {
        text: '–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤',
        icon_url: message.guild.iconURL({ dynamic: true }),
      },
    };
    const invalidMsg = await message.channel.send({ embeds: [invalidEmbed] });
    setTimeout(() => invalidMsg.delete().catch(() => {}), 30000);
    await message.delete().catch(() => {});
    return;
  }

  const targetRoleId = roleIdMatch[1];
  const role = message.guild.roles.cache.get(targetRoleId);
  if (!role) {
    const notFoundEmbed = {
      color: 0xE74C3C,
      title: '‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
      description: '–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.',
      timestamp: new Date(),
      footer: {
        text: '–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤',
        icon_url: message.guild.iconURL({ dynamic: true }),
      },
    };
    const notFoundMsg = await message.channel.send({ embeds: [notFoundEmbed] });
    setTimeout(() => notFoundMsg.delete().catch(() => {}), 30000);
    await message.delete().catch(() => {});
    return;
  }

  if (!global.activeBonusRoles[targetRoleId]) {
    const noBonusEmbed = {
      color: 0xF1C40F,
      title: '‚ö†Ô∏è –ë–æ–Ω—É—Å –¥–ª—è —Ä–æ–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω',
      description: `–î–ª—è —Ä–æ–ª–∏ ${role} –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤.`,
      timestamp: new Date(),
      footer: {
        text: '–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤',
        icon_url: message.guild.iconURL({ dynamic: true }),
      },
    };
    const noBonusMsg = await message.channel.send({ embeds: [noBonusEmbed] });
    setTimeout(() => noBonusMsg.delete().catch(() => {}), 30000);
    await message.delete().catch(() => {});
    return;
  }


  clearInterval(global.activeBonusRoles[targetRoleId].intervalId);

  delete global.activeBonusRoles[targetRoleId];

  saveBonusRoles(global.activeBonusRoles);

  const successEmbed = {
    color: 0x2ECC71,
    title: '‚úÖ –ê–≤—Ç–æ–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
    description: `–ê–≤—Ç–æ–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è —Ä–æ–ª–∏ ${role} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.`,
    timestamp: new Date(),
    footer: {
      text: '–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤',
      icon_url: message.guild.iconURL({ dynamic: true }),
    },
  };

  const successMsg = await message.channel.send({ embeds: [successEmbed] });
  setTimeout(() => successMsg.delete().catch(() => {}), 30000);
  await message.delete().catch(() => {});
}
else if (command === 'list_bonus_roles') {
  if (!message.member.roles.cache.has(MAIN_MOD_ROLE_ID)) {
    const errorEmbed = {
      color: 0xE74C3C,
      title: 'üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω',
      description: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.',
      footer: {
        text: '–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤',
        icon_url: message.author.displayAvatarURL({ dynamic: true }),
      },
      timestamp: new Date(),
    };
    const botMsg = await message.channel.send({ embeds: [errorEmbed] });
    setTimeout(() => botMsg.delete().catch(() => {}), 5000);
    await message.delete().catch(() => {});
    return;
  }

  let bonusRolesData;
  try {
    bonusRolesData = JSON.parse(fs.readFileSync('./bonusRoles.json', 'utf-8'));
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è bonusRoles.json:', err);
    return message.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–æ–Ω—É—Å–Ω—ã—Ö —Ä–æ–ª–µ–π.');
  }

  if (!bonusRolesData || Object.keys(bonusRolesData).length === 0) {
    const noRolesEmbed = {
      color: 0xF39C12,
      title: 'üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–Ω—É—Å–Ω—ã—Ö —Ä–æ–ª–µ–π',
      description: '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç **–Ω–µ –∑–∞–ø—É—â–µ–Ω–æ** –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤.',
      footer: {
        text: '–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤',
        icon_url: message.client.user.displayAvatarURL(),
      },
      timestamp: new Date(),
    };
    await message.channel.send({ embeds: [noRolesEmbed] });
    await message.delete().catch(() => {});
    return;
  }

  const formattedBonusRoles = Object.entries(bonusRolesData).map(([roleId, info]) => {
    const role = message.guild.roles.cache.get(roleId);
    return role
      ? {
          name: role.name,
          members: role.members.size,
          amount: info.amount,
          color: role.hexColor || '#6A5ACD',
        }
      : null;
  }).filter(Boolean);

  function hexToRgba(hex, alpha = 1) {
    hex = hex.replace('#', '');
    const bigint = parseInt(hex, 16);
    const r = (bigint >> 16) & 255;
    const g = (bigint >> 8) & 255;
    const b = bigint & 255;
    return `rgba(${r}, ${g}, ${b}, ${alpha})`;
  }

  function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
    if (typeof radius === 'number') {
      radius = { tl: radius, tr: radius, br: radius, bl: radius };
    } else {
      for (let side of ['tl', 'tr', 'br', 'bl']) {
        radius[side] = radius[side] || 0;
      }
    }
    ctx.beginPath();
    ctx.moveTo(x + radius.tl, y);
    ctx.lineTo(x + width - radius.tr, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);
    ctx.lineTo(x + width, y + height - radius.br);
    ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);
    ctx.lineTo(x + radius.bl, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);
    ctx.lineTo(x, y + radius.tl);
    ctx.quadraticCurveTo(x, y, x + radius.tl, y);
    ctx.closePath();
    if (fill) ctx.fill();
    if (stroke) ctx.stroke();
  }

  const canvasWidth = 1100;
  const rowHeight = 80;
  const headerHeight = 120;
  const footerHeight = 50;
  const sidePadding = 50;
  const canvasHeight = headerHeight + formattedBonusRoles.length * rowHeight + footerHeight;

  const canvas = createCanvas(canvasWidth, canvasHeight);
  const ctx = canvas.getContext('2d');

  
  const gradient = ctx.createLinearGradient(0, 0, 0, canvasHeight);
  gradient.addColorStop(0, '#1e2125');
  gradient.addColorStop(1, '#2e3238');
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, canvasWidth, canvasHeight);


  const titleText = 'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å–Ω—ã–µ —Ä–æ–ª–∏';
  ctx.font = 'bold 36px Sans';
  const titleWidth = ctx.measureText(titleText).width;
  const grad = ctx.createLinearGradient(sidePadding, 0, sidePadding + titleWidth, 0);
  grad.addColorStop(0, '#e3c55a');
  grad.addColorStop(1, '#c2912a');
  ctx.fillStyle = grad;
  ctx.shadowColor = 'rgba(255, 200, 0, 0.4)';
  ctx.shadowBlur = 10;
  ctx.fillText(titleText, sidePadding, 50);
  ctx.shadowColor = 'transparent';


  const sepGradient = ctx.createLinearGradient(0, 70, 0, 76);
  sepGradient.addColorStop(0, '#ffd70033');
  sepGradient.addColorStop(0.5, '#ffaa0033');
  sepGradient.addColorStop(1, '#ffd70033');
  ctx.fillStyle = sepGradient;
  ctx.fillRect(sidePadding, 70, canvasWidth - sidePadding * 2, 6);


  const columns = [
    { title: '‚Ññ', x: sidePadding + 20, align: 'left' },
    { title: '–†–æ–ª—å', x: sidePadding + 100, align: 'left' },
    { title: '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤', x: canvasWidth - sidePadding - 250, align: 'right' },
    { title: '–ë–æ–Ω—É—Å', x: canvasWidth - sidePadding - 50, align: 'right' },
  ];

  ctx.font = 'bold 24px Sans';
  ctx.fillStyle = '#ffffff';
  ctx.textBaseline = 'middle';
  for (const col of columns) {
    ctx.textAlign = col.align;
    ctx.fillText(col.title, col.x, headerHeight - 20);
  }


  ctx.font = '22px Sans';
  let y = headerHeight;
  for (let i = 0; i < formattedBonusRoles.length; i++) {
    const roleInfo = formattedBonusRoles[i];
    ctx.fillStyle = hexToRgba(roleInfo.color, 0.1);
    roundRect(ctx, sidePadding - 10, y + 6, canvasWidth - sidePadding * 2 + 20, rowHeight - 12, 10, true, false);

    ctx.strokeStyle = hexToRgba(roleInfo.color, 0.3);
    ctx.lineWidth = 2;
    roundRect(ctx, sidePadding - 10, y + 6, canvasWidth - sidePadding * 2 + 20, rowHeight - 12, 10, false, true);

    ctx.textBaseline = 'middle';

    ctx.fillStyle = '#eee';
    ctx.textAlign = 'left';
    ctx.fillText(`${i + 1}`, sidePadding + 20, y + rowHeight / 2);

    ctx.fillText(roleInfo.name.length > 30 ? roleInfo.name.slice(0, 30) + '‚Ä¶' : roleInfo.name, sidePadding + 100, y + rowHeight / 2);

    ctx.textAlign = 'right';
    ctx.fillStyle = '#eee';
    ctx.fillText(roleInfo.members.toString(), canvasWidth - sidePadding - 250, y + rowHeight / 2);

    ctx.fillStyle = '#ffffff'; // Bonus column white color
    ctx.fillText('+' + roleInfo.amount.toLocaleString('ru-RU'), canvasWidth - sidePadding - 50, y + rowHeight / 2);

    y += rowHeight;
  }

  ctx.fillStyle = '#888';
  ctx.font = '16px Sans';
  ctx.textAlign = 'left';
  const formattedTime = moment().format('HH:mm');
  ctx.fillText(`–í—Å–µ–≥–æ —Ä–æ–ª–µ–π: ${formattedBonusRoles.length} | –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${formattedTime}`, sidePadding, canvasHeight - 15);

  const buffer = canvas.toBuffer();

  const row = new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId('delete_bonus_roles')
      .setLabel('–£–¥–∞–ª–∏—Ç—å')
      .setStyle(ButtonStyle.Danger)
  );

  const sentMsg = await message.channel.send({
    files: [{ attachment: buffer, name: 'bonus_roles.png' }],
    components: [row],
  });

  const collector = sentMsg.createMessageComponentCollector({ time: 60000 });
  collector.on('collect', async i => {
    if (i.customId === 'delete_bonus_roles' && i.user.id === message.author.id) {
      await sentMsg.delete().catch(() => {});
      collector.stop();
    } else {
      await i.reply({ content: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.', ephemeral: true });
    }
  });

  collector.on('end', () => {
    if (sentMsg) {
      sentMsg.edit({ components: [] }).catch(() => {});
    }
  });

  await message.delete().catch(() => {});
}
if (command === 'togglecoins') {
  const formattedTime = new Date().toLocaleTimeString('ru-RU', {
    hour: '2-digit',
    minute: '2-digit'
  });

  if (!message.member.roles.cache.has(MAIN_MOD_ROLE_ID)) {
    const embed = new EmbedBuilder()
      .setColor('Red')
      .setDescription('üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
      .setFooter({ text: `–°–∏—Å—Ç–µ–º–∞ –∫–æ–∏–Ω–æ–≤ ‚Ä¢ –°–µ–≥–æ–¥–Ω—è, –≤ ${formattedTime}` });

    return message.channel.send({ embeds: [embed] })
      .then(msg => setTimeout(() => msg.delete().catch(() => {}), 10000));
  }

  message.delete().catch(() => {});

  if (args.length === 0) {
    const embed = new EmbedBuilder()
      .setColor('Orange')
      .setTitle('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.')
      .setDescription('‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/togglecoins #–∫–∞–Ω–∞–ª`')
      .setFooter({ text: `–°–∏—Å—Ç–µ–º–∞ –∫–æ–∏–Ω–æ–≤ ‚Ä¢ –°–µ–≥–æ–¥–Ω—è, –≤ ${formattedTime}` });

    return message.channel.send({ embeds: [embed] })
      .then(msg => setTimeout(() => msg.delete().catch(() => {}), 10000));
  }

  const targetChannel = message.mentions.channels.first() || message.guild.channels.cache.get(args[0]);

  if (!targetChannel) {
    const embed = new EmbedBuilder()
      .setColor('Red')
      .setTitle('‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
      .setDescription('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.\n‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/togglecoins #–∫–∞–Ω–∞–ª`'
      )
      .setFooter({ text: `–°–∏—Å—Ç–µ–º–∞ –∫–æ–∏–Ω–æ–≤ ‚Ä¢ –°–µ–≥–æ–¥–Ω—è, –≤ ${formattedTime}` });

    return message.channel.send({ embeds: [embed] })
      .then(msg => setTimeout(() => msg.delete().catch(() => {}), 10000));
  }

  const channelId = targetChannel.id;
  const index = data.disabledChannels.indexOf(channelId);

  if (index !== -1) {
    data.disabledChannels.splice(index, 1);
    saveData();

    const embed = new EmbedBuilder()
      .setColor('Green')
      .setTitle('‚úÖ –ö–æ–∏–Ω-—Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞')
      .setDescription(`–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–∏–Ω–æ–≤ **–≤–∫–ª—é—á–µ–Ω–æ** –≤ –∫–∞–Ω–∞–ª–µ ${targetChannel}.`)
      .setFooter({ text: `–°–∏—Å—Ç–µ–º–∞ –∫–æ–∏–Ω–æ–≤ ‚Ä¢ –°–µ–≥–æ–¥–Ω—è, –≤ ${formattedTime}` });

    return message.channel.send({ embeds: [embed] })
      .then(msg => setTimeout(() => msg.delete().catch(() => {}), 10000));
  } else {
    data.disabledChannels.push(channelId);
    saveData();

    const embed = new EmbedBuilder()
      .setColor('Yellow')
      .setTitle('‚õî –ö–æ–∏–Ω-—Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞')
      .setDescription(`–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–∏–Ω–æ–≤ **–æ—Ç–∫–ª—é—á–µ–Ω–æ** –≤ –∫–∞–Ω–∞–ª–µ ${targetChannel}.`)
      .setFooter({ text: `–°–∏—Å—Ç–µ–º–∞ –∫–æ–∏–Ω–æ–≤ ‚Ä¢ –°–µ–≥–æ–¥–Ω—è, –≤ ${formattedTime}` });

    return message.channel.send({ embeds: [embed] })
      .then(msg => setTimeout(() => msg.delete().catch(() => {}), 10000));
  }
}
else if (command === 'listdisabledchannels') {
  if (!message.member.roles.cache.has(MAIN_MOD_ROLE_ID)) {
    const errorEmbed = new EmbedBuilder()
      .setTitle('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
      .setDescription('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
      .setColor('Red');
    return message.channel.send({ embeds: [errorEmbed] });
  }

  if (!data.disabledChannels || data.disabledChannels.length === 0) {
    const embed = new EmbedBuilder()
      .setTitle('‚úÖ –í—Å–µ –∫–∞–Ω–∞–ª—ã –∞–∫—Ç–∏–≤–Ω—ã')
      .setDescription('–ö–æ–∏–Ω—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –≤–æ **–≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö** —Å–µ—Ä–≤–µ—Ä–∞.')
      .setColor('Green')
      .setTimestamp();
    await message.channel.send({ embeds: [embed] });
    await message.delete().catch(() => {});
    return;
  }


  const channelsList = data.disabledChannels.map(id => {
    const channel = message.guild.channels.cache.get(id);
    return {
      id,
      name: channel?.name || '‚ùì –ù–µ –Ω–∞–π–¥–µ–Ω',
      missing: !channel
    };
  });

  channelsList.sort((a, b) => {
    if (a.missing && !b.missing) return 1;
    if (!a.missing && b.missing) return -1;
    return a.name.localeCompare(b.name);
  });


  const canvasWidth = 1100;
  const rowHeight = 60;
  const headerHeight = 120;
  const footerHeight = 50;
  const sidePadding = 50;
  const canvasHeight = headerHeight + channelsList.length * rowHeight + footerHeight;

  const canvas = createCanvas(canvasWidth, canvasHeight);
  const ctx = canvas.getContext('2d');


  const gradient = ctx.createLinearGradient(0, 0, 0, canvasHeight);
  gradient.addColorStop(0, '#1e2125');
  gradient.addColorStop(1, '#2e3238');
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, canvasWidth, canvasHeight);


  const titleText = 'üìõ –ö–∞–Ω–∞–ª—ã —Å –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ –∫–æ–∏–Ω–∞–º–∏';
  ctx.font = 'bold 36px Sans';
  const titleWidth = ctx.measureText(titleText).width;
  const grad = ctx.createLinearGradient(sidePadding, 0, sidePadding + titleWidth, 0);
  grad.addColorStop(0, '#e35c5a');
  grad.addColorStop(1, '#c22a2a');
  ctx.fillStyle = grad;
  ctx.shadowColor = 'rgba(255, 50, 50, 0.5)';
  ctx.shadowBlur = 10;
  ctx.fillText(titleText, sidePadding, 50);
  ctx.shadowColor = 'transparent';


  const sepGradient = ctx.createLinearGradient(0, 70, 0, 76);
  sepGradient.addColorStop(0, '#ff5a5a33');
  sepGradient.addColorStop(0.5, '#cc2a2a33');
  sepGradient.addColorStop(1, '#ff5a5a33');
  ctx.fillStyle = sepGradient;
  ctx.fillRect(sidePadding, 70, canvasWidth - sidePadding * 2, 6);


  const columns = [
    { title: '‚Ññ', x: sidePadding + 20, align: 'left' },
    { title: 'ID –∫–∞–Ω–∞–ª–∞', x: sidePadding + 80, align: 'left' },
    { title: '–ù–∞–∑–≤–∞–Ω–∏–µ', x: canvasWidth - sidePadding - 350, align: 'left' },
  ];

  ctx.font = 'bold 24px Sans';
  ctx.fillStyle = '#ddd';
  ctx.textBaseline = 'middle';

  for (const col of columns) {
    ctx.textAlign = col.align;
    ctx.fillText(col.title, col.x, headerHeight - 20);
  }


  ctx.font = '22px Sans';
  let y = headerHeight;
  for (let i = 0; i < channelsList.length; i++) {
    const ch = channelsList[i];


    ctx.fillStyle = i % 2 === 0 ? 'rgba(255, 90, 90, 0.1)' : 'rgba(200, 40, 40, 0.1)';
    ctx.fillRect(sidePadding - 10, y + 6, canvasWidth - sidePadding * 2 + 20, rowHeight - 12);


    ctx.strokeStyle = 'rgba(255, 90, 90, 0.3)';
    ctx.lineWidth = 2;
    roundRect(ctx, sidePadding - 10, y + 6, canvasWidth - sidePadding * 2 + 20, rowHeight - 12, 10, false, true);

    ctx.textBaseline = 'middle';

    ctx.fillStyle = '#eee';
    ctx.textAlign = 'left';
    ctx.fillText(`${i + 1}`, sidePadding + 20, y + rowHeight / 2);

    ctx.fillText(ch.id, sidePadding + 80, y + rowHeight / 2);

    ctx.fillText(ch.name.length > 35 ? ch.name.slice(0, 35) + '‚Ä¶' : ch.name, canvasWidth - sidePadding - 350, y + rowHeight / 2);

    y += rowHeight;
  }


  ctx.fillStyle = '#888';
  ctx.font = '16px Sans';
  ctx.textAlign = 'left';
  const formattedTime = moment().format('HH:mm');
  ctx.fillText(`–í—Å–µ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ: ${channelsList.length} | –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${formattedTime}`, sidePadding, canvasHeight - 15);


  const buffer = canvas.toBuffer();
  const row = new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId('delete_disabled_channels_list')
      .setLabel('–£–¥–∞–ª–∏—Ç—å')
      .setStyle(ButtonStyle.Danger)
  );

  const sentMsg = await message.channel.send({
    files: [{ attachment: buffer, name: 'disabled_channels.png' }],
    components: [row],
  });


  const collector = sentMsg.createMessageComponentCollector({ time: 60000 });
  collector.on('collect', async i => {
    if (i.customId === 'delete_disabled_channels_list' && i.user.id === message.author.id) {
      await sentMsg.delete().catch(() => {});
      collector.stop();
    } else {
      await i.reply({ content: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.', ephemeral: true });
    }
  });

  collector.on('end', () => {
    if (sentMsg) {
      sentMsg.edit({ components: [] }).catch(() => {});
    }
  });

  await message.delete().catch(() => {});
}
function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
  if (typeof radius === 'number') {
    radius = { tl: radius, tr: radius, br: radius, bl: radius };
  } else {
    for (let side of ['tl', 'tr', 'br', 'bl']) {
      radius[side] = radius[side] || 0;
    }
  }
  ctx.beginPath();
  ctx.moveTo(x + radius.tl, y);
  ctx.lineTo(x + width - radius.tr, y);
  ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);
  ctx.lineTo(x + width, y + height - radius.br);
  ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);
  ctx.lineTo(x + radius.bl, y + height);
  ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);
  ctx.lineTo(x, y + radius.tl);
  ctx.quadraticCurveTo(x, y, x + radius.tl, y);
  ctx.closePath();
  if (fill) ctx.fill();
  if (stroke) ctx.stroke();
}
if (command === 'startlottery') {
  if (message.channel.id !== COINS_CHANNEL_ID) {
    message.delete().catch(() => {});
    return;
  }

  if (!message.member.roles.cache.has(ADMIN_ROLE_ID)) {
    message.reply('–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ª–æ—Ç–µ—Ä–µ–∏.').then(msg => {
      setTimeout(() => msg.delete().catch(() => {}), 10000);
    });
    message.delete().catch(() => {});
    return;
  }

  if (lotteryMessage) {
    message.reply('‚ùó –õ–æ—Ç–µ—Ä–µ—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!').then(msg => {
      setTimeout(() => msg.delete().catch(() => {}), 10000);
    });
    message.delete().catch(() => {});
    return;
  }

  let lotteryWinCount = 0;

  const createBaseEmbed = () => {
    return new EmbedBuilder()
      .setTitle('üéüÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–æ—Ç–µ—Ä–µ—é –°–æ–ª–Ω–µ—á–Ω–æ–≥–æ –ì–æ—Ä–æ–¥–∞! üéüÔ∏è')
      .setColor('#FFD700')
      .setDescription(
  `üåü –≠—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —à–∞–Ω—Å –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É –∏ —Å—Ç–∞—Ç—å –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–º –æ–≥—Ä–æ–º–Ω–æ–≥–æ –ø—Ä–∏–∑–∞! –ö–∞–∂–¥—ã–π –∂–µ–ª–∞—é—â–∏–π –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ ‚Äî –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ, —ç—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤—Å–µ–≥–æ –ª–∏—à—å ${LOTTERY_ENTRY_COST} –∫–æ–∏–Ω–æ–≤.\n\n` +
  `üéâ –õ–æ—Ç–µ—Ä–µ—è —Å—Ç–∞—Ä—Ç—É–µ—Ç —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –ø—Ä–∏–∑–æ–º –≤ ${INITIAL_PRIZE} –∫–æ–∏–Ω–æ–≤, –∏ —Å –∫–∞–∂–¥—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ—Ç —Ñ–æ–Ω–¥ —Ç–æ–ª—å–∫–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è.\n\n` +
  `üîî –õ–æ—Ç–µ—Ä–µ—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ ‚Äî –∫–∞–∂–¥—ã–µ **24 —á–∞—Å–∞** –º—ã –≤—ã–±–∏—Ä–∞–µ–º —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —É–Ω–æ—Å–∏—Ç –≤–µ—Å—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –ø—Ä–∏–∑! –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Å –∫–∞–∂–¥—ã–º –Ω–æ–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–∏–∑ —Ä–∞—Å—Ç—ë—Ç –≤—Å—ë –±–æ–ª—å—à–µ –∏ –±–æ–ª—å—à–µ.\n\n` +
  `üéüÔ∏è –î–ª—è —É—á–∞—Å—Ç–∏—è –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é üéüÔ∏è –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—à–µ—Ç—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞, –∏ –≤—ã –ø–æ–ø–∞–¥—ë—Ç–µ –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n\n` +
  `‚ö†Ô∏è –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ —Ä–∞–∑ ‚Äî –∫–∞–∂–¥–∞—è —Å—Ç–∞–≤–∫–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à!\n\n` +
  `üî• –ò—Å–ø—ã—Ç–∞–π—Ç–µ —Å—É–¥—å–±—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ —Å—Ç–∞–Ω—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º! üçÄ\n\n` +
  `üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ–π—á–∞—Å: 0**\n` +
  `üèÜ **–¢–µ–∫—É—â–∏–π –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: ${INITIAL_PRIZE} –∫–æ–∏–Ω–æ–≤**`
      )
      .setFooter({ text: '–õ–æ—Ç–µ—Ä–µ—è —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7. –£–¥–∞—á–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º!' })
      .setTimestamp();
  };

  lotteryMessage = await message.channel.send({ embeds: [createBaseEmbed()] });
  await lotteryMessage.react('üéüÔ∏è');
  lotteryParticipants.clear();
  message.delete().catch(() => {});

  const filter = (reaction, user) => reaction.emoji.name === 'üéüÔ∏è' && !user.bot;
  const collector = lotteryMessage.createReactionCollector({ filter });

  collector.on('collect', async (reaction, user) => {
    if (lotteryParticipants.has(user.id)) {
      try { await reaction.users.remove(user.id); } catch {}
      return;
    }

    if (!data.coinsData[user.id]) {
      data.coinsData[user.id] = { coins: 0, promocode: null, usedPromocode: null };
    }

    if (data.coinsData[user.id].coins < LOTTERY_ENTRY_COST) {
      try {
        await reaction.users.remove(user.id);
        const coinsChannel = await client.channels.fetch(COINS_CHANNEL_ID);
        coinsChannel.send(`<@${user.id}>, —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ª–æ—Ç–µ—Ä–µ–µ (${LOTTERY_ENTRY_COST}).`)
          .then(msg => setTimeout(() => msg.delete().catch(() => {}), 10000));
      } catch {}
      return;
    }

    data.coinsData[user.id].coins -= LOTTERY_ENTRY_COST;
    saveData();
    lotteryParticipants.add(user.id);

    const currentPrize = INITIAL_PRIZE + lotteryParticipants.size * LOTTERY_ENTRY_COST;
    const oldEmbed = lotteryMessage.embeds[0];
    const embed = EmbedBuilder.from(oldEmbed);
    const lines = oldEmbed.description.split('\n');

    for (let i = 0; i < lines.length; i++) {
      if (lines[i].startsWith('üë•')) lines[i] = `üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ–π—á–∞—Å: ${lotteryParticipants.size}**`;
      if (lines[i].startsWith('üèÜ')) lines[i] = `üèÜ **–¢–µ–∫—É—â–∏–π –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: ${currentPrize} –∫–æ–∏–Ω–æ–≤**`;
    }

    embed.setDescription(lines.join('\n'));
    await lotteryMessage.edit({ embeds: [embed] });
  });

  lotteryInterval = setInterval(async () => {
    try {
      const currentPrize = INITIAL_PRIZE + lotteryParticipants.size * LOTTERY_ENTRY_COST;
      const oldEmbed = lotteryMessage.embeds[0];
      const embed = EmbedBuilder.from(oldEmbed);
      const lines = oldEmbed.description.split('\n');

      lines.forEach((line, i) => {
        if (line.startsWith('üë•')) lines[i] = `üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ–π—á–∞—Å: ${lotteryParticipants.size}**`;
        if (line.startsWith('üèÜ')) lines[i] = `üèÜ **–¢–µ–∫—É—â–∏–π –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: ${currentPrize} –∫–æ–∏–Ω–æ–≤**`;
      });

      embed.setDescription(lines.join('\n'));

      if (lotteryParticipants.size === 0) {
        embed.setFields([]);
        await lotteryMessage.edit({ embeds: [embed] });
        return;
      }

      const winnerArray = Array.from(lotteryParticipants);
      const winnerId = winnerArray[Math.floor(Math.random() * winnerArray.length)];
      const winnerUser = await client.users.fetch(winnerId);

      if (!data.coinsData[winnerId]) {
        data.coinsData[winnerId] = { coins: 0, promocode: null, usedPromocode: null };
      }

      data.coinsData[winnerId].coins += currentPrize;
      saveData();
      lotteryWinCount++;

      embed.setFields([{
        name: 'üéä –£ –Ω–∞—Å –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å!',
        value:
          `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è ‚Äî <@${winnerId}>!\n` +
          `üí∞ –û–Ω –ø–æ–ª—É—á–∞–µ—Ç **${currentPrize} –∫–æ–∏–Ω–æ–≤**!\n\n` +
          `üî¢ **–≠—Ç–æ –±—ã–ª —Ä–æ–∑—ã–≥—Ä—ã—à ‚Ññ${lotteryWinCount} —ç—Ç–æ–π –±–µ–∑—É–º–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏!**\n` +
          `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –°–ª–µ–¥—É—é—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à —É–∂–µ —Å–∫–æ—Ä–æ!**`,
        inline: false,
      }]);

      await lotteryMessage.edit({ embeds: [embed] });
      await lotteryMessage.reactions.removeAll();
      await lotteryMessage.react('üéüÔ∏è');
      lotteryParticipants.clear();

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤ –ª–æ—Ç–µ—Ä–µ–µ:', err);
    }
  }, 86_400_000); // –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
}

// ===============================
// üí∞ –ë–õ–û–ö 5: –°–ï–ú–ï–ô–ù–´–ï –ö–û–ú–ê–ù–î–´
// ===============================
else if (command === 'create_fam') {
  if (!message.member.roles.cache.has(CUR_MOD_ROLE_ID)) {
    return sendError(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–º—ã.');
  }

  await message.delete().catch(() => {});

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞
  async function ask(prompt) {
    const promptMsg = await message.channel.send({
      embeds: [createEmbed({ title: 'üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º—å–∏', description: prompt })]
    });

    try {
      const collected = await message.channel.awaitMessages({
        filter: m => m.author.id === message.author.id,
        max: 1,
        time: 60000,
        errors: ['time']
      });

      const reply = collected.first();
      await reply.delete().catch(() => {});
      await promptMsg.delete().catch(() => {});
      return reply.content.trim();
    } catch {
      await promptMsg.delete().catch(() => {});
      const timeoutMsg = await message.channel.send({
        embeds: [createEmbed({ title: '‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ', description: '–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º—å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.', color: '#FF5555' })]
      });
      setTimeout(() => timeoutMsg.delete().catch(() => {}), 5000);
      throw new Error('–û—Ç–º–µ–Ω–∞');
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞)
  async function askButton(prompt, buttons) {
    const row = new ActionRowBuilder().addComponents(
      buttons.map(b => {
        const button = new ButtonBuilder()
          .setCustomId(b.id)
          .setLabel(b.label)
          .setStyle(b.style);
        if (b.emoji) button.setEmoji(b.emoji);
        return button;
      })
    );

    const msg = await message.channel.send({
      embeds: [createEmbed({ title: 'üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º—å–∏', description: prompt })],
      components: [row]
    });

    try {
      const interaction = await msg.awaitMessageComponent({
        filter: i => i.user.id === message.author.id,
        time: 60000
      });

      await interaction.deferUpdate();
      await msg.delete().catch(() => {});
      return interaction.customId;
    } catch {
      await msg.delete().catch(() => {});
      const timeoutMsg = await message.channel.send({
        embeds: [createEmbed({ title: '‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ', description: '–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º—å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.', color: '#FF5555' })]
      });
      setTimeout(() => timeoutMsg.delete().catch(() => {}), 5000);
      throw new Error('–û—Ç–º–µ–Ω–∞');
    }
  }

  try {
    // –ó–∞–ø—Ä–æ—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–µ–º—å–∏
    const ownerRaw = await ask('–£–ø–æ–º—è–Ω–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–µ–º—å–∏:');
    const ownerId = (ownerRaw.match(/^<@!?(\d+)>$/) || [])[1];
    if (!ownerId) return sendError(message, '–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.');
    const ownerMember = await message.guild.members.fetch(ownerId).catch(() => null);
    if (!ownerMember) return sendError(message, '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–µ–º—å–∏
    const existingFam = Object.values(data.families || {}).find(f => f.ownerId === ownerId);
    if (existingFam) return sendError(message, '–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Å–µ–º—å—è.');

    // –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–º—å–∏
    const familyName = await ask('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏ (–¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤):');
    if (familyName.length > 30) return sendError(message, '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.');

    // –ó–∞–ø—Ä–æ—Å —Ü–≤–µ—Ç–∞ –≤ HEX
    let color = await ask('–í–≤–µ–¥–∏ —Ü–≤–µ—Ç —Å–µ–º—å–∏ –≤ HEX (–Ω–∞–ø—Ä–∏–º–µ—Ä: `#3498db`):');
    color = color.trim().toLowerCase();
    if (!/^#?[0-9a-f]{6}$/.test(color)) return sendError(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HEX –±–µ–∑ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: #3498db');
    if (!color.startsWith('#')) color = `#${color}`;

    // –î–æ–±–∞–≤–∏—Ç—å —Å–º–∞–π–ª—ã? (–∫–Ω–æ–ø–∫–∏)
    const emojiChoice = await askButton(
      '**–î–æ–±–∞–≤–∏—Ç—å —Å–º–∞–π–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏?**',
      [
        { id: 'yes', label: '–î–∞', style: ButtonStyle.Success },
        { id: 'no', label: '–ù–µ—Ç', style: ButtonStyle.Danger }
      ]
    );

    let emojis = [];
    let roleName = `[FAM] ${familyName}`;

    if (emojiChoice === 'yes') {
      const emojisRaw = await ask('–í–≤–µ–¥–∏ —Å–º–∞–π–ª—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:');
      emojis = emojisRaw.split(/\s+/).filter(e => e);

      // –í—ã–±–æ—Ä —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–º–∞–π–ª–æ–≤ (–∫–Ω–æ–ø–∫–∏)
      const placement = await askButton(
        '**üé® –ö—É–¥–∞ –≤—Å—Ç–∞–≤–∏—Ç—å —Å–º–∞–π–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏?**',
        [
          { id: 'start', label: '–í –Ω–∞—á–∞–ª–µ', style: ButtonStyle.Primary },
          { id: 'end', label: '–í –∫–æ–Ω—Ü–µ', style: ButtonStyle.Primary },
          { id: 'both', label: '–ü–æ –±–æ–∫–∞–º', style: ButtonStyle.Primary }
        ]
      );

      if (placement === 'start') {
        roleName = `${emojis.join(' ')} [FAM] ${familyName}`;
      } else if (placement === 'end') {
        roleName = `[FAM] ${familyName} ${emojis.join(' ')}`;
      } else if (placement === 'both') {
        roleName = `${emojis.join(' ')} [FAM] ${familyName} ${emojis.join(' ')}`;
      }
    }

    // –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã
    const priceStr = await ask('–£–∫–∞–∂–∏ —Ü–µ–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏ (–≤ –∫–æ–∏–Ω–∞—Ö):');
    const price = parseInt(priceStr);
    if (isNaN(price) || price <= 0) return sendError(message, '–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ.');

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏
    const preview = `üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: \`${roleName}\`\nüîπ –¶–≤–µ—Ç: \`${color}\`\nüîπ –°–º–∞–π–ª—ã: ${emojis.length ? emojis.join(' ') : '‚Äî'}\nüîπ –¶–µ–Ω–∞: \`${price} –∫–æ–∏–Ω–æ–≤\`\nüîπ –í–ª–∞–¥–µ–ª–µ—Ü: <@${ownerId}>`;

    const confirm = await askButton(preview + '\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º—å–∏:', [
      { id: 'confirm', label: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', style: ButtonStyle.Success },
      { id: 'cancel', label: '–û—Ç–º–µ–Ω–∏—Ç—å', style: ButtonStyle.Danger }
    ]);

    if (confirm === 'cancel') throw new Error('–û—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–∏–Ω–æ–≤
    if (!data.coinsData[ownerId]) data.coinsData[ownerId] = { coins: 0 };
    if (data.coinsData[ownerId].coins < price) return sendError(message, '–£ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤.');

    data.coinsData[ownerId].coins -= price;
    saveData();

    // –°–æ–∑–¥–∞—ë–º —Ä–æ–ª—å —Å–µ–º—å–∏
    const role = await message.guild.roles.create({
      name: roleName,
      color,
      mentionable: true,
      hoist: true
    });

    // –ü–æ–∑–∏—Ü–∏—è —Ä–æ–ª–∏ –Ω–∏–∂–µ –±–∞–∑–æ–≤–æ–π —Å–µ–º—å–∏
    const referenceRole = message.guild.roles.cache.get(FAM_ROLE_ID);
    if (referenceRole) {
      await role.setPosition(referenceRole.position - 1).catch(console.error);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü—É
    await ownerMember.roles.add(role);

    // –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª —Å–µ–º—å–∏
    const centerChannel = message.guild.channels.cache.find(c => c.name === '—Å–µ–º–µ–π–Ω—ã–π-—Ü–µ–Ω—Ç—Ä');
    const position = centerChannel?.position || 0;

    const channel = await message.guild.channels.create({
      name: familyName.toLowerCase().replace(/\s+/g, '-'),
      type: 0,
      parent: FAM_CATEGORY_ID,
      position: Math.max(0, position - 1),
      permissionOverwrites: [
        { id: message.guild.id, deny: ['ViewChannel'] },
        { id: role.id, allow: ['ViewChannel'] }
      ]
    });

    // –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 30 –¥–Ω–µ–π
    const expiresAt = Date.now() + 30 * 24 * 60 * 60 * 1000;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–º—å—é –≤ data
    if (!data.families) data.families = {};
    data.families[role.id] = {
      ownerId,
      name: familyName,
      emojis,
      color,
      price,
      channelId: channel.id,
      expiresAt,
      warned: false
    };
    saveData();

    // –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞ '–æ–±—â–∏–π-—Å–µ–º–µ–π'
    const famRoles = Object.keys(data.families).filter(rid => message.guild.roles.cache.has(rid));
    const generalChannel = message.guild.channels.cache.find(c => c.name === '–æ–±—â–∏–π-—Å–µ–º–µ–π');

    if (famRoles.length === 1) {
      // –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å–µ–º—å—è ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—â–∏–π –∫–∞–Ω–∞–ª
      if (generalChannel) {
        await generalChannel.permissionOverwrites.edit(message.guild.id, { ViewChannel: false });
        for (const rid of famRoles) {
          await generalChannel.permissionOverwrites.edit(rid, { ViewChannel: false, SendMessages: false });
        }
      }
    } else if (famRoles.length === 2) {
      // –ü—Ä–∏ –¥–≤—É—Ö —Å–µ–º—å—è—Ö ‚Äî —Å–æ–∑–¥–∞—ë–º –æ–±—â–∏–π –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –Ω–µ—Ç) –∏ –¥–∞—ë–º –¥–æ—Å—Ç—É–ø
      if (!generalChannel) {
        const newCenter = await message.guild.channels.create({
          name: '–æ–±—â–∏–π-—Å–µ–º–µ–π',
          type: 0,
          parent: FAM_CATEGORY_ID,
          permissionOverwrites: [
            { id: message.guild.id, deny: ['ViewChannel'] },
            ...famRoles.map(rid => ({
              id: rid,
              allow: ['ViewChannel', 'SendMessages']
            }))
          ]
        });
        await newCenter.setPosition(100);
      } else {
        for (const rid of famRoles) {
          await generalChannel.permissionOverwrites.edit(rid, {
            ViewChannel: true,
            SendMessages: true
          });
        }
      }
    } else if (famRoles.length > 2) {
      // –ü—Ä–∏ —Ç—Ä—ë—Ö –∏ –±–æ–ª–µ–µ —Å–µ–º—å—è—Ö –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –≤ –æ–±—â–∏–π –∫–∞–Ω–∞–ª
      if (generalChannel) {
        for (const rid of famRoles) {
          await generalChannel.permissionOverwrites.edit(rid, {
            ViewChannel: true,
            SendMessages: true
          });
        }
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–º—å–∏
    await message.channel.send({
      embeds: [createEmbed({
        title: 'üè° –°–µ–º—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!',
        color,
        description:
          `**üìõ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏:** \`${roleName}\`\n` +
          `**üëë –í–ª–∞–¥–µ–ª–µ—Ü —Å–µ–º—å–∏:** <@${ownerId}>\n` +
          `**üìÅ –ö–∞–Ω–∞–ª —Å–µ–º—å–∏:** <#${channel.id}>\n` +
          `**üé® –¶–≤–µ—Ç —Ä–æ–ª–∏:** \`${color}\`\n` +
          `**üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ–º—å–∏:** \`${price} –∫–æ–∏–Ω–æ–≤\`\n` +
          `**‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** \`30 –¥–Ω–µ–π\`\n` +
          `**üéâ –°–º–∞–π–ª–∏–∫–∏:** ${emojis.length ? emojis.join(' ') : '‚Äî'}\n` +
          `**üëÆ‚Äç‚ôÇÔ∏è –°–æ–∑–¥–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º:** <@${message.author.id}>`
      })]
    });

  } catch (e) {
    if (e.message !== '–û—Ç–º–µ–Ω–∞') {
      console.error(e);
      await sendError(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–º—å–∏.');
    }
  }
}
else if (command === 'delete_fam') {
  if (!message.member.roles.cache.has(MAIN_MOD_ROLE_ID)) {
    return sendError(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–º–µ–π.');
  }

  await message.delete().catch(() => {});

  const roleMention = args[0];
  const reason = args.slice(1).join(' ').trim();
  const roleId = roleMention?.replace(/[<@&>]/g, '');

  if (!roleId || !reason) {
    return sendError(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/delete_fam @—Ä–æ–ª—å –ø—Ä–∏—á–∏–Ω–∞`');
  }

  const fam = data.families?.[roleId];
  if (!fam) return sendError(message, '–°–µ–º—å—è —Å —ç—Ç–æ–π —Ä–æ–ª—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');

  const confirmMsg = await message.channel.send({
    embeds: [createEmbed({
      title: '‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–º—å–∏',
      color: '#F1C40F',
      description:
        `–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ–º—å—é:\n\n` +
        `**üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ:** \`[FAM] ${fam.name}\`\n` +
        `**üëë –í–ª–∞–¥–µ–ª–µ—Ü:** <@${fam.ownerId}>\n` +
        `**üìÑ –ü—Ä–∏—á–∏–Ω–∞:** ${reason}\n\n` +
        `–ù–∞–∂–º–∏—Ç–µ ‚úÖ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ ‚ùå –¥–ª—è –æ—Ç–º–µ–Ω—ã.`
    })]
  });

  await confirmMsg.react('‚úÖ');
  await confirmMsg.react('‚ùå');

  const reaction = await confirmMsg.awaitReactions({
    filter: (r, u) => ['‚úÖ', '‚ùå'].includes(r.emoji.name) && u.id === message.author.id,
    max: 1,
    time: 30000
  });

  await confirmMsg.delete().catch(() => {});
  const choice = reaction.first().emoji.name;

  if (choice === '‚ùå') {
    return message.channel.send({
      embeds: [createEmbed({
        title: '‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
        color: '#95A5A6',
        description: '–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ–º—å–∏ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.'
      })]
    });
  }

  const role = message.guild.roles.cache.get(roleId);
  const channel = message.guild.channels.cache.get(fam.channelId);

  if (channel) await channel.delete().catch(() => {});
  if (role) await role.delete().catch(() => {});

  delete data.families[roleId];
  saveData();

await message.channel.send({
  embeds: [createEmbed({
    title: 'üóëÔ∏è –°–µ–º—å—è —É–¥–∞–ª–µ–Ω–∞',
    color: '#E74C3C',
    description:
      `**üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ:** \`[FAM] ${fam.name}\`\n` +
      `**üëë –í–ª–∞–¥–µ–ª–µ—Ü:** <@${fam.ownerId}>\n` +
      `**üëÆ‚Äç‚ôÇÔ∏è –£–¥–∞–ª–∏–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä:** <@${message.author.id}>\n` +
      `**üìÑ –ü—Ä–∏—á–∏–Ω–∞:** ${reason}\n` +
      `**üìÜ –î–∞—Ç–∞:** <t:${Math.floor(Date.now() / 1000)}:f>`
  })]
});

const owner = await client.users.fetch(fam.ownerId).catch(() => null);
if (owner) {
  owner.send({
    embeds: [createEmbed({
      title: 'üì™ –í–∞—à–∞ —Å–µ–º—å—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞',
      color: '#E74C3C',
      description:
        `–í–∞—à–∞ —Å–µ–º—å—è \`[FAM] ${fam.name}\` –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π.\n\n` +
        `**üìÑ –ü—Ä–∏—á–∏–Ω–∞:** ${reason}\n` +
        `**üëÆ‚Äç‚ôÇÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** <@${message.author.id}>\n` +
        `**üìÜ –î–∞—Ç–∞:** <t:${Math.floor(Date.now() / 1000)}:f>`
    })]
  }).catch(() => {});
}

  const remainingRoles = Object.keys(data.families || {});
  const centerChannel = message.guild.channels.cache.find(c => c.name === '—Å–µ–º–µ–π–Ω—ã–π-—Ü–µ–Ω—Ç—Ä');

  if (centerChannel) {
    if (remainingRoles.length < 2) {
      await centerChannel.permissionOverwrites.set([
        { id: message.guild.id, deny: ['ViewChannel'] }
      ]);
    } else {
      const updatedPermissions = [
        { id: message.guild.id, deny: ['ViewChannel'] },
        ...remainingRoles.map(roleId => ({
          id: roleId,
          allow: ['ViewChannel', 'SendMessages']
        }))
      ];
      await centerChannel.permissionOverwrites.set(updatedPermissions);
    }
  }
}
else if (command === 'extend_fam') {
  await message.delete().catch(() => {});

  const userId = message.author.id;

  const famEntry = Object.entries(data.families || {}).find(([, fam]) => fam.ownerId === userId);
  if (!famEntry) {
    const msg = await message.channel.send({
      embeds: [createEmbed({
        title: '‚ùå –ù–µ—Ç —Å–µ–º—å–∏',
        description: '–£ –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–π —Å–µ–º—å–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.',
        color: '#E74C3C'
      })]
    });
    return setTimeout(() => msg.delete().catch(() => {}), 7000);
  }

  const [roleId, fam] = famEntry;
  const renewCost = Math.floor(fam.price * 0.2);
  if (fam.bank === undefined) fam.bank = 0;

  const row = {
    type: 1,
    components: [
      {
        type: 2,
        style: 1,
        label: `üí≥ –°–æ —Å—á—ë—Ç–∞ (${renewCost}‚ÇΩ)`,
        custom_id: 'extend_personal'
      },
      {
        type: 2,
        style: 3,
        label: `üè¶ –ò–∑ –±–∞–Ω–∫–∞ —Å–µ–º—å–∏ (${renewCost}‚ÇΩ)`,
        custom_id: 'extend_fam_bank'
      },
      {
        type: 2,
        style: 4,
        label: '‚ùå –û—Ç–º–µ–Ω–∞',
        custom_id: 'cancel_extend'
      }
    ]
  };

  const prompt = await message.channel.send({
    embeds: [createEmbed({
      title: 'üîÅ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–µ–º—å–∏',
      description: `–í—ã–±–µ—Ä–∏—Ç–µ, –æ—Ç–∫—É–¥–∞ —Å–ø–∏—Å–∞—Ç—å **${renewCost.toLocaleString('ru-RU')}** –∫–æ–∏–Ω–æ–≤ –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–µ–º—å–∏ \`[FAM] ${fam.name}\`.`,
      color: '#6A5ACD'
    })],
    components: [row]
  });

  const filter = i => i.user.id === userId && ['extend_personal', 'extend_fam_bank', 'cancel_extend'].includes(i.customId);
  const collector = prompt.createMessageComponentCollector({ filter, time: 15000, max: 1 });

  collector.on('collect', async interaction => {
    await interaction.deferUpdate();
    let success = false;

    if (interaction.customId === 'cancel_extend') {
      await prompt.edit({
        embeds: [createEmbed({ title: '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ', description: '–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', color: '#E67E22' })],
        components: []
      });
      setTimeout(() => prompt.delete().catch(() => {}), 7000);
      return;
    }

    if (interaction.customId === 'extend_personal') {
      if (!data.coinsData[userId] || data.coinsData[userId].coins < renewCost) {
        await interaction.editReply({
          embeds: [createEmbed({
            title: 'üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
            description: `–ù–∞ –≤–∞—à–µ–º —Å—á—ë—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ (**–Ω—É–∂–Ω–æ ${renewCost}**)`,
            color: '#E67E22'
          })],
          components: []
        });
        setTimeout(() => prompt.delete().catch(() => {}), 7000);
        return;
      }
      data.coinsData[userId].coins -= renewCost;
      success = true;
    }

    if (interaction.customId === 'extend_fam_bank') {
      if (fam.bank < renewCost) {
        await interaction.editReply({
          embeds: [createEmbed({
            title: 'üè¶ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤ –±–∞–Ω–∫–µ',
            description: `–í –±–∞–Ω–∫–µ —Å–µ–º—å–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (**–Ω—É–∂–Ω–æ ${renewCost}**)`,
            color: '#E67E22'
          })],
          components: []
        });
        setTimeout(() => prompt.delete().catch(() => {}), 7000);
        return;
      }
      fam.bank -= renewCost;
      success = true;
    }

    if (success) {
      fam.expiresAt += 30 * 24 * 60 * 60 * 1000;
      saveData();

      await prompt.edit({
        embeds: [createEmbed({
          title: '‚úÖ –°–µ–º—å—è –ø—Ä–æ–¥–ª–µ–Ω–∞!',
          description: `–°–µ–º—å—è \`[FAM] ${fam.name}\` –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ **30 –¥–Ω–µ–π**.\n\nüìÖ –ù–æ–≤—ã–π —Å—Ä–æ–∫: <t:${Math.floor(fam.expiresAt / 1000)}:f>`,
          color: '#2ECC71'
        })],
        components: []
      });
      setTimeout(() => prompt.delete().catch(() => {}), 7000);
    }
  });

  collector.on('end', collected => {
    if (collected.size === 0) {
      prompt.edit({
        embeds: [createEmbed({ title: '‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ', description: '–ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–µ–º—å–∏ –Ω–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ.', color: '#E67E22' })],
        components: []
      });
      setTimeout(() => prompt.delete().catch(() => {}), 7000);
    }
  });
}
else if (command === 'fam_info') {
  await message.delete().catch(() => {});

  const userId = message.author.id;
  const famEntry = Object.entries(data.families || {}).find(
    ([, fam]) => fam.ownerId === userId || (fam.members || []).includes(userId)
  );

  if (!famEntry) {
    const msg = await message.channel.send('‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π —Å–µ–º—å–µ.');
    return setTimeout(() => msg.delete().catch(() => {}), 7000);
  }

  const [roleId, fam] = famEntry;
  const guild = message.guild;
  const role = guild.roles.cache.get(roleId);

  const ownerMember = await guild.members.fetch(fam.ownerId).catch(() => null);
  const ownerName = ownerMember ? ownerMember.displayName : `<@${fam.ownerId}>`;

  const roleMention = role ? role.name : fam.name;
  const roleColorHex = role ? `#${role.color.toString(16).padStart(6, '0')}` : '#f7dc6f';
  const memberCount = role ? role.members.size : 0;

  const deputyLines = ['–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'];
  let i = 0;
  for (const deputyId of fam.deputies || []) {
    if (i >= 3) break;
    const member = await guild.members.fetch(deputyId).catch(() => null);
    if (member) {
      deputyLines[i] = member.displayName || `<@${deputyId}>`;
      i++;
    }
  }

  const formattedDate = new Date(fam.expiresAt).toLocaleString('ru-RU', {
    day: 'numeric', month: 'long', year: 'numeric',
    hour: '2-digit', minute: '2-digit'
  }).replace(' –≥.,', '').replace(' –≥.', '');

  function declOfNum(number, titles) {
    number = Math.abs(number) % 100;
    const n1 = number % 10;
    if (number > 10 && number < 20) return titles[2];
    if (n1 > 1 && n1 < 5) return titles[1];
    if (n1 === 1) return titles[0];
    return titles[2];
  }

  const canvasWidth = 1100;
  const canvasHeight = 500;
  const canvas = createCanvas(canvasWidth, canvasHeight);
  const ctx = canvas.getContext('2d');

  // –§–æ–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
  const bgGradient = ctx.createLinearGradient(0, 0, 0, canvasHeight);
  bgGradient.addColorStop(0, '#121417');
  bgGradient.addColorStop(1, '#25282f');
  ctx.fillStyle = bgGradient;
  ctx.fillRect(0, 0, canvasWidth, canvasHeight);

  // –®—É–º–æ–≤–æ–π —Å–ª–æ–π –¥–ª—è —Ç–µ–∫—Å—Ç—É—Ä—ã
  const noiseCanvas = createCanvas(canvasWidth, canvasHeight);
  const noiseCtx = noiseCanvas.getContext('2d');
  const imageData = noiseCtx.createImageData(canvasWidth, canvasHeight);
  for (let i = 0; i < imageData.data.length; i += 4) {
    const v = Math.random() * 30;
    imageData.data[i] = v;
    imageData.data[i + 1] = v;
    imageData.data[i + 2] = v;
    imageData.data[i + 3] = 15;
  }
  noiseCtx.putImageData(imageData, 0, 0);
  ctx.drawImage(noiseCanvas, 0, 0);

  const cardX = 40;
  const cardY = 40;
  const cardWidth = canvasWidth - 80;
  const cardHeight = canvasHeight - 80;
  const cardRadius = 30;

  // –¢–µ–Ω—å –∏ —Ñ–æ–Ω –∫–∞—Ä—Ç–æ—á–∫–∏
  ctx.shadowColor = 'rgba(255, 204, 53, 0.2)';
  ctx.shadowBlur = 30;
  ctx.fillStyle = '#2a2d37cc';
  ctx.roundRect(cardX, cardY, cardWidth, cardHeight, cardRadius);
  ctx.fill();

  ctx.shadowBlur = 0;


  const borderGradient = ctx.createLinearGradient(0, 0, canvasWidth, canvasHeight);
  borderGradient.addColorStop(0, roleColorHex);
  borderGradient.addColorStop(0.5, '#f7dc6f');
  borderGradient.addColorStop(1, roleColorHex);

  ctx.strokeStyle = borderGradient;
  ctx.lineWidth = 12;
  ctx.roundRect(cardX, cardY, cardWidth, cardHeight, cardRadius);
  ctx.stroke();


  const avatar = await loadImage(ownerMember
    ? ownerMember.displayAvatarURL({ extension: 'png', size: 256 })
    : message.author.displayAvatarURL({ extension: 'png', size: 256 }));

  const avatarX = 70;
  const avatarY = 180;
  const avatarSize = 180;


  ctx.shadowColor = 'rgba(247, 156, 18, 0.6)';
  ctx.shadowBlur = 20;
  ctx.roundRect(avatarX - 12, avatarY - 12, avatarSize + 24, avatarSize + 24, 24);
  ctx.fillStyle = '#191a1f';
  ctx.fill();
  ctx.shadowBlur = 0;


  const avatarBorderGrad = ctx.createLinearGradient(avatarX, avatarY, avatarX + avatarSize * 1.5, avatarY + avatarSize * 1.5);
  avatarBorderGrad.addColorStop(0, roleColorHex);
  avatarBorderGrad.addColorStop(1, '#f7dc6f');

  ctx.strokeStyle = avatarBorderGrad;
  ctx.lineWidth = 8;
  ctx.roundRect(avatarX - 12, avatarY - 12, avatarSize + 24, avatarSize + 24, 24);
  ctx.stroke();


  ctx.save();
  ctx.beginPath();
  ctx.roundRect(avatarX, avatarY, avatarSize, avatarSize, 20);
  ctx.clip();
  ctx.drawImage(avatar, avatarX, avatarY, avatarSize, avatarSize);
  ctx.restore();

 
  const bankAmount = fam.bank || 0;
  const bankCoinsWord = declOfNum(bankAmount, ['–∫–æ–∏–Ω', '–∫–æ–∏–Ω–∞', '–∫–æ–∏–Ω–æ–≤']);

  const infoX = 280;
  const infoY = 160;
  const lineHeight = 43;

  ctx.font = '600 26px Arial';

  const infoItems = [
    ['üëë –í–ª–∞–¥–µ–ª–µ—Ü', ownerName],
    ['ü•á –ü–µ—Ä–≤—ã–π –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å', deputyLines[0]],
    ['ü•à –í—Ç–æ—Ä–æ–π –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å', deputyLines[1]],
    ['ü•â –¢—Ä–µ—Ç–∏–π –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å', deputyLines[2]],
    ['üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤', memberCount.toString()],
    ['üí∞ –ë–∞–Ω–∫ —Å–µ–º—å–∏', `${bankAmount.toLocaleString('ru-RU')} ${bankCoinsWord}`],
    ['üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ', formattedDate]
  ];

  for (let i = 0; i < infoItems.length; i++) {
    const [label, value] = infoItems[i];
    const y = infoY + i * lineHeight;

 
    ctx.shadowColor = 'rgba(247, 220, 111, 0.4)';
    ctx.shadowBlur = 8;

    ctx.fillStyle = 'rgba(247, 220, 111, 0.7)';
    ctx.fillText(label + ':', infoX, y);

    ctx.shadowBlur = 0; 

    const labelWidth = ctx.measureText(label + ':').width + 20;


    ctx.shadowColor = 'rgba(255, 255, 255, 0.2)';
    ctx.shadowBlur = 6;

    const valueGradient = ctx.createLinearGradient(infoX + labelWidth, y, infoX + labelWidth + 300, y);
    valueGradient.addColorStop(0, 'rgba(201, 198, 198, 0.8)');
    valueGradient.addColorStop(1, 'rgba(255, 255, 255, 0.9)');

    ctx.fillStyle = valueGradient;

    let displayValue = value;
    const maxWidth = cardWidth - (infoX + labelWidth) - 40;
    if (ctx.measureText(displayValue).width > maxWidth) {
      while (ctx.measureText(displayValue + '‚Ä¶').width > maxWidth) {
        displayValue = displayValue.slice(0, -1);
      }
      displayValue += '‚Ä¶';
    }

    ctx.fillText(displayValue, infoX + labelWidth, y);
    ctx.shadowBlur = 0; 
  }

 
 ctx.font = 'bold 52px Arial';
ctx.textAlign = 'center';
ctx.textBaseline = 'middle';

let title = roleMention;
const maxTitleWidth = cardWidth - 100;

// –û–±—Ä–µ–∑–∫–∞, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
if (ctx.measureText(title).width > maxTitleWidth) {
  while (ctx.measureText(title + '‚Ä¶').width > maxTitleWidth) {
    title = title.slice(0, -1);
  }
  title += '‚Ä¶';
}

const titleX = cardX + cardWidth / 2;
const titleY = cardY + 55;

const titleGradient = ctx.createLinearGradient(titleX - 200, titleY, titleX + 200, titleY);
titleGradient.addColorStop(0, '#f7dc6f');
titleGradient.addColorStop(0.5, '#ffae00');
titleGradient.addColorStop(1, '#f7dc6f');

ctx.fillStyle = titleGradient;
ctx.shadowColor = 'rgba(255, 174, 0, 0.8)';
ctx.shadowBlur = 16;
ctx.fillText(title, titleX, titleY);
ctx.shadowBlur = 0;


  const buffer = canvas.toBuffer('image/png');
  const attachment = new AttachmentBuilder(buffer, { name: 'fam_info.png' });

  const infoMsg = await message.channel.send({ files: [attachment] });
  setTimeout(() => infoMsg.delete().catch(() => {}), 15000);
}
else if (command === 'fam_bank'){
  if (message.channel.id !== COINS_CHANNEL_ID) return message.delete().catch(() => {});
  if (!args[0] || isNaN(args[0])) {
    await message.delete().catch(() => {});
    return sendError(message, 'üí° –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–Ω–∫–∞ —Å–µ–º—å–∏.\n–ü—Ä–∏–º–µ—Ä: `/fam_deposit 1000`');
  }

  await message.delete().catch(() => {}); 

  const amount = parseInt(args[0]);
  if (amount <= 0) {
    return sendError(message, 'üí° –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.');
  }

  const userId = message.author.id;
  const userCoins = data.coinsData[userId]?.coins || 0;

  if (userCoins < amount) {
    return sendError(message, 'üí∏ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤.');
  }


  const userFamEntry = Object.entries(data.families || {}).find(([roleId]) => {
    const role = message.guild.roles.cache.get(roleId);
    return role?.members.has(userId);
  });

  if (!userFamEntry) {
    return sendError(message, 'üòï –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π —Å–µ–º—å–µ.');
  }

  const [famRoleId, fam] = userFamEntry;


  if (fam.bank === undefined) fam.bank = 0;


  data.coinsData[userId].coins -= amount;
  fam.bank += amount;
  saveData();


  const embed = createEmbed({
    title: 'üè¶ –ë–∞–Ω–∫ —Å–µ–º—å–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω',
    description: `‚úÖ –í—ã –≤–Ω–µ—Å–ª–∏ **${amount.toLocaleString('ru-RU')}** –∫–æ–∏–Ω–æ–≤ –≤ –±–∞–Ω–∫ —Å–µ–º—å–∏ **${fam.name}**.`,
    color: '#2ECC71',
    footerText: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç ${message.member.displayName}`
  });

  const reply = await message.channel.send({ embeds: [embed] });
  setTimeout(() => reply.delete().catch(() => {}), 10000);
}
else if (command === 'a_fam') {
  await message.delete().catch(() => {});

  const targetMention = args[0];
  const targetId = targetMention?.replace(/[<@!>]/g, '');
  const target = await message.guild.members.fetch(targetId).catch(() => null);

  if (!target) {
    const err = await message.channel.send({
      embeds: [createEmbed({
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: '–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.',
        color: '#E74C3C'
      })]
    });
    return setTimeout(() => err.delete().catch(() => {}), 7000);
  }

  const userId = message.author.id;
  const famEntry = Object.entries(data.families || {}).find(([, fam]) =>
    fam.ownerId === userId || (Array.isArray(fam.deputies) && fam.deputies.includes(userId))
  );

  if (!famEntry) {
    const warn = await message.channel.send({
      embeds: [createEmbed({
        title: '‚ùå –ù–µ—Ç —Å–µ–º—å–∏',
        description: '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º –∫–∞–∫–æ–π-–ª–∏–±–æ —Å–µ–º—å–∏.',
        color: '#E74C3C'
      })]
    });
    return setTimeout(() => warn.delete().catch(() => {}), 7000);
  }

  const [roleId, fam] = famEntry;
  const role = message.guild.roles.cache.get(roleId);

  if (!role) {
    const err = await message.channel.send({
      embeds: [createEmbed({
        title: '‚ö†Ô∏è –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        description: '–†–æ–ª—å —Å–µ–º—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.',
        color: '#F1C40F'
      })]
    });
    return setTimeout(() => err.delete().catch(() => {}), 7000);
  }

  const targetAlreadyHasFamily = Object.values(data.families || {}).some(f => {
    const famRole = message.guild.roles.cache.get(f.roleId);
    return famRole && target.roles.cache.has(famRole.id);
  });

  if (targetAlreadyHasFamily) {
    const warn = await message.channel.send({
      embeds: [createEmbed({
        title: 'üö´ –£–∂–µ –≤ —Å–µ–º—å–µ',
        description: `<@${targetId}> —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥—Ä—É–≥–æ–π —Å–µ–º—å–µ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω.`,
        color: '#E67E22'
      })]
    });
    return setTimeout(() => warn.delete().catch(() => {}), 7000);
  }

  await target.roles.add(role).catch(() => {});

  const done = await message.channel.send({
    embeds: [createEmbed({
      title: '‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–º—å—é',
      color: '#2ECC71',
      description:
        `<@${targetId}> —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–æ–∏—Ç –≤ —Å–µ–º—å–µ \`[FAM] ${fam.name}\`.\n` +
        `üë§ –î–æ–±–∞–≤–ª–µ–Ω–æ: <@${userId}>`
    })]
  });

  setTimeout(() => done.delete().catch(() => {}), 7000);
}
else if (command === 'd_fam') {
  await message.delete().catch(() => {});

  const targetMention = args[0];
  const targetId = targetMention?.replace(/[<@!>]/g, '');
  const target = await message.guild.members.fetch(targetId).catch(() => null);

  if (!target) {
    const err = await message.channel.send({
      embeds: [createEmbed({
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: '–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.',
        color: '#E74C3C'
      })]
    });
    return setTimeout(() => err.delete().catch(() => {}), 7000);
  }

  const userId = message.author.id;
  const famEntry = Object.entries(data.families || {}).find(([, fam]) =>
    fam.ownerId === userId || (Array.isArray(fam.deputies) && fam.deputies.includes(userId))
  );

  if (!famEntry) {
    const warn = await message.channel.send({
      embeds: [createEmbed({
        title: '‚ùå –ù–µ—Ç —Å–µ–º—å–∏',
        description: '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º –∫–∞–∫–æ–π-–ª–∏–±–æ —Å–µ–º—å–∏.',
        color: '#E74C3C'
      })]
    });
    return setTimeout(() => warn.delete().catch(() => {}), 7000);
  }

  const [roleId, fam] = famEntry;
  const role = message.guild.roles.cache.get(roleId);

  if (!role || !target.roles.cache.has(roleId)) {
    const warn = await message.channel.send({
      embeds: [createEmbed({
        title: '‚ÑπÔ∏è –ù–µ –≤ —Å–µ–º—å–µ',
        description: `<@${targetId}> –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–π —Å–µ–º—å–µ.`,
        color: '#F39C12'
      })]
    });
    return setTimeout(() => warn.delete().catch(() => {}), 7000);
  }

  await target.roles.remove(role).catch(() => {});

  const msg = await message.channel.send({
    embeds: [createEmbed({
      title: 'üö´ –£—á–∞—Å—Ç–Ω–∏–∫ –∏—Å–∫–ª—é—á—ë–Ω',
      color: '#E74C3C',
      description:
        `<@${targetId}> –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ —Å–µ–º—å–∏ \`[FAM] ${fam.name}\`.\n` +
        `üë§ –ò—Å–∫–ª—é—á–∏–ª: <@${userId}>`
    })]
  });

  setTimeout(() => msg.delete().catch(() => {}), 7000);
}
else if (command === 'a_zam') {
  await message.delete().catch(() => {});

  const mention = args[0];
  const positionStr = args[1];

  const targetId = mention?.replace(/[<@!>]/g, '');
  const target = await message.guild.members.fetch(targetId).catch(() => null);
  const pos = parseInt(positionStr);

  if (!target || ![1, 2, 3].includes(pos)) {
    const err = await message.channel.send({
      embeds: [createEmbed({
        title: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥',
        description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `!a_zam @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1/2/3`',
        color: '#E74C3C'
      })]
    });
    return setTimeout(() => err.delete().catch(() => {}), 7000);
  }

  const userId = message.author.id;
  const famEntry = Object.entries(data.families || {}).find(([, fam]) => fam.ownerId === userId);
  if (!famEntry) {
    const warn = await message.channel.send({
      embeds: [createEmbed({
        title: '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
        description: '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–µ–º—å–∏.',
        color: '#E74C3C'
      })]
    });
    return setTimeout(() => warn.delete().catch(() => {}), 7000);
  }

  const [roleId, fam] = famEntry;

  if (!target.roles.cache.has(roleId)) {
    const err = await message.channel.send({
      embeds: [createEmbed({
        title: '‚ö†Ô∏è –û—à–∏–±–∫–∞',
        description: '–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤–∞—à–µ–π —Å–µ–º—å–∏.',
        color: '#F39C12'
      })]
    });
    return setTimeout(() => err.delete().catch(() => {}), 7000);
  }

  if (!fam.deputies) fam.deputies = [];

  const currentDeputy = fam.deputies[pos - 1];
  let action = '';

  if (currentDeputy === targetId) {
    fam.deputies[pos - 1] = null; // —Å–Ω—è—Ç—å
    action = `üîª –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å #${pos} —Å–Ω—è—Ç: <@${targetId}>`;
  } else {
    fam.deputies[pos - 1] = targetId; // –Ω–∞–∑–Ω–∞—á–∏—Ç—å
    action = `‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å #${pos}: <@${targetId}>`;
  }

  fam.deputies = fam.deputies.map(d => d || null);
  saveData();

  const result = await message.channel.send({
    embeds: [createEmbed({
      title: 'üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è–º–∏',
      description: action,
      color: '#3498DB'
    })]
  });

  setTimeout(() => result.delete().catch(() => {}), 7000);
}
else if (command === 'd_zam') {
  await message.delete().catch(() => {});

  const mention = args[0];
  const targetId = mention?.replace(/[<@!>]/g, '');
  if (!targetId) {
    const err = await message.channel.send({
      embeds: [createEmbed({
        title: '‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/remove_deputy @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`',
        color: '#E74C3C'
      })]
    });
    return setTimeout(() => err.delete().catch(() => {}), 7000);
  }

  const userId = message.author.id;
  const famEntry = Object.entries(data.families || {}).find(([, fam]) => fam.ownerId === userId);
  if (!famEntry) {
    const warn = await message.channel.send({
      embeds: [createEmbed({
        title: '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω',
        description: '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —Å–µ–º—å–∏ –º–æ–∂–µ—Ç —Å–Ω–∏–º–∞—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–π.',
        color: '#E74C3C'
      })]
    });
    return setTimeout(() => warn.delete().catch(() => {}), 7000);
  }

  const [roleId, fam] = famEntry;
  if (!fam.deputies || !fam.deputies.includes(targetId)) {
    const err = await message.channel.send({
      embeds: [createEmbed({
        title: '‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º',
        description: `<@${targetId}> –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º –≤–∞—à–µ–π —Å–µ–º—å–∏.`,
        color: '#F1C40F'
      })]
    });
    return setTimeout(() => err.delete().catch(() => {}), 7000);
  }

  fam.deputies = fam.deputies.filter(id => id !== targetId);
  saveData();

  const done = await message.channel.send({
    embeds: [createEmbed({
      title: 'üîª –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å —Å–Ω—è—Ç',
      description: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@${targetId}> –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º.`,
      color: '#3498DB'
    })]
  });

  setTimeout(() => done.delete().catch(() => {}), 7000);
}
else if (command === 'transfer_fam') {
  await message.delete().catch(() => {});

  const senderId = message.author.id;
  const targetMention = args[0];
  const price = parseInt(args[1], 10);

  if (!targetMention || isNaN(price) || price <= 0) {
    return sendWarning(message, '‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!transfer_fam @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <—Ü–µ–Ω–∞>`');
  }

  const targetId = targetMention.replace(/[<@!>]/g, '');
  const target = await message.guild.members.fetch(targetId).catch(() => null);

  if (!target) return sendError(message, '‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

  if (targetId === senderId) {
    return sendError(message, '‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–µ–º—å—é —Å–∞–º–æ–º—É —Å–µ–±–µ.');
  }

  const hasOwnFam = Object.values(data.families || {}).some(f => f.ownerId === targetId);
  if (hasOwnFam) {
    return sendError(message, `‚ùå –£ <@${targetId}> —É–∂–µ –µ—Å—Ç—å —Å–≤–æ—è —Å–µ–º—å—è. –ü–µ—Ä–µ–¥–∞—á–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.`);
  }

  const famEntry = Object.entries(data.families || {}).find(([, fam]) => fam.ownerId === senderId);
  if (!famEntry) return sendError(message, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–π —Å–µ–º—å–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.');

  const [famRoleId, fam] = famEntry;

  if (!data.coinsData) data.coinsData = {};
  if (!data.coinsData[targetId]) {
    data.coinsData[targetId] = {
      coins: 0, promocode: null, usedPromocode: null,
      deposit: 0, depositIncome: 0, status: "üå± –ù–∞—á–∏–Ω–∞—é—â–∏–π"
    };
  }

  if (data.coinsData[targetId].coins < price) {
    return sendError(message, `‚ùå –£ <@${targetId}> –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤.\n–ù—É–∂–Ω–æ: **${price.toLocaleString('ru-RU')}** –∫–æ–∏–Ω–æ–≤.`);
  }

  const confirmChannel = message.guild.channels.cache.get(MOD_CONFIRM_CHANNEL_ID);
  if (!confirmChannel) return sendError(message, '‚ùå –ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.');

  const confirmEmbed = new EmbedBuilder()
    .setColor('#F1C40F')
    .setTitle('üì¶ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É —Å–µ–º—å–∏')
    .setDescription(
      `üìõ **–°–µ–º—å—è:** <@&${famRoleId}> (${fam.name})\n` +
      `üëë **–¢–µ–∫—É—â–∏–π –≤–ª–∞–¥–µ–ª–µ—Ü:** <@${senderId}>\n` +
      `‚û° **–ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü:** <@${targetId}>\n` +
      `üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** ${price.toLocaleString('ru-RU')} –∫–æ–∏–Ω–æ–≤ (—Å–Ω–∏–º–∞–µ—Ç—Å—è —Å –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞)\n\n` +
      `‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ ‚úÖ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ ‚ùå –¥–ª—è –æ—Ç–∫–∞–∑–∞.`
    )
    .setFooter({ text: `ID —Å–µ–º—å–∏: ${famRoleId}`, iconURL: message.guild.iconURL({ dynamic: true }) })
    .setTimestamp();

  const confirmMsg = await confirmChannel.send({ embeds: [confirmEmbed] });
  await confirmMsg.react('‚úÖ');
  await confirmMsg.react('‚ùå');

  const collector = confirmMsg.createReactionCollector({
    filter: (reaction, user) =>
      ['‚úÖ', '‚ùå'].includes(reaction.emoji.name) &&
      message.guild.members.cache.get(user.id)?.roles.cache.has(MOD_ROLE_ID),
    max: 1,
    time: 60000
  });

  collector.on('collect', async (reaction) => {
    if (reaction.emoji.name === '‚úÖ') {
      data.families[famRoleId].ownerId = targetId;
      data.coinsData[targetId].coins -= price;
      saveData();

      const oldOwner = await message.guild.members.fetch(senderId).catch(() => null);
      const newOwner = await message.guild.members.fetch(targetId).catch(() => null);
      const famRole = message.guild.roles.cache.get(famRoleId);

      if (famRole) {
        if (oldOwner) await oldOwner.roles.remove(famRole).catch(() => {});
        if (newOwner) await newOwner.roles.add(famRole).catch(() => {});
      }

      const successEmbed = new EmbedBuilder()
        .setColor('#2ECC71')
        .setTitle('‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ —Å–µ–º—å–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
        .setDescription(
          `üëë –°–µ–º—å—è <@&${famRoleId}> –ø–µ—Ä–µ–¥–∞–Ω–∞ –æ—Ç <@${senderId}> –∫ <@${targetId}>.\n` +
          `üí∏ –° <@${targetId}> —Å–ø–∏—Å–∞–Ω–æ **${price.toLocaleString('ru-RU')}** –∫–æ–∏–Ω–æ–≤.`
        )
        .setTimestamp()
        .setFooter({ text: '–°–µ–º–µ–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', iconURL: message.guild.iconURL({ dynamic: true }) });

      await confirmMsg.edit({ embeds: [successEmbed] });
    } else {
      const cancelEmbed = new EmbedBuilder()
        .setColor('#E74C3C')
        .setTitle('‚ùå –ü–µ—Ä–µ–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
        .setDescription('–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–µ—Ä–µ–¥–∞—á—É —Å–µ–º—å–∏.')
        .setFooter({ text: '–°–µ–º–µ–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', iconURL: message.guild.iconURL({ dynamic: true }) })
        .setTimestamp();

      await confirmMsg.edit({ embeds: [cancelEmbed] });
    }

    await confirmMsg.reactions.removeAll().catch(() => {});
  });

  collector.on('end', async (collected) => {
    if (collected.size === 0) {
      const timeoutEmbed = new EmbedBuilder()
        .setColor('#FFAA00')
        .setTitle('‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ')
        .setDescription('–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É —Å–µ–º—å–∏ –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥.')
        .setFooter({ text: '–°–µ–º–µ–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', iconURL: message.guild.iconURL({ dynamic: true }) })
        .setTimestamp();

      await confirmMsg.edit({ embeds: [timeoutEmbed] });
      await confirmMsg.reactions.removeAll().catch(() => {});
    }
  });
}
// ===============================
// üí∞ –ë–õ–û–ö 6: –ú–ò–ù–ò –ò–ì–†–´
// ===============================
if (command === 'numbers') {
  if (message.channel.id !== COINS_CHANNEL_ID) {
    await message.delete().catch(() => {});
    return;
  }

  await message.delete().catch(() => {});

  const difficultyEmbed = new EmbedBuilder()
    .setTitle('üé≤ –ú–∏–Ω–∏-–∏–≥—Ä–∞: –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏')
    .setDescription(
      '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:\n' +
      'üü¢ ‚Äî easy (1-5)\n' +
      'üü° ‚Äî medium (1-10)\n' +
      'üî¥ ‚Äî hard (1-20)'
    )
    .setColor('#6A5ACD')
    .setFooter({ text: '–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥' });

  const sentMsg = await message.channel.send({ embeds: [difficultyEmbed] });

  await sentMsg.react('üü¢');
  await sentMsg.react('üü°');
  await sentMsg.react('üî¥');

  const filter = (reaction, user) =>
    ['üü¢', 'üü°', 'üî¥'].includes(reaction.emoji.name) && user.id === message.author.id;

  try {
    const collected = await sentMsg.awaitReactions({ filter, max: 1, time: 30000, errors: ['time'] });
    const reaction = collected.first();

    const levels = {
      'üü¢': 5,
      'üü°': 10,
      'üî¥': 20,
    };

    const maxNumber = levels[reaction.emoji.name];

    const askNumberEmbed = new EmbedBuilder()
      .setTitle('üé≤ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
      .setDescription(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${maxNumber} –≤ —á–∞—Ç.`)
      .setColor('#6A5ACD')
      .setFooter({ text: '–£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–≤–æ–¥ —á–∏—Å–ª–∞.' });

    await sentMsg.edit({ embeds: [askNumberEmbed] });
    await sentMsg.reactions.removeAll().catch(() => {});

    const messageFilter = m => m.author.id === message.author.id;

    const collectedMessages = await message.channel.awaitMessages({ filter: messageFilter, max: 1, time: 30000, errors: ['time'] });
    const numberMsg = collectedMessages.first();

    await numberMsg.delete().catch(() => {});

    const guess = parseInt(numberMsg.content, 10);

    if (!Number.isInteger(guess) || guess < 1 || guess > maxNumber) {
      const errEmbed = new EmbedBuilder()
        .setTitle('‚ùå –û—à–∏–±–∫–∞')
        .setDescription(`–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º –∏ –æ—Ç 1 –¥–æ ${maxNumber}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`)
        .setColor('#FF0000');

      await message.channel.send({ embeds: [errEmbed] }).then(msg => {
        setTimeout(() => msg.delete().catch(() => {}), 10000);
      });
      await sentMsg.delete().catch(() => {});
      return;
    }

    const number = Math.floor(Math.random() * maxNumber) + 1;
    const isWin = guess === number;

    const resultEmbed = new EmbedBuilder()
      .setTitle('üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã: –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ')
      .setColor(isWin ? '#00FF00' : '#FF0000')
      .setDescription(
        `**–í—ã –≤—ã–±—Ä–∞–ª–∏ —á–∏—Å–ª–æ:** ${guess}\n` +
        `**–°–ª–æ–∂–Ω–æ—Å—Ç—å:** ${reaction.emoji.name} (–æ—Ç 1 –¥–æ ${maxNumber})\n` +
        `**–ë–æ—Ç –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ:** ${number}\n\n` +
        (isWin ? '‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ!' : '‚ùå –£–≤—ã, –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')
      )
      .setFooter({ text: '–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥' });

    await sentMsg.edit({ embeds: [resultEmbed] });

    setTimeout(() => sentMsg.delete().catch(() => {}), 30000);
  } catch {
    const timeoutEmbed = new EmbedBuilder()
      .setTitle('‚åõ –í—Ä–µ–º—è –≤—ã—à–ª–æ')
      .setDescription('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –≤–æ–≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
      .setColor('#FFA500');

    await sentMsg.edit({ embeds: [timeoutEmbed] });
    await sentMsg.reactions.removeAll().catch(() => {});
    setTimeout(() => sentMsg.delete().catch(() => {}), 30000);
  }
}
if (command === 'duel') {
  if (message.channel.id !== COINS_CHANNEL_ID) {
    return message.delete().catch(() => {});
  }

  const opponent = message.mentions.users.first();
  if (!opponent) {
    return message.reply('–£–∫–∞–∂–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ.')
      .then(msg => {
        setTimeout(() => msg.delete().catch(() => {}), 30000);
      })
      .finally(() => message.delete().catch(() => {}));
  }
  if (opponent.id === message.author.id) {
    return message.reply('–ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å –¥—É—ç–ª—å —Å–∞–º–æ–º—É —Å–µ–±–µ.')
      .then(msg => {
        setTimeout(() => msg.delete().catch(() => {}), 30000);
      })
      .finally(() => message.delete().catch(() => {}));
  }

  const bet = parseInt(args[1]);
  if (!bet || bet <= 0) {
    return message.reply('–£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É —á–∏—Å–ª–æ–º.')
      .then(msg => {
        setTimeout(() => msg.delete().catch(() => {}), 30000);
      })
      .finally(() => message.delete().catch(() => {}));
  }

  message.delete().catch(() => {});

  const inviteEmbed = new EmbedBuilder()
    .setTitle('‚öîÔ∏è –í—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å ‚öîÔ∏è')
    .setDescription(
      `${opponent}, —Ö—Ä–∞–±—Ä—ã–π –≤–æ–∏–Ω, –±—ã–ª –≤—ã–∑–≤–∞–Ω –Ω–∞ –±–æ–π –æ—Ç ${message.author}!\n` +
      `–°—Ç–∞–≤–∫–∞: **${bet}** –∫–æ–∏–Ω–æ–≤.\n\n` +
      `–ü—Ä–∏–º–∏ –≤—ã–∑–æ–≤, –Ω–∞–∂–∞–≤ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é ‚öîÔ∏è, –∏ –¥–æ–∫–∞–∂–∏ —Å–≤–æ—é –¥–æ–±–ª–µ—Å—Ç—å!`
    )
    .setColor('#4B2E05')
    .setFooter({ text: '–£ —Ç–µ–±—è –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å.', iconURL: 'https://cdn-icons-png.flaticon.com/512/854/854878.png' });

  message.channel.send({ embeds: [inviteEmbed] }).then(async duelInvite => {
    await duelInvite.react('‚öîÔ∏è');

    const filter = (reaction, user) =>
      reaction.emoji.name === '‚öîÔ∏è' && user.id === opponent.id;

    duelInvite.awaitReactions({ filter, max: 1, time: 30000, errors: ['time'] })
      .then(collected => {
        duelInvite.delete().catch(() => {});

        const players = [message.author, opponent];
        const winner = players[Math.floor(Math.random() * players.length)];
        const loser = players.find(p => p.id !== winner.id);

        const resultEmbed = new EmbedBuilder()
          .setTitle('üèÜ –ü–æ–±–µ–¥–∞ –≤ –¥—É—ç–ª–∏ üèÜ')
          .setDescription(
            `–í–µ–ª–∏–∫–∞—è –±–∏—Ç–≤–∞ –º–µ–∂–¥—É ${message.author} –∏ ${opponent} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å!\n\n` +
            `‚ú® **–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** ${winner}\n` +
            `üí∞ **–í—ã–∏–≥—Ä—ã—à:** ${bet * 2} –∫–æ–∏–Ω–æ–≤\n` +
            `‚öîÔ∏è **–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π:** ${loser}`
          )
          .setColor('#BFA34A')
          .setFooter({ text: '–ü—É—Å—Ç—å —Å–∏–ª–∞ –±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π!', iconURL: 'https://cdn-icons-png.flaticon.com/512/854/854878.png' });

        message.channel.send({ embeds: [resultEmbed] }).then(msg => {
          setTimeout(() => msg.delete().catch(() => {}), 30000);
        });

      })
      .catch(() => {
        duelInvite.delete().catch(() => {});

        const timeoutEmbed = new EmbedBuilder()
          .setTitle('‚è≥ –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞')
          .setDescription(`${opponent} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—ã–∑–æ–≤ –≤–æ–≤—Ä–µ–º—è. –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞.`)
          .setColor('#6B1B1B')
          .setFooter({ text: '–í—Ä–µ–º—è –≤—ã—à–ª–æ.', iconURL: 'https://cdn-icons-png.flaticon.com/512/3076/3076237.png' });

        message.channel.send({ embeds: [timeoutEmbed] }).then(msg => {
          setTimeout(() => msg.delete().catch(() => {}), 30000);
        });
      });
  });
}
else if (command === 'box') {
  const userId = message.author.id;

  if (message.channel.id !== COINS_CHANNEL_ID) {
    return message.delete().catch(() => {});
  }

  if (!data.coinsData[userId]) {
    data.coinsData[userId] = {
      coins: 0,
      promocode: null,
      usedPromocode: null,
      boxUsesToday: 0,
      boxLastUseDate: null,
    };
  }

  const userData = data.coinsData[userId];

  const today = new Date().toISOString().slice(0, 10);

  if (userData.boxLastUseDate !== today) {
    userData.boxUsesToday = 0;
    userData.boxLastUseDate = today;
  }

  const maxUsesPerDay = 200;
  const cost = 50;

  if (userData.boxUsesToday >= maxUsesPerDay) {
    const embedLimit = new EmbedBuilder()
      .setTitle('‚õî –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç')
      .setDescription(`–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É "–±–æ–∫—Å" **${maxUsesPerDay}** —Ä–∞–∑ —Å–µ–≥–æ–¥–Ω—è.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!`)
      .setColor('#FF4500')
      .setFooter({ text: '‚è∞ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥', iconURL: 'https://cdn-icons-png.flaticon.com/512/137/137288.png' });

    const msg = await message.channel.send({ embeds: [embedLimit] });
    setTimeout(() => msg.delete().catch(() => {}), 30000);
    return message.delete().catch(() => {});
  }

  if (userData.coins < cost) {
    const embedNoCoins = new EmbedBuilder()
      .setTitle('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤')
      .setDescription(`–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ–∫—Å–∞ –Ω—É–∂–Ω–æ **${cost}** –∫–æ–∏–Ω–æ–≤.\n–í–∞—à –±–∞–ª–∞–Ω—Å: **${userData.coins}** –∫–æ–∏–Ω–æ–≤.`)
      .setColor('#FF0000')
      .setFooter({ text: '‚è∞ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥', iconURL: 'https://cdn-icons-png.flaticon.com/512/137/137288.png' });

    const msg = await message.channel.send({ embeds: [embedNoCoins] });
    setTimeout(() => msg.delete().catch(() => {}), 30000);
    return message.delete().catch(() => {});
  }

  userData.coins -= cost;

 const chance = Math.random();
let amount = 0;

if (chance < 0.65) {
  // 65% —à–∞–Ω—Å: –æ—Ç 1 –¥–æ 35 –∫–æ–∏–Ω–æ–≤
  amount = Math.floor(Math.random() * 35) + 1;
} else {
  // 35% —à–∞–Ω—Å: –æ—Ç 36 –¥–æ 200 –∫–æ–∏–Ω–æ–≤
  amount = Math.floor(Math.random() * (200 - 36 + 1)) + 36;
}

  userData.coins += amount;
  userData.boxUsesToday += 1;

  saveData();

  const embed = new EmbedBuilder()
    .setTitle('üéÅ –ë–æ–∫—Å –æ—Ç–∫—Ä—ã—Ç!')
    .setDescription(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, <@${userId}>! –í–∞–º –≤—ã–ø–∞–ª–æ **${amount}** –∫–æ–∏–Ω–æ–≤.`)
    .setColor('#FFD700')
    .setFooter({ text: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É!', iconURL: 'https://cdn-icons-png.flaticon.com/512/137/137288.png' });

  const sentMsg = await message.channel.send({ embeds: [embed] });

  setTimeout(() => sentMsg.delete().catch(() => {}), 30000);

  await message.delete().catch(() => {});
}
if (command === 'hangman') {
  if (message.channel.id !== COINS_CHANNEL_ID) return message.delete().catch(() => {});
  await message.delete().catch(() => {});

  const entryFee = 200;
 const words = [
  // üçé –§—Ä—É–∫—Ç—ã
  { word: '–∞—Ä–±—É–∑', question: '–§—Ä—É–∫—Ç —Å –∑–µ–ª—ë–Ω–æ–π –∫–æ—Ä–∫–æ–π –∏ –∫—Ä–∞—Å–Ω–æ–π –º—è–∫–æ—Ç—å—é' },
  { word: '–±–∞–Ω–∞–Ω', question: '–ñ—ë–ª—Ç—ã–π —Ñ—Ä—É–∫—Ç, –ª—é–±–∏–º—ã–π –æ–±–µ–∑—å—è–Ω–∞–º–∏' },
  { word: '–≤–∏–Ω–æ–≥—Ä–∞–¥', question: '–Ø–≥–æ–¥—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–ª–∞—é—Ç –≤–∏–Ω–æ' },
  { word: '—è–±–ª–æ–∫–æ', question: '–ö—Ä–∞—Å–Ω—ã–π –∏–ª–∏ –∑–µ–ª—ë–Ω—ã–π —Ñ—Ä—É–∫—Ç, —á–∞—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ —Å–∫–∞–∑–∫–∞—Ö' },
  { word: '–≥—Ä—É—à–∞', question: '–§—Ä—É–∫—Ç —Å –º—è–≥–∫–æ–π –º—è–∫–æ—Ç—å—é, —á–∞—Å—Ç–æ –∑–µ–ª—ë–Ω–æ–≥–æ –∏–ª–∏ –∂—ë–ª—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞' },
  { word: '–∞–ø–µ–ª—å—Å–∏–Ω', question: '–¶–∏—Ç—Ä—É—Å–æ–≤—ã–π —Ñ—Ä—É–∫—Ç —Å –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∫–æ–∂—É—Ä–æ–π' },
  { word: '–º–∞–Ω–≥–æ', question: '–≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–π —Ñ—Ä—É–∫—Ç —Å –∂—ë–ª—Ç–æ–π –º—è–∫–æ—Ç—å—é –∏ –∫—Ä—É–ø–Ω–æ–π –∫–æ—Å—Ç–æ—á–∫–æ–π' },
  { word: '–ª–∏–º–æ–Ω', question: '–ö–∏—Å–ª—ã–π –∂—ë–ª—Ç—ã–π —Ü–∏—Ç—Ä—É—Å' },
  { word: '–∞–Ω–∞–Ω–∞—Å', question: '–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π —Ñ—Ä—É–∫—Ç —Å —à–µ—Ä—à–∞–≤–æ–π –∫–æ–∂—É—Ä–æ–π –∏ —Ö–æ—Ö–æ–ª–∫–æ–º' },

  // üçñ –ï–¥–∞
  { word: '–ø–∏—Ü—Ü–∞', question: '–ò—Ç–∞–ª—å—è–Ω—Å–∫–æ–µ –±–ª—é–¥–æ —Å —Ç–µ—Å—Ç–æ–º, —Å–æ—É—Å–æ–º –∏ —Å—ã—Ä–æ–º' },
  { word: '–±–æ—Ä—â', question: '–ö—Ä–∞—Å–Ω—ã–π —Å—É–ø –∏–∑ —Å–≤—ë–∫–ª—ã' },
  { word: '—à–∞—à–ª—ã–∫', question: '–ú—è—Å–æ –Ω–∞ —à–∞–º–ø—É—Ä–∞—Ö, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞ —É–≥–ª—è—Ö' },
  { word: '–ø–µ–ª—å–º–µ–Ω–∏', question: '–§–∞—Ä—à –≤ —Ç–µ—Å—Ç–µ, –≤–∞—Ä—è—Ç –≤ –≤–æ–¥–µ' },
  { word: '—Å—É—à–∏', question: '–Ø–ø–æ–Ω—Å–∫–æ–µ –±–ª—é–¥–æ –∏–∑ —Ä–∏—Å–∞ –∏ —Ä—ã–±—ã' },
  { word: '–∫–∞—Ä—Ç–æ—à–∫–∞', question: '–û–≤–æ—â, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–µ–ª–∞—é—Ç –ø—é—Ä–µ' },
  { word: '–∫–æ—Ç–ª–µ—Ç–∞', question: '–ñ–∞—Ä–µ–Ω–æ–µ –º—è—Å–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ –∫—Ä—É–≥–ª–æ–π —Ñ–æ—Ä–º—ã' },

  // üåç –ü—Ä–∏—Ä–æ–¥–∞
  { word: '–æ–∫–µ–∞–Ω', question: '–ë–æ–ª—å—à–æ–π –≤–æ–¥–æ—ë–º, –±–æ–ª—å—à–µ –º–æ—Ä—è' },
  { word: '–≥–æ—Ä–∞', question: '–í—ã—Å–æ–∫–∞—è –≤–æ–∑–≤—ã—à–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –∑–µ–º–ª–µ' },
  { word: '–ª–µ—Å', question: '–ú–µ—Å—Ç–æ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–µ—Ä–µ–≤—å–µ–≤' },
  { word: '–ø—É—Å—Ç—ã–Ω—è', question: '–°—É—Ö–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å —Å –ø–µ—Å–∫–∞–º–∏ –∏ –∫–∞–∫—Ç—É—Å–∞–º–∏' },
  { word: '—Ä–µ–∫–∞', question: '–í–æ–¥–Ω—ã–π –ø–æ—Ç–æ–∫, —Ç–µ–∫—É—â–∏–π –ø–æ –∑–µ–º–ª–µ' },
  { word: '–æ–∑–µ—Ä–æ', question: '–ù–µ–±–æ–ª—å—à–æ–π –≤–æ–¥–æ—ë–º —Å –ø—Ä–µ—Å–Ω–æ–π –≤–æ–¥–æ–π' },

  // üêæ –ñ–∏–≤–æ—Ç–Ω—ã–µ
  { word: '–ª–µ–≤', question: '–¶–∞—Ä—å –∑–≤–µ—Ä–µ–π' },
  { word: '–ø–∏–Ω–≥–≤–∏–Ω', question: '–ü—Ç–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —É–º–µ–µ—Ç –ª–µ—Ç–∞—Ç—å, –Ω–æ –æ—Ç–ª–∏—á–Ω–æ –ø–ª–∞–≤–∞–µ—Ç' },
  { word: '—Å–æ–±–∞–∫–∞', question: '–õ—É—á—à–∏–π –¥—Ä—É–≥ —á–µ–ª–æ–≤–µ–∫–∞' },
  { word: '–∫–æ—à–∫–∞', question: '–ñ–∏–≤–æ—Ç–Ω–æ–µ, –∫–æ—Ç–æ—Ä–æ–µ –ª—é–±–∏—Ç –º–æ–ª–æ–∫–æ –∏ –º—É—Ä–ª—ã—á–µ—Ç' },
  { word: '–∂–∏—Ä–∞—Ñ', question: '–ñ–∏–≤–æ—Ç–Ω–æ–µ —Å –¥–ª–∏–Ω–Ω–æ–π —à–µ–µ–π' },
  { word: '—Å–ª–æ–Ω', question: '–ö—Ä—É–ø–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Å —Ö–æ–±–æ—Ç–æ–º' },
  { word: '—Ç–∏–≥—Ä', question: '–ü–æ–ª–æ—Å–∞—Ç—ã–π —Ö–∏—â–Ω–∏–∫, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫ –ª—å–≤–∞' },
  { word: '–º–µ–¥–≤–µ–¥—å', question: '–ë–æ–ª—å—à–æ–π –∑–≤–µ—Ä—å, –ª—é–±—è—â–∏–π –º—ë–¥' },
  { word: '–∑–∞—è—Ü', question: '–ë—ã—Å—Ç—Ä–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ —É—à–∞–º–∏' },

  // üèôÔ∏è –ì–æ—Ä–æ–¥–∞
  { word: '–º–æ—Å–∫–≤–∞', question: '–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏' },
  { word: '–ø–∞—Ä–∏–∂', question: '–ì–æ—Ä–æ–¥ –ª—é–±–≤–∏ –∏ –≠–π—Ñ–µ–ª–µ–≤–æ–π –±–∞—à–Ω–∏' },
  { word: '–Ω—å—é–π–æ—Ä–∫', question: '–ì–æ—Ä–æ–¥ —Å –Ω–µ–±–æ—Å–∫—Ä—ë–±–∞–º–∏ –≤ –°–®–ê' },
  { word: '–ª–æ–Ω–¥–æ–Ω', question: '–ì–æ—Ä–æ–¥ —Å –ë–∏–≥-–ë–µ–Ω–æ–º' },
  { word: '—Ç–æ–∫–∏–æ', question: '–°—Ç–æ–ª–∏—Ü–∞ –Ø–ø–æ–Ω–∏–∏' },
  { word: '–±–µ—Ä–ª–∏–Ω', question: '–°—Ç–æ–ª–∏—Ü–∞ –ì–µ—Ä–º–∞–Ω–∏–∏' },
  { word: '—Ä–∏–º', question: '–ì–æ—Ä–æ–¥ –ö–æ–ª–∏–∑–µ—è' },
  { word: '–º—É–º–±–∞–∏', question: '–ö—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ –≤ –ò–Ω–¥–∏–∏' },

  // üéÆ –ò–≥—Ä—ã
  { word: '–º–∞–π–Ω–∫—Ä–∞—Ñ—Ç', question: '–ò–≥—Ä–∞ —Å –∫—É–±–∏–∫–∞–º–∏, –≥–¥–µ –º–æ–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å –º–∏—Ä—ã' },
  { word: '–¥–æ—Ç–∞', question: '–ü–æ–ø—É–ª—è—Ä–Ω–∞—è MOBA-–∏–≥—Ä–∞, —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ –æ—Ç Defense of the Ancients' },
  { word: '–∫—Å–≥–æ', question: '–®—É—Ç–µ—Ä –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –≥–¥–µ –µ—Å—Ç—å —Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç—ã –∏ —Å–ø–µ—Ü–Ω–∞–∑' },
  { word: '—Ñ–æ—Ä–Ω–∞–π—Ç', question: '–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∞—è –±–∏—Ç–≤–∞ —Å —Ç–∞–Ω—Ü–∞–º–∏ –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ–º' },
  { word: '–≥—Ç–∞', question: '–ò–≥—Ä–∞ –ø—Ä–æ –ø—Ä–µ—Å—Ç—É–ø–Ω—ã–π –º–∏—Ä, –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—ã–π –º–∏—Ä' },
  { word: '—Å—Ç–∞—Ä–∫—Ä–∞—Ñ—Ç', question: '–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤ –∫–æ—Å–º–æ—Å–µ' },
  { word: '–≤–∞—Ä–∫—Ä–∞—Ñ—Ç', question: '–§—ç–Ω—Ç–µ–∑–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Ç Blizzard' },

  // üìö –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞
  { word: '–≥–∞—Ä—Ä–∏–ø–æ—Ç—Ç–µ—Ä', question: '–ú–∞–ª—å—á–∏–∫ —Å–æ —à—Ä–∞–º–æ–º –≤ –≤–∏–¥–µ –º–æ–ª–Ω–∏–∏' },
  { word: '–≤–æ–π–Ω–∞–∏–º–∏—Ä', question: '–†–æ–º–∞–Ω –õ—å–≤–∞ –¢–æ–ª—Å—Ç–æ–≥–æ' },
  { word: '–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ–∏–Ω–∞–∫–∞–∑–∞–Ω–∏–µ', question: '–†–æ–º–∞–Ω –î–æ—Å—Ç–æ–µ–≤—Å–∫–æ–≥–æ' },
  { word: '–µ–≤–≥–µ–Ω–∏–π–æ–Ω–µ–≥–∏–Ω', question: '–†–æ–º–∞–Ω –≤ —Å—Ç–∏—Ö–∞—Ö –ü—É—à–∫–∏–Ω–∞' },
  { word: '—à–µ—Ä–ª–æ–∫—Ö–æ–ª–º—Å', question: '–ó–Ω–∞–º–µ–Ω–∏—Ç—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤ –∏–∑ –∫–Ω–∏–≥ –ö–æ–Ω–∞–Ω –î–æ–π–ª—è' },

  // üåå –ö–æ—Å–º–æ—Å
  { word: '–≥–∞–ª–∞–∫—Ç–∏–∫–∞', question: '–°–∫–æ–ø–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥' },
  { word: '–∑–≤–µ–∑–¥–∞', question: '–°–≤–µ—Ç–∏–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Å–≤–µ—Ç–∏—Ç –Ω–∞ –Ω–µ–±–µ' },
  { word: '–∫–æ–º–µ—Ç–∞', question: '–ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Ç–µ–ª–æ —Å —Ö–≤–æ—Å—Ç–æ–º' },
  { word: '–∞—Å—Ç–µ—Ä–æ–∏–¥', question: '–ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ –∫–∞–º–µ–Ω–Ω–æ–µ —Ç–µ–ª–æ' },
  { word: '–º–∞—Ä—Å', question: '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã' },
  { word: '–ø–ª—É—Ç–æ–Ω', question: '–ö–∞—Ä–ª–∏–∫–æ–≤–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã' },

  // üõ†Ô∏è –¢–µ—Ö–Ω–∏–∫–∞
  { word: '—Ç–µ–ª–µ—Ñ–æ–Ω', question: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä—ã–º –º—ã –ø–æ–ª—å–∑—É–µ–º—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å' },
  { word: '–∫–æ–º–ø—å—é—Ç–µ—Ä', question: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ –∏–≥—Ä' },
  { word: '—Ä–æ–±–æ—Ç', question: '–ú–∞—à–∏–Ω–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã —á–µ–ª–æ–≤–µ–∫–∞' },
  { word: '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä', question: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–æ–≤ –∏ –ø—Ä–æ–≥—Ä–∞–º–º' },
  { word: '–ø–ª–∞–Ω—à–µ—Ç', question: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –±–æ–ª—å—à–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–æ –º–µ–Ω—å—à–µ –Ω–æ—É—Ç–±—É–∫–∞' },

  // üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  { word: '–º–∞—à–∏–Ω–∞', question: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –Ω–∞ —á–µ—Ç—ã—Ä—ë—Ö –∫–æ–ª—ë—Å–∞—Ö' },
  { word: '–ø–æ–µ–∑–¥', question: '–î–ª–∏–Ω–Ω–æ–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –Ω–∞ —Ä–µ–ª—å—Å–∞—Ö' },
  { word: '—Å–∞–º–æ–ª—ë—Ç', question: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –ª–µ—Ç–∞–µ—Ç' },
  { word: '–∫–æ—Ä–∞–±–ª—å', question: '–°—É–¥–Ω–æ –¥–ª—è –ø–ª–∞–≤–∞–Ω–∏—è –ø–æ –≤–æ–¥–µ' },
  { word: '–º–æ—Ç–æ—Ü–∏–∫–ª', question: '–î–≤—É—Ö–∫–æ–ª—ë—Å–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å –º–æ—Ç–æ—Ä–æ–º' },

  // ‚öΩ –°–ø–æ—Ä—Ç
  { word: '—Ñ—É—Ç–±–æ–ª', question: '–ò–≥—Ä–∞ —Å –º—è—á–æ–º, –≥–¥–µ –Ω—É–∂–Ω–æ –∑–∞–±–∏—Ç—å –≥–æ–ª' },
  { word: '—Ö–æ–∫–∫–µ–π', question: '–ò–≥—Ä–∞ –Ω–∞ –ª—å–¥—É —Å —à–∞–π–±–æ–π' },
  { word: '–±–æ–∫—Å', question: '–í–∏–¥ —Å–ø–æ—Ä—Ç–∞, –≥–¥–µ –¥–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞ –¥–µ—Ä—É—Ç—Å—è –≤ –ø–µ—Ä—á–∞—Ç–∫–∞—Ö' },
  { word: '–±–∞—Å–∫–µ—Ç–±–æ–ª', question: '–ò–≥—Ä–∞, –≥–¥–µ –º—è—á –∑–∞–±—Ä–∞—Å—ã–≤–∞—é—Ç –≤ –∫–æ–ª—å—Ü–æ' },
  { word: '—à–∞—Ö–º–∞—Ç—ã', question: '–ò–≥—Ä–∞ —Å —Ñ–∏–≥—É—Ä–∞–º–∏ –Ω–∞ –∫–ª–µ—Ç—á–∞—Ç–æ–π –¥–æ—Å–∫–µ' },

  // üëî –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏
  { word: '–≤—Ä–∞—á', question: '–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –ª–µ—á–∏—Ç –ª—é–¥–µ–π' },
  { word: '—É—á–∏—Ç–µ–ª—å', question: '–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—É—á–∞–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤' },
  { word: '–ø–æ–ª–∏—Ü–µ–π—Å–∫–∏–π', question: '–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º' },
  { word: '–ø–æ–∂–∞—Ä–Ω—ã–π', question: '–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ç—É—à–∏—Ç –ø–æ–∂–∞—Ä—ã' },
  { word: '–ø–æ–≤–∞—Ä', question: '–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –≥–æ—Ç–æ–≤–∏—Ç –µ–¥—É' },
  { word: '–∏–Ω–∂–µ–Ω–µ—Ä', question: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏ —Ç–µ—Ö–Ω–∏–∫–µ' },

  // üåé –°—Ç—Ä–∞–Ω—ã
  { word: '—Ä–æ—Å—Å–∏—è', question: '–°–∞–º–∞—è –±–æ–ª—å—à–∞—è —Å—Ç—Ä–∞–Ω–∞ –≤ –º–∏—Ä–µ' },
  { word: '—Ñ—Ä–∞–Ω—Ü–∏—è', question: '–°—Ç—Ä–∞–Ω–∞ —Å –≠–π—Ñ–µ–ª–µ–≤–æ–π –±–∞—à–Ω–µ–π' },
  { word: '–≥–µ—Ä–º–∞–Ω–∏—è', question: '–°—Ç—Ä–∞–Ω–∞ —Å –≥–æ—Ä–æ–¥–æ–º –ë–µ—Ä–ª–∏–Ω' },
  { word: '—è–ø–æ–Ω–∏—è', question: '–°—Ç—Ä–∞–Ω–∞ –≤–æ—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–ª–Ω—Ü–∞' },
  { word: '–∏–Ω–¥–∏—è', question: '–°—Ç—Ä–∞–Ω–∞ —Å –¢–∞–¥–∂-–ú–∞—Ö–∞–ª–æ–º' },

  // üé¨ –ö–∏–Ω–æ
  { word: '—Ç–∏—Ç–∞–Ω–∏–∫', question: '–§–∏–ª—å–º –ø—Ä–æ –∫–æ—Ä–∞–±–ª—å –∏ –ª—é–±–æ–≤—å –î–∂—ç–∫–∞ –∏ –†–æ–∑—ã' },
  { word: '–º–∞—Ç—Ä–∏—Ü–∞', question: '–§–∏–ª—å–º –ø—Ä–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ù–µ–æ' },
  { word: '—Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä', question: '–§–∏–ª—å–º —Å –ê—Ä–Ω–æ–ª—å–¥–æ–º –®–≤–∞—Ä—Ü–µ–Ω–µ–≥–≥–µ—Ä–æ–º' },

  // üéµ –ú—É–∑—ã–∫–∞
  { word: '–≥–∏—Ç–∞—Ä–∞', question: '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å —à–µ—Å—Ç—å—é —Å—Ç—Ä—É–Ω–∞–º–∏' },
  { word: '–ø–∏–∞–Ω–∏–Ω–æ', question: '–ö–ª–∞–≤–∏—à–Ω—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç' },
  { word: '—Å–∫—Ä–∏–ø–∫–∞', question: '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å —Å–º—ã—á–∫–æ–º' },

  // üëó –û–¥–µ–∂–¥–∞
  { word: '–ø–ª–∞—Ç—å–µ', question: '–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞ –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤' },
  { word: '—Ä—É–±–∞—à–∫–∞', question: '–û–¥–µ–∂–¥–∞ —Å –≤–æ—Ä–æ—Ç–Ω–∏–∫–æ–º –∏ –ø—É–≥–æ–≤–∏—Ü–∞–º–∏' },
  { word: '–±–æ—Ç–∏–Ω–∫–∏', question: '–û–±—É–≤—å –¥–ª—è —Ö–æ–ª–æ–¥–Ω–æ–π –ø–æ–≥–æ–¥—ã' },

  // ü•§ –ù–∞–ø–∏—Ç–∫–∏
  { word: '—á–∞–π', question: '–ì–æ—Ä—è—á–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –∏–∑ –ª–∏—Å—Ç—å–µ–≤' },
  { word: '–∫–æ—Ñ–µ', question: '–ù–∞–ø–∏—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±–æ–¥—Ä–∏—Ç —É—Ç—Ä–æ–º' },
  { word: '–ª–∏–º–æ–Ω–∞–¥', question: '–û—Å–≤–µ–∂–∞—é—â–∏–π –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫' },

  // üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
  { word: '–Ω–æ–≤—ã–π–≥–æ–¥', question: '–ü—Ä–∞–∑–¥–Ω–∏–∫ —Å —ë–ª–∫–æ–π –∏ –î–µ–¥–æ–º –ú–æ—Ä–æ–∑–æ–º' },
  { word: '—Ö—ç–ª–ª–æ—É–∏–Ω', question: '–ü—Ä–∞–∑–¥–Ω–∏–∫ —Å —Ç—ã–∫–≤–∞–º–∏ –∏ –∫–æ—Å—Ç—é–º–∞–º–∏' },
  { word: '—Ä–æ–∂–¥–µ—Å—Ç–≤–æ', question: '–ü—Ä–∞–∑–¥–Ω–∏–∫ –≤ –¥–µ–∫–∞–±—Ä–µ —É —Ö—Ä–∏—Å—Ç–∏–∞–Ω' },
// üé¨ –ö–∏–Ω–æ
  { word: '—Ç–∏—Ç–∞–Ω–∏–∫', question: '–§–∏–ª—å–º –ø—Ä–æ –∫–æ—Ä–∞–±–ª—å –∏ –ª—é–±–æ–≤—å –î–∂—ç–∫–∞ –∏ –†–æ–∑—ã' },
  { word: '–º–∞—Ç—Ä–∏—Ü–∞', question: '–§–∏–ª—å–º –ø—Ä–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ù–µ–æ' },
  { word: '—Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä', question: '–§–∏–ª—å–º —Å –ê—Ä–Ω–æ–ª—å–¥–æ–º –®–≤–∞—Ä—Ü–µ–Ω–µ–≥–≥–µ—Ä–æ–º' },
  { word: '–∞–≤–∞—Ç–∞—Ä', question: '–§–∏–ª—å–º –æ –ø–ª–∞–Ω–µ—Ç–µ –ü–∞–Ω–¥–æ—Ä–∞ –∏ —Å–∏–Ω–∏—Ö –∂–∏—Ç–µ–ª—è—Ö' },
  { word: '–¥–∂–æ–∫–µ—Ä', question: '–§–∏–ª—å–º –æ –≤—Ä–∞–≥–µ –ë—ç—Ç–º–µ–Ω–∞' },
  { word: '–≤–µ–Ω–æ–º', question: '–§–∏–ª—å–º –ø—Ä–æ —Å–∏–º–±–∏–æ—Ç–∞ –∏–∑ Marvel' },

  // üéµ –ú—É–∑—ã–∫–∞
  { word: '–≥–∏—Ç–∞—Ä–∞', question: '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å —à–µ—Å—Ç—å—é —Å—Ç—Ä—É–Ω–∞–º–∏' },
  { word: '–ø–∏–∞–Ω–∏–Ω–æ', question: '–ö–ª–∞–≤–∏—à–Ω—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç' },
  { word: '—Å–∫—Ä–∏–ø–∫–∞', question: '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ —Å–º—ã—á–∫–æ–º' },
  { word: '–±–∞—Ä–∞–±–∞–Ω—ã', question: '–£–¥–∞—Ä–Ω—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç' },
  { word: '—Ç—Ä—É–±–∞', question: '–î—É—Ö–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç' },

  // üëó –û–¥–µ–∂–¥–∞
  { word: '–ø–ª–∞—Ç—å–µ', question: '–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞ –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤' },
  { word: '—Ä—É–±–∞—à–∫–∞', question: '–û–¥–µ–∂–¥–∞ —Å –≤–æ—Ä–æ—Ç–Ω–∏–∫–æ–º –∏ –ø—É–≥–æ–≤–∏—Ü–∞–º–∏' },
  { word: '–±–æ—Ç–∏–Ω–∫–∏', question: '–û–±—É–≤—å –¥–ª—è —Ö–æ–ª–æ–¥–Ω–æ–π –ø–æ–≥–æ–¥—ã' },
  { word: '—à–∞–ø–∫–∞', question: '–ì–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –¥–ª—è –∑–∏–º—ã' },
  { word: '—à–∞—Ä—Ñ', question: '–ê–∫—Å–µ—Å—Å—É–∞—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã —à–µ–∏ –æ—Ç —Ö–æ–ª–æ–¥–∞' },

  // ü•§ –ù–∞–ø–∏—Ç–∫–∏
  { word: '—á–∞–π', question: '–ì–æ—Ä—è—á–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –∏–∑ –ª–∏—Å—Ç—å–µ–≤' },
  { word: '–∫–æ—Ñ–µ', question: '–ù–∞–ø–∏—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±–æ–¥—Ä–∏—Ç —É—Ç—Ä–æ–º' },
  { word: '–ª–∏–º–æ–Ω–∞–¥', question: '–û—Å–≤–µ–∂–∞—é—â–∏–π –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫' },
  { word: '—Å–æ–∫', question: '–ù–∞–ø–∏—Ç–æ–∫ –∏–∑ —Ñ—Ä—É–∫—Ç–æ–≤' },
  { word: '–º–æ–ª–æ–∫–æ', question: '–ë–µ–ª—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –æ—Ç –∫–æ—Ä–æ–≤—ã' },

  // üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
  { word: '–Ω–æ–≤—ã–π–≥–æ–¥', question: '–ü—Ä–∞–∑–¥–Ω–∏–∫ —Å —ë–ª–∫–æ–π –∏ –î–µ–¥–æ–º –ú–æ—Ä–æ–∑–æ–º' },
  { word: '—Ö—ç–ª–ª–æ—É–∏–Ω', question: '–ü—Ä–∞–∑–¥–Ω–∏–∫ —Å —Ç—ã–∫–≤–∞–º–∏ –∏ –∫–æ—Å—Ç—é–º–∞–º–∏' },
  { word: '—Ä–æ–∂–¥–µ—Å—Ç–≤–æ', question: '–ü—Ä–∞–∑–¥–Ω–∏–∫ –≤ –¥–µ–∫–∞–±—Ä–µ —É —Ö—Ä–∏—Å—Ç–∏–∞–Ω' },
  { word: '–ø–∞—Å—Ö–∞', question: '–ü—Ä–∞–∑–¥–Ω–∏–∫ —Å –∫—Ä–∞—à–µ–Ω—ã–º–∏ —è–π—Ü–∞–º–∏' },
  { word: '–¥–µ–Ω—å—Ä–æ–∂–¥–µ–Ω–∏—è', question: '–ü—Ä–∞–∑–¥–Ω–∏–∫ –≤ —á–µ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ —Å–≤–µ—Ç' },

  // üõã –ú–µ–±–µ–ª—å
  { word: '—Å—Ç–æ–ª', question: '–ú–µ–±–µ–ª—å –¥–ª—è –µ–¥—ã –∏ —Ä–∞–±–æ—Ç—ã' },
  { word: '—Å—Ç—É–ª', question: '–ú–µ–±–µ–ª—å –¥–ª—è —Å–∏–¥–µ–Ω–∏—è' },
  { word: '—à–∫–∞—Ñ', question: '–ú–µ–±–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–¥–µ–∂–¥—ã' },
  { word: '–¥–∏–≤–∞–Ω', question: '–ú–µ–±–µ–ª—å –¥–ª—è –æ—Ç–¥—ã—Ö–∞, –º—è–≥–∫–∞—è –∏ –¥–ª–∏–Ω–Ω–∞—è' },
  { word: '–∫—Ä–æ–≤–∞—Ç—å', question: '–ú–µ–±–µ–ª—å –¥–ª—è —Å–Ω–∞' },

  // üåà –¶–≤–µ—Ç–∞
  { word: '–∫—Ä–∞—Å–Ω—ã–π', question: '–¶–≤–µ—Ç –∫—Ä–æ–≤–∏ –∏ —Å–ø–µ–ª–æ–π –∫–ª—É–±–Ω–∏–∫–∏' },
  { word: '–∑–µ–ª—ë–Ω—ã–π', question: '–¶–≤–µ—Ç —Ç—Ä–∞–≤—ã' },
  { word: '—Å–∏–Ω–∏–π', question: '–¶–≤–µ—Ç –Ω–µ–±–∞ –≤ —è—Å–Ω—É—é –ø–æ–≥–æ–¥—É' },
  { word: '–∂—ë–ª—Ç—ã–π', question: '–¶–≤–µ—Ç —Å–æ–ª–Ω—Ü–∞' },
  { word: '—á—ë—Ä–Ω—ã–π', question: '–¶–≤–µ—Ç –Ω–æ—á–∏' },

  // üöò –ê–≤—Ç–æ–º–æ–±–∏–ª–∏
  { word: '–º–µ—Ä—Å–µ–¥–µ—Å', question: '–ù–µ–º–µ—Ü–∫–∏–π –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π' },
  { word: '–±–º–≤', question: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –Ω–µ–º–µ—Ü–∫–∏–π –∞–≤—Ç–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å' },
  { word: '—Ç–æ–π–æ—Ç–∞', question: '–Ø–ø–æ–Ω—Å–∫–∏–π –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π' },
  { word: '–∞—É–¥–∏', question: '–ù–µ–º–µ—Ü–∫–∞—è –º–∞—Ä–∫–∞ –º–∞—à–∏–Ω —Å —á–µ—Ç—ã—Ä—å–º—è –∫–æ–ª—å—Ü–∞–º–∏' },
  { word: '–ª–∞–º–±–æ—Ä–≥–∏–Ω–∏', question: '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –º–∞—Ä–∫–∞ —Å—É–ø–µ—Ä–∫–∞—Ä–æ–≤' },

  // üî¨ –ù–∞—É–∫–∞
  { word: '—Ñ–∏–∑–∏–∫–∞', question: '–ù–∞—É–∫–∞ –æ –¥–≤–∏–∂–µ–Ω–∏–∏, –º–∞—Ç–µ—Ä–∏–∏ –∏ —ç–Ω–µ—Ä–≥–∏–∏' },
  { word: '—Ö–∏–º–∏—è', question: '–ù–∞—É–∫–∞ –æ –≤–µ—â–µ—Å—Ç–≤–∞—Ö –∏ —Ä–µ–∞–∫—Ü–∏—è—Ö' },
  { word: '–±–∏–æ–ª–æ–≥–∏—è', question: '–ù–∞—É–∫–∞ –æ –∂–∏–≤—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–º–∞—Ö' },
  { word: '–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è', question: '–ù–∞—É–∫–∞ –æ –∫–æ—Å–º–æ—Å–µ' },
  { word: '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', question: '–ù–∞—É–∫–∞ –æ —á–∏—Å–ª–∞—Ö –∏ —Ñ–æ—Ä–º—É–ª–∞—Ö' },

  // ‚ö° –ú–∏—Ñ–æ–ª–æ–≥–∏—è
  { word: '–∑–µ–≤—Å', question: '–ì–ª–∞–≤–Ω—ã–π –±–æ–≥ –≥—Ä–µ—á–µ—Å–∫–æ–π –º–∏—Ñ–æ–ª–æ–≥–∏–∏' },
  { word: '–∞—Ñ—Ä–æ–¥–∏—Ç–∞', question: '–ë–æ–≥–∏–Ω—è –ª—é–±–≤–∏' },
  { word: '–≥–µ—Ä–∫—É–ª–µ—Å', question: '–ì–µ—Ä–æ–π —Å –±–æ–ª—å—à–æ–π —Å–∏–ª–æ–π' },
  { word: '–ø–æ—Å–µ–π–¥–æ–Ω', question: '–ë–æ–≥ –º–æ—Ä—è' },
  { word: '–∞–¥—ã', question: '–ë–æ–≥ –ø–æ–¥–∑–µ–º–Ω–æ–≥–æ –º–∏—Ä–∞' },

  // üíª –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ IT
  { word: '–¥–∏—Å–∫–æ—Ä–¥', question: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤' },
  { word: '—é—Ç—É–±', question: '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≤–∏–¥–µ–æ' },
  { word: '–≥—É–≥–ª', question: '–ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞' },
  { word: '–∏–Ω—Å—Ç–∞–≥—Ä–∞–º', question: '–°–æ—Ü—Å–µ—Ç—å —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏' },
  { word: '—Ç–∏–∫—Ç–æ–∫', question: '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ' },
  // üß¨ –ú–µ–¥–∏—Ü–∏–Ω–∞
  { word: '—Ç–∞–±–ª–µ—Ç–∫–∞', question: '–õ–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –≤ —Ç–≤—ë—Ä–¥–æ–π —Ñ–æ—Ä–º–µ' },
  { word: '—à–ø—Ä–∏—Ü', question: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–π' },
  { word: '–º–∞—Å–∫–∞', question: '–°—Ä–µ–¥—Å—Ç–≤–æ –∑–∞—â–∏—Ç—ã –ª–∏—Ü–∞' },
  { word: '–±–∏–Ω—Ç', question: '–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø–µ—Ä–µ–≤—è–∑–æ–∫' },
  { word: '–≥—Ä–∞–¥—É—Å–Ω–∏–∫', question: '–ü—Ä–∏–±–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ç–µ–ª–∞' },

  // üõí –ë—ã—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
  { word: '–ª–æ–∂–∫–∞', question: '–°—Ç–æ–ª–æ–≤—ã–π –ø—Ä–∏–±–æ—Ä –¥–ª—è —Å—É–ø–∞' },
  { word: '–≤–∏–ª–∫–∞', question: '–°—Ç–æ–ª–æ–≤—ã–π –ø—Ä–∏–±–æ—Ä —Å –∑—É–±—Ü–∞–º–∏' },
  { word: '–Ω–æ–∂', question: '–°—Ç–æ–ª–æ–≤—ã–π –ø—Ä–∏–±–æ—Ä –¥–ª—è —Ä–µ–∑–∫–∏' },
  { word: '—Ç–∞—Ä–µ–ª–∫–∞', question: '–ü–æ—Å—É–¥–∞ –¥–ª—è –µ–¥—ã' },
  { word: '–∫—Ä—É–∂–∫–∞', question: '–ü–æ—Å—É–¥–∞ –¥–ª—è —á–∞—è –∏–ª–∏ –∫–æ—Ñ–µ' },

  // üå± –†–∞—Å—Ç–µ–Ω–∏—è
  { word: '—Ä–æ–∑–∞', question: '–¶–≤–µ—Ç–æ–∫ —Å —à–∏–ø–∞–º–∏' },
  { word: '—Ç—é–ª—å–ø–∞–Ω', question: '–í–µ—Å–µ–Ω–Ω–∏–π —Ü–≤–µ—Ç–æ–∫ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤' },
  { word: '–±–µ—Ä—ë–∑–∞', question: '–î–µ—Ä–µ–≤–æ —Å –±–µ–ª–æ–π –∫–æ—Ä–æ–π' },
  { word: '–¥—É–±', question: '–ú–æ—â–Ω–æ–µ –¥–µ—Ä–µ–≤–æ —Å –∂–µ–ª—É–¥—è–º–∏' },
  { word: '–ø–æ–¥—Å–æ–ª–Ω—É—Ö', question: '–ñ—ë–ª—Ç—ã–π —Ü–≤–µ—Ç–æ–∫ —Å —Å–µ–º–µ—á–∫–∞–º–∏' },

  // ü¶ú –ñ–∏–≤–æ—Ç–Ω—ã–µ (–µ—â—ë)
  { word: '–≤–æ—Ä–æ–±–µ–π', question: '–ú–∞–ª–µ–Ω—å–∫–∞—è –ø—Ç–∏—á–∫–∞, —á–∞—Å—Ç–æ –≤–æ–∑–ª–µ –ª—é–¥–µ–π' },
  { word: '–æ—Ä—ë–ª', question: '–•–∏—â–Ω–∞—è –ø—Ç–∏—Ü–∞ —Å –æ—Å—Ç—Ä—ã–º –∑—Ä–µ–Ω–∏–µ–º' },
  { word: '–∫–∞–±–∞–Ω', question: '–î–∏–∫–∏–π —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫ —Å–≤–∏–Ω—å–∏' },
  { word: '–ª–∏—Å–∏—Ü–∞', question: '–†—ã–∂–∏–π —Ö–∏—Ç—Ä—ã–π –∑–≤–µ—Ä—å' },
  { word: '–ø–∞–Ω—Ç–µ—Ä–∞', question: '–ß—ë—Ä–Ω—ã–π —Ö–∏—â–Ω–∏–∫ –∏–∑ –¥–∂—É–Ω–≥–ª–µ–π' },

  // üöÄ –¢–µ—Ö–Ω–∏–∫–∞ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  { word: '–º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞', question: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–æ–≥—Ä–µ–≤–∞ –µ–¥—ã' },
  { word: '—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫', question: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤' },
  { word: '–ø—ã–ª–µ—Å–æ—Å', question: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —É–±–æ—Ä–∫–∏ –ø—ã–ª–∏' },
  { word: '–ø–ª–æ–π–∫–∞', question: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∑–∞–≤–∏–≤–∫–∏ –≤–æ–ª–æ—Å' },
  { word: '–∫–∞–º–µ—Ä–æ—Ñ–æ–Ω', question: '–¢–µ–ª–µ—Ñ–æ–Ω —Å –∫–∞–º–µ—Ä–æ–π' },

  // üöñ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–¥–æ–±–∞–≤–∫–∞)
  { word: '—Ç—Ä–∞–º–≤–∞–π', question: '–ì–æ—Ä–æ–¥—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–∞ —Ä–µ–ª—å—Å–∞—Ö' },
  { word: '–º–µ—Ç—Ä–æ', question: '–ü–æ–¥–∑–µ–º–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç' },
  { word: '–≤–µ—Ä—Ç–æ–ª—ë—Ç', question: '–õ–µ—Ç–∞—Ç–µ–ª—å–Ω—ã–π –∞–ø–ø–∞—Ä–∞—Ç —Å –≤–∏–Ω—Ç–∞–º–∏' },
  { word: '—Å–∫–µ–π—Ç–±–æ—Ä–¥', question: '–î–æ—Å–∫–∞ –Ω–∞ –∫–æ–ª—ë—Å–∏–∫–∞—Ö' },
  { word: '—Å–∞–º–æ–∫–∞—Ç', question: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –¥–µ—Ç–µ–π –∏ –≤–∑—Ä–æ—Å–ª—ã—Ö —Å —Ä—É–ª—ë–º' },

  // üåç –°—Ç—Ä–∞–Ω—ã (–µ—â—ë)
  { word: '–±—Ä–∞–∑–∏–ª–∏—è', question: '–°—Ç—Ä–∞–Ω–∞ —Å –∫–∞—Ä–Ω–∞–≤–∞–ª–∞–º–∏ –∏ —Ñ—É—Ç–±–æ–ª–æ–º' },
  { word: '–∏—Å–ø–∞–Ω–∏—è', question: '–°—Ç—Ä–∞–Ω–∞ –∫–æ—Ä—Ä–∏–¥—ã –∏ —Ñ–ª–∞–º–µ–Ω–∫–æ' },
  { word: '–∏—Ç–∞–ª–∏—è', question: '–°—Ç—Ä–∞–Ω–∞ –ø–∏—Ü—Ü—ã –∏ –ø–∞—Å—Ç—ã' },
  { word: '–∫–∏—Ç–∞–π', question: '–°—Ç—Ä–∞–Ω–∞ —Å –í–µ–ª–∏–∫–æ–π —Å—Ç–µ–Ω–æ–π' },
  { word: '–∫–∞–Ω–∞–¥–∞', question: '–°—Ç—Ä–∞–Ω–∞ –∫–ª–µ–Ω–æ–≤—ã—Ö –ª–∏—Å—Ç—å–µ–≤' },

  // üé∂ –ú—É–∑—ã–∫–∞ (–µ—â—ë)
  { word: '–±–∞—Ä–∞–±–∞–Ω', question: '–£–¥–∞—Ä–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç' },
  { word: '—Å–∞–∫—Å–æ—Ñ–æ–Ω', question: '–î—É—Ö–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑ –¥–∂–∞–∑–∞' },
  { word: '–≥–∞—Ä–º–æ–Ω—å', question: '–†—É—Å—Å–∫–∏–π –Ω–∞—Ä–æ–¥–Ω—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç' },
  { word: '–∞—Ä—Ñ–∞', question: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å –Ω–∞—Ç—è–Ω—É—Ç—ã–º–∏ —Å—Ç—Ä—É–Ω–∞–º–∏' },
  { word: '—Ñ–ª–µ–π—Ç–∞', question: '–î—É—Ö–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –±–µ–∑ –∫–ª–∞–ø–∞–Ω–æ–≤' },

  // üé¨ –§–∏–ª—å–º—ã (–µ—â—ë)
  { word: '–≥–ª–∞–¥–∏–∞—Ç–æ—Ä', question: '–§–∏–ª—å–º —Å –ú–∞–∫—Å–∏–º—É—Å–æ–º' },
  { word: '–¥–∂—É–º–∞–Ω–¥–∂–∏', question: '–§–∏–ª—å–º –ø—Ä–æ –∏–≥—Ä—É, –æ–∂–∏–≤–ª—è—é—â—É—é –∂–∏–≤–æ—Ç–Ω—ã—Ö' },
  { word: '—à—Ä–µ–∫', question: '–ú—É–ª—å—Ç—Ñ–∏–ª—å–º –ø—Ä–æ –∑–µ–ª—ë–Ω–æ–≥–æ –æ–≥—Ä–∞' },
  { word: '–∫–æ—Ä–æ–ª—å–ª–µ–≤', question: '–ú—É–ª—å—Ç—Ñ–∏–ª—å–º –ø—Ä–æ –ª—å–≤–∞ –°–∏–º–±—É' },
  { word: '—Ö–æ–ª–æ–¥–Ω–æ–µ—Å–µ—Ä–¥—Ü–µ', question: '–ú—É–ª—å—Ç—Ñ–∏–ª—å–º –ø—Ä–æ –≠–ª—å–∑—É –∏ –ê–Ω–Ω—É' },

  // üè¢ –ë—Ä–µ–Ω–¥—ã
  { word: '–Ω–∞–π–∫', question: '–ë—Ä–µ–Ω–¥ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –æ–¥–µ–∂–¥—ã —Å –≥–∞–ª–æ—á–∫–æ–π' },
  { word: '–∞–¥–∏–¥–∞—Å', question: '–ë—Ä–µ–Ω–¥ —Å —Ç—Ä–µ–º—è –ø–æ–ª–æ—Å–∫–∞–º–∏' },
  { word: '–ø—É–º–∞', question: '–ë—Ä–µ–Ω–¥ —Å–æ –∑–≤–µ—Ä–µ–º –≤ –ª–æ–≥–æ—Ç–∏–ø–µ' },
  { word: '–≥—É–≥–ª', question: '–ö–æ–º–ø–∞–Ω–∏—è —Å –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π' },
  { word: '–∞–ø–ø–ª', question: '–ö–æ–º–ø–∞–Ω–∏—è —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –≤ –≤–∏–¥–µ —è–±–ª–æ–∫–∞' }
  
];

  const { word, question } = words[Math.floor(Math.random() * words.length)];
  let guessed = new Set();
  let tries = 6;
  const prize = word.length * 75;

  function getDisplayArray() {
    return [...word].map(l => ({ letter: l, guessed: guessed.has(l) }));
  }

  function roundRect(ctx, x, y, width, height, radius) {
    if (width < 2 * radius) radius = width / 2;
    if (height < 2 * radius) radius = height / 2;
    ctx.beginPath();
    ctx.moveTo(x + radius, y);
    ctx.arcTo(x + width, y, x + width, y + height, radius);
    ctx.arcTo(x + width, y + height, x, y + height, radius);
    ctx.arcTo(x, y + height, x, y, radius);
    ctx.arcTo(x, y, x + width, y, radius);
    ctx.closePath();
  }

  function getRandomGlowColor() {
    const colors = ['#ffae00', '#ff6f61', '#6bc1ff', '#8aff9e', '#ff9aff', '#ffaa6b', '#66d9ff'];
    return colors[Math.floor(Math.random() * colors.length)];
  }

  async function generateHangmanImage() {
    const canvasWidth = 1100;
    const canvasHeight = 500;
    const canvas = createCanvas(canvasWidth, canvasHeight);
    const ctx = canvas.getContext('2d');

    const glowColor = getRandomGlowColor();

    // –§–æ–Ω —Å –∫—Ä–∞—Å–∏–≤—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    const bgGradient = ctx.createLinearGradient(0, 0, canvasWidth, canvasHeight);
    bgGradient.addColorStop(0, '#0d1117');
    bgGradient.addColorStop(0.5, '#141a23');
    bgGradient.addColorStop(1, '#1e252f');
    ctx.fillStyle = bgGradient;
    ctx.fillRect(0, 0, canvasWidth, canvasHeight);

    // –®—É–º
    const noiseCanvas = createCanvas(canvasWidth, canvasHeight);
    const noiseCtx = noiseCanvas.getContext('2d');
    const imageData = noiseCtx.createImageData(canvasWidth, canvasHeight);
    for (let i = 0; i < imageData.data.length; i += 4) {
      const v = Math.random() * 20;
      imageData.data[i] = v;
      imageData.data[i + 1] = v;
      imageData.data[i + 2] = v;
      imageData.data[i + 3] = 18;
    }
    noiseCtx.putImageData(imageData, 0, 0);
    ctx.drawImage(noiseCanvas, 0, 0);

    // –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–π –ø–æ–¥–ª–æ–∂–∫–æ–π
    const cardX = 50;
    const cardY = 50;
    const cardWidth = canvasWidth - 100;
    const cardHeight = canvasHeight - 100;
    const cardRadius = 24;

    const cardGradient = ctx.createLinearGradient(cardX, cardY, cardX + cardWidth, cardY + cardHeight);
    cardGradient.addColorStop(0, '#2a2f38cc');
    cardGradient.addColorStop(1, '#1e2128cc');

    ctx.shadowColor = 'rgba(0,0,0,0.8)';
    ctx.shadowBlur = 25;
    ctx.fillStyle = cardGradient;
    roundRect(ctx, cardX, cardY, cardWidth, cardHeight, cardRadius);
    ctx.fill();
    ctx.shadowBlur = 0;

    // –û–±–≤–æ–¥–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ (–≥—Ä–∞–¥–∏–µ–Ω—Ç)
    const borderGradient = ctx.createLinearGradient(cardX, cardY, cardX + cardWidth, cardY + cardHeight);
    borderGradient.addColorStop(0, `${glowColor}`);
    borderGradient.addColorStop(0.5, '#fff');
    borderGradient.addColorStop(1, `${glowColor}`);
    ctx.strokeStyle = borderGradient;
    ctx.lineWidth = 6;
    roundRect(ctx, cardX, cardY, cardWidth, cardHeight, cardRadius);
    ctx.stroke();

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–≥—Ä–∞–¥–∏–µ–Ω—Ç)
    ctx.font = 'bold 48px "Segoe UI", sans-serif';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    const titleGradient = ctx.createLinearGradient(cardX, cardY, cardX + cardWidth, cardY);
    titleGradient.addColorStop(0, glowColor);
    titleGradient.addColorStop(0.5, '#ffffff');
    titleGradient.addColorStop(1, glowColor);
    ctx.fillStyle = titleGradient;
    ctx.shadowColor = glowColor;
    ctx.shadowBlur = 16;
    ctx.fillText('üéÆ –í–∏—Å–µ–ª–∏—Ü–∞ ‚Äî –£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ', cardX + cardWidth / 2, cardY + 60);
    ctx.shadowBlur = 0;

    // –í–æ–ø—Ä–æ—Å
    ctx.font = '600 26px "Segoe UI", sans-serif';
    ctx.textAlign = 'left';
    const questionLabelGradient = ctx.createLinearGradient(cardX, cardY, cardX + 200, cardY);
    questionLabelGradient.addColorStop(0, glowColor);
    questionLabelGradient.addColorStop(1, '#fff');
    ctx.fillStyle = questionLabelGradient;
    ctx.fillText('‚ùì –í–æ–ø—Ä–æ—Å:', cardX + 30, cardY + 130);

    ctx.font = '600 24px "Segoe UI", sans-serif';
    ctx.fillStyle = '#cccccc';
    ctx.fillText(question, cardX + 162, cardY + 131);

    // –°–ª–æ–≤–æ (–±—É–∫–≤—ã —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º)
    const letters = getDisplayArray();
    const letterWidth = 48;
    const letterSpacing = 12;
    const totalWidth = letters.length * letterWidth + (letters.length - 1) * letterSpacing;
    const startX = cardX + cardWidth / 2 - totalWidth / 2;
    const y = cardY + 210;

    ctx.textBaseline = 'middle';
    ctx.font = 'bold 48px "Segoe UI", sans-serif';

    for (let i = 0; i < letters.length; i++) {
      const x = startX + i * (letterWidth + letterSpacing);
      if (letters[i].guessed) {
        const grad = ctx.createLinearGradient(x - 20, y - 24, x + 20, y + 24);
        grad.addColorStop(0, glowColor);
        grad.addColorStop(0.5, '#ffffff');
        grad.addColorStop(1, glowColor);
        ctx.fillStyle = grad;
        ctx.shadowColor = glowColor;
        ctx.shadowBlur = 14;
        ctx.fillText(letters[i].letter.toUpperCase(), x, y);
      } else {
        const rectHeight = 60;
        const rectWidth = letterWidth;
        const rectY = y - rectHeight / 2;
        ctx.strokeStyle = `${glowColor}cc`;
        ctx.shadowBlur = 0;
        ctx.strokeRect(x - rectWidth / 2, rectY, rectWidth, rectHeight);
      }
    }
    ctx.shadowBlur = 0;

    // –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫ (–≥—Ä–∞–¥–∏–µ–Ω—Ç)
    ctx.font = '600 28px "Segoe UI", sans-serif';
    const attemptsGradient = ctx.createLinearGradient(cardX, cardY + 280, cardX + 250, cardY + 280);
    attemptsGradient.addColorStop(0, glowColor);
    attemptsGradient.addColorStop(1, '#fff');
    ctx.fillStyle = attemptsGradient;
    ctx.fillText('‚ù§Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫:', cardX + 30, cardY + 280);
    ctx.fillStyle = '#fff';
    ctx.fillText(String(tries), cardX + 332, cardY + 280);

    // –í—Ö–æ–¥ –∏ –ø—Ä–∏–∑ (–≥—Ä–∞–¥–∏–µ–Ω—Ç)
    ctx.font = '600 28px "Segoe UI", sans-serif';
    const infoGradient = ctx.createLinearGradient(cardX, cardY + 340, cardX + 250, cardY + 340);
    infoGradient.addColorStop(0, glowColor);
    infoGradient.addColorStop(1, '#fff');
    ctx.fillStyle = infoGradient;
    ctx.fillText('üí∞ –í—Ö–æ–¥:', cardX + 30, cardY + 340);
    ctx.fillText('üèÜ –ü—Ä–∏–∑:', cardX + 600, cardY + 340);
    ctx.fillStyle = '#fff';
    ctx.fillText(`${entryFee} –∫–æ–∏–Ω–æ–≤`, cardX + 147, cardY + 340);
    ctx.fillText(`${prize} –∫–æ–∏–Ω–æ–≤`, cardX + 723, cardY + 340);

    return new AttachmentBuilder(canvas.toBuffer(), { name: 'hangman.png' });
  }

  let attachment = await generateHangmanImage();
  const msg = await message.channel.send({ files: [attachment] });

  const filter = m =>
    !m.author.bot &&
    /^[–∞-—è—ë]$/i.test(m.content) &&
    data.coinsData[m.author.id] &&
    data.coinsData[m.author.id].coins >= entryFee;

  const activePlayers = new Set();

  const collector = message.channel.createMessageCollector({ filter, time: 90000 });

  collector.on('collect', async m => {
    const userId = m.author.id;
    const letter = m.content.toLowerCase();

    await m.delete().catch(() => {});

    if (!activePlayers.has(userId)) {
      data.coinsData[userId].coins -= entryFee;
      activePlayers.add(userId);
      const joinMsg = await message.channel.send(`${m.author}, –≤—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∏–≥—Ä—É –∑–∞ **${entryFee}** –∫–æ–∏–Ω–æ–≤!`);
      setTimeout(() => joinMsg.delete().catch(() => {}), 10000);
    }

    if (guessed.has(letter)) {
      const guessedMsg = await message.channel.send(`${m.author}, –±—É–∫–≤–∞ **"${letter}"** —É–∂–µ –±—ã–ª–∞.`);
      setTimeout(() => guessedMsg.delete().catch(() => {}), 10000);
      return;
    }

    guessed.add(letter);

    if (!word.includes(letter)) {
      tries--;
      const noLetterMsg = await message.channel.send(`${m.author}, –Ω–µ—Ç –±—É–∫–≤—ã **"${letter}"**. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: **${tries}**`);
      setTimeout(() => noLetterMsg.delete().catch(() => {}), 10000);
    }

    attachment = await generateHangmanImage();
    await msg.edit({ files: [attachment] });

    const currentDisplay = [...word].map(l => (guessed.has(l) ? l : '‚ö´')).join('');

    if (!currentDisplay.includes('‚ö´')) {
      data.coinsData[userId].coins += prize;
      const winEmbed = new EmbedBuilder()
        .setDescription(`üéâ **${m.author}** —É–≥–∞–¥–∞–ª(–∞) —Å–ª–æ–≤–æ: **${word.toUpperCase()}** –∏ –ø–æ–ª—É—á–∏–ª(–∞) **${prize}** –∫–æ–∏–Ω–æ–≤!`)
        .setColor('#2ecc71');

      const winMsg = await message.channel.send({ embeds: [winEmbed] });
      setTimeout(() => winMsg.delete().catch(() => {}), 10000);

      saveData();
      collector.stop('won');
    }

    if (tries <= 0) {
      const failEmbed = new EmbedBuilder()
        .setDescription(`üòû –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ª–æ–≤–æ –Ω–µ –±—ã–ª–æ –æ—Ç–≥–∞–¥–∞–Ω–æ.`)
        .setColor('#e74c3c');

      const failMsg = await message.channel.send({ embeds: [failEmbed] });
      setTimeout(() => failMsg.delete().catch(() => {}), 10000);

      collector.stop('fail');
    }
  });

  collector.on('end', async (_, reason) => {
    if (reason !== 'won' && reason !== 'fail') {
      const timeoutEmbed = new EmbedBuilder()
        .setDescription(`‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ª–æ–≤–æ –Ω–µ –±—ã–ª–æ –æ—Ç–≥–∞–¥–∞–Ω–æ.`)
        .setColor('#f1c40f');

      const timeoutMsg = await message.channel.send({ embeds: [timeoutEmbed] });
      setTimeout(() => timeoutMsg.delete().catch(() => {}), 10000);
    }
    msg.delete().catch(() => {});
  });
}
else if (command === 'anagram') {
  if (message.channel.id !== COINS_CHANNEL_ID) return message.delete().catch(() => {});
  await message.delete().catch(() => {});

  const entryFee = 150;
  const userId = message.author.id;

  if (!data.coinsData[userId] || data.coinsData[userId].coins < entryFee) {
    return message.channel.send({
      embeds: [createEmbed({
        title: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤',
        description: `–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ **${entryFee}** –∫–æ–∏–Ω–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è.`,
        color: '#e74c3c'
      })]
    }).then(msg => setTimeout(() => msg.delete().catch(() => {}), 30000));
  }

  data.coinsData[userId].coins -= entryFee;
  saveData();

  const categories = {
IT: [
      "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç","–∞–ª–≥–æ—Ä–∏—Ç–º","—Å–µ—Ä–≤–µ—Ä","–º–∞—Å—Å–∏–≤","—Ñ—É–Ω–∫—Ü–∏—è","–±–æ—Ç","–Ω–µ–π—Ä–æ—Å–µ—Ç—å","–∫–æ–º–ø—å—é—Ç–µ—Ä","–∫–æ–¥","–≥–∏—Ç—Ö–∞–±",
      "–¥–µ–±–∞–≥","–±–∞–π—Ç","–∫–æ–º–ø–∏–ª—è—Ü–∏—è","–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å","–∫–ª–∞—Å—Å","–æ–±—ä–µ–∫—Ç","–º–µ—Ç–æ–¥","–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è","–ø–∞–º—è—Ç—å","—Ü–∏–∫–ª",
      "–±–∞–∑–∞","–¥–∞–Ω–Ω—ã—Ö","–ø—Ä–æ—Ç–æ–∫–æ–ª","—à–∞–±–ª–æ–Ω","—Ç–µ—Å—Ç","—Ñ—Ä–µ–π–º–≤–æ—Ä–∫","–∫–æ–Ω—Å–æ–ª—å","–ø—Ä–æ–µ–∫—Ç","—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π","—Å–∫—Ä–∏–ø—Ç",
      "—Å–µ—Ç—å","—Ö–æ—Å—Ç","–ø–æ—Ä—Ç","–±—Ä–∞—É–∑–µ—Ä","–∫–µ—à","–º–æ–¥—É–ª—å","–ø–∞–∫–µ—Ç","–∞–ª–≥–æ—Ä–∏—Ç–º","–∏–Ω–¥–µ–∫—Å","–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
      "—à–ª—é–∑","—Å–µ—Ä–≤–µ—Ä","–¥–æ–º–µ–Ω","–∫–ª—é—á","–ø–∞—Ä–æ–ª—å","–∑–∞–ø—Ä–æ—Å","–æ—Ç–≤–µ—Ç","—Å–µ—Å—Å–∏—è","–ª–æ–≥","–∞–Ω–∞–ª–∏–∑",
      "—Å–∏—Å—Ç–µ–º–∞","—è–∑—ã–∫","–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ","–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç","–æ—Ç–ª–∞–¥–∫–∞","–≤–µ—Ä—Å–∏—è","–±–∏–±–ª–∏–æ—Ç–µ–∫–∞","—Ñ—É–Ω–∫—Ü–∏—è","–¥–∞–Ω–Ω—ã–µ","–∫–æ–¥",
      "–ø—Ä–æ—Ç–æ–∫–æ–ª","–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞","—à–∞–±–ª–æ–Ω","–ø–∞—Ä–∞–º–µ—Ç—Ä","–ø–æ—Ç–æ–∫","–æ–ø–µ—Ä–∞—Ç–æ—Ä","—Ñ–∞–π–ª","—Å–µ—Ä–≤–µ—Ä","–ø–∞–∫–µ—Ç","–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
      "–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä","—Å–∏–Ω—Ç–∞–∫—Å–∏—Å","–æ—Ç–º–µ–Ω–∞","–¥–æ–º–µ–Ω","–∫–ª–∏–µ–Ω—Ç","–±—ç–∫–µ–Ω–¥","—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥","—Å–µ—Ä–≤–µ—Ä","–∞–ø–∏","–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"
    ],
    –ñ–∏–≤–æ—Ç–Ω—ã–µ: [
      "—Å–æ–±–∞–∫–∞","–∫–æ—à–∫–∞","–¥–µ–ª—å—Ñ–∏–Ω","–º–µ–¥–≤–µ–¥—å","–ª–∏—Å–∞","–≤–æ–ª–∫","—Å–ª–æ–Ω","–∫–µ–Ω–≥—É—Ä—É","–∫—Ä–æ–∫–æ–¥–∏–ª","—ë–∂",
      "—Ç–∏–≥—Ä","–ª–µ–≤","–∂–∏—Ä–∞—Ñ","–∑–∞—è—Ü","–±–∞—Ä—Å—É–∫","–ø–∞–Ω–¥–∞","–º—ã—à—å","–∫—Ä—ã—Å–∞","–æ—Ä—ë–ª","—Å–æ–≤a",
      "–ø–æ–ø—É–≥–∞–π","–≤–æ—Ä–æ–±–µ–π","–ª–∞—Å—Ç–æ—á–∫–∞","–±–µ–≥–µ–º–æ—Ç","–Ω–æ—Å–æ—Ä–æ–≥","–±—É—Ä—É–Ω–¥—É–∫","–ª–æ—Å—å","–≤—ã–¥—Ä–∞","–∫–∞–±–∞–Ω","—É—Ç–∫–∞",
      "–≥—É—Å—å","–≤–æ—Ä–æ–Ω–∞","–ø–∏–Ω–≥–≤–∏–Ω","—Å—Ç—Ä–∞—É—Å","–∞–∫—É–ª–∞","—Ä—ã–±–∞","–∫—Ä–∞–±","–æ–º–∞—Ä","–æ—Å—å–º–∏–Ω–æ–≥","–º–µ–¥—É–∑–∞",
      "–∫—Ä–∞–ø–∏–≤–Ω–∏—Ü–∞","–º–æ–ª–ª—é—Å–∫","–∑–µ–±—Ä–∞","–æ–±–µ–∑—å—è–Ω–∞","–ø–æ–ø—É–≥–∞–π","—Å–æ–≤–∞","—Ñ–ª–∞–º–∏–Ω–≥–æ","–∫–æ–ª–∏–±—Ä–∏","–µ–∂","–∫—Ä–æ—Ç",
      "–µ–Ω–æ—Ç","–∫—Ä—ã—Å–∞","–∫—Ä—ã—Å–∞","–±–æ–±—Ä","–ª—è–≥—É—à–∫–∞","–∂–∞–±–∞","–∫–æ–±—Ä–∞","–ø–∏—Ç–æ–Ω","—è—â–µ—Ä–∏—Ü–∞","–≥–µ–∫–∫–æ–Ω",
      "—Å–∫–æ—Ä–ø–∏–æ–Ω","–ø–∞—É–∫","–º—É—Ä–∞–≤–µ–π","–±–∞–±–æ—á–∫–∞","–ø—á–µ–ª–∞","–æ—Åa","–∂—É–∫","–º–æ–ª—å","–∫–æ–º–∞—Ä","—Å—Ç—Ä–µ–∫–æ–∑–∞"
    ],
    –ï–¥–∞: [
      "–ø–∏—Ü—Ü–∞","—à–æ–∫–æ–ª–∞–¥","–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å","–º–æ—Ä–∫–æ–≤—å","–∞—Ä–±—É–∑","–æ–≥—É—Ä–µ—Ü","–ø–µ–ª—å–º–µ–Ω–∏","–æ–º–ª–µ—Ç","–±–æ—Ä—â","–ø–∏—Ä–æ–≥",
      "—à–∞—à–ª—ã–∫","–π–æ–≥—É—Ä—Ç","—Å–∞–ª–∞—Ç","—Å—É–ø","–∫–æ—Ç–ª–µ—Ç–∞","–±—É–ª–æ—á–∫–∞","—Ö–ª–µ–±","—Å—ã—Ä","–º–æ–ª–æ–∫–æ","–∫–µ—Ñ–∏—Ä",
      "–≤–∞—Ä–µ–Ω—å–µ","–¥–∂–µ–º","–∫–æ–Ω—Ñ–µ—Ç–∞","—Ç–æ—Ä—Ç","–ø–µ—á–µ–Ω—å–µ","–º–æ—Ä–æ–∂–µ–Ω–æ–µ","–∫–µ—Ñ–∏—Ä","–≤–æ–¥–∞","—á–∞–π","–∫–æ—Ñ–µ",
      "—Å–æ–∫","–ª–∏–º–æ–Ω–∞–¥","–º–∞—Å–ª–æ","–º–µ–¥","—Å–∞—Ö–∞—Ä","—Å–æ–ª—å","–ø–µ—Ä–µ—Ü","—Ä–∏—Å","–º–∞–∫–∞—Ä–æ–Ω—ã","–≥—Ä–µ—á–∫–∞",
      "–æ–≤—Å—è–Ω–∫–∞","–∫—É—Ä–∏—Ü–∞","—Ä—ã–±–∞","–≥–æ–≤—è–¥–∏–Ω–∞","—Å–≤–∏–Ω–∏–Ω–∞","–∏–Ω–¥–µ–π–∫–∞","—è–π—Ü–æ","—Ç–æ–º–∞—Ç","–∫–∞–ø—É—Å—Ç–∞","–ª—É–∫",
      "—á–µ—Å–Ω–æ–∫","–ø–µ—Ä–µ—Ü","—Ç—ã–∫–≤–∞","–±–∞–∫–ª–∞–∂–∞–Ω","–∫–∞–±–∞—á–æ–∫","–≥–æ—Ä–æ—Ö","—Ñ–∞—Å–æ–ª—å","–≥–æ—Ä—á–∏—Ü–∞","–º–∞–π–æ–Ω–µ–∑","–∫–µ—Ç—á—É–ø",
      "–≥–æ—Ä—è—á–µ–µ","—Ö–æ–ª–æ–¥–Ω–æ–µ","–¥–µ—Å–µ—Ä—Ç","–∑–∞–∫—É—Å–∫–∞","–Ω–∞–ø–∏—Ç–æ–∫","—Ö–ª–µ–±–µ—Ü","–±—É–ª–∫–∞","–±–ª–∏–Ω","–∫–µ–∫—Å","–ø—É–¥–∏–Ω–≥"
    ],
    –ì–æ—Ä–æ–¥–∞: [
      "–º–æ—Å–∫–≤–∞","–ø–∞—Ä–∏–∂","—Ç–æ–∫–∏–æ","–ª–æ–Ω–¥–æ–Ω","–ø–µ—Ç–µ—Ä–±—É—Ä–≥","–±–µ—Ä–ª–∏–Ω","–º–∞–¥—Ä–∏–¥","—Ä–∏–º","–ø–µ–∫–∏–Ω","–∫–∏–µ–≤",
      "–º–∏–Ω—Å–∫","–≤–∞—Ä—à–∞–≤–∞","–ø—Ä–∞–≥–∞","—Å—Ç–æ–∫–≥–æ–ª—å–º","–∫–æ–ø–µ–Ω–≥–∞–≥–µ–Ω","–æ—Ç—Ç–∞–≤–∞","–≤–∞—à–∏–Ω–≥—Ç–æ–Ω","—Ç–æ—Ä–æ–Ω—Ç–æ","–º–µ–ª—å–±—É—Ä–Ω","—Å–∏–Ω–≥–∞–ø—É—Ä",
      "–±–æ—Å—Ç–æ–Ω","—á–∏–∫–∞–≥–æ","–ª–æ—Å–∞–Ω–¥–∂–µ–ª–µ—Å","–∫–∞–∏—Ä","–¥–∂–∞–∫–∞—Ä—Ç–∞","–±–∞–Ω–≥–∫–æ–∫","–¥–µ–ª–∏","–º—É–º–±–∞–∏","—à–∞–Ω—Ö–∞–π","—Å–µ—É–ª",
      "—Å—Ç–∞–º–±—É–ª","–º—é–Ω—Ö–µ–Ω","–≤–µ–Ω–∞","–±—É–¥–∞–ø–µ—à—Ç","—Ñ–ª–æ—Ä–µ–Ω—Ü–∏—è","–Ω–µ–∞–ø–æ–ª—å","—Ñ–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è","–±–æ—Å—Ç–æ–Ω","—Ö–µ–ª—å—Å–∏–Ω–∫–∏","–æ—Å–ª–æ",
      "–º–∏–ª–∞–Ω","–ø–æ–∑–Ω–∞–Ω—å","–≥–ª–∞–∑–≥–æ","–±–∞—Ä–∏","–≤–∞–ª–µ–Ω—Å–∏—è","–±–∞—Å–∫","–ª–∏–±—Ä–µ","–ø–µ—Ä—Ç","–∫–µ–Ω—Å–∏–Ω–≥—Ç–æ–Ω","–±–∞–∑–µ–ª—å",
      "–∑–∞–∞–Ω–¥–∞–º","–≥–µ–Ω—Ç","–ª–µ–≤–µ–Ω","–≥–µ–Ω—É—è","–∫–æ—Ä–∫","–ª–∏—Å—Å–∞–±–æ–Ω","—Å–∞–ª–æ–Ω–∏–∫–∏","—Ç–∞—Å–º–∞–Ω–∏—è","–∫–∏–æ—Ç–æ","–Ω–∞–≥–æ—è"
    ],
    –ü—Ä–∏—Ä–æ–¥–∞: [
      "–≥–æ—Ä–∞","–æ–∑–µ—Ä–æ","–ª–µ—Å","–≥—Ä–æ–º","—Ç—É—á–∞","–≤–µ—Ç–µ—Ä","—Ä–µ–∫–∞","–ø—Ä—É–¥","–±–æ–ª–æ—Ç–æ","–ø–µ—â–µ—Ä–∞",
      "–¥–æ–ª–∏–Ω–∞","—Ä–∞–≤–Ω–∏–Ω–∞","–ø—É—Å—Ç—ã–Ω—è","–∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫","–ø–æ–ª–µ","–ª—É–≥–∞","–±–æ–ª–æ—Ç–æ","–¥–∂—É–Ω–≥–ª–∏","–æ–∫–µ–∞–Ω","–ø–ª—è–∂",
      "–ø–ª—è–∂","–≤–æ–¥–æ–ø–∞–¥","–≥–æ—Ä–∞","—Å–∫–∞–ª–∞","–∫–∞–º–µ–Ω—å","–ø–µ—Å–æ–∫","–≥–ª–∏–Ω–∞","—Ç—É–Ω–¥—Ä–∞","—Ç–∞–π–≥–∞","—Å—Ç–µ–ø—å",
      "–∑–∞—Ä–æ—Å–ª–∏","–¥–æ–ª–∏–Ω–∞","–ø–æ–ª—è–Ω–∞","—Ä–æ—â–∞","–ª–µ—Å","–±–æ–ª–æ—Ç–æ","–±–µ—Ä–µ–≥","–º–æ—Ä–æ–∑","—Å–Ω–µ–≥","–ª–µ–¥",
      "–¥–æ–∂–¥—å","–≥—Ä–∞–¥","–≥—Ä–æ–∑–∞","—Ä–∞–¥—É–≥–∞","—Å–æ–ª–Ω—Ü–µ","–ª—É–Ω–∞","–∑–≤–µ–∑–¥–∞","–Ω–µ–±–æ","–æ–±–ª–∞–∫–æ","—Ç—É–º–∞–Ω",
      "–≤–µ—Ç–µ—Ä","–±—É—Ä—è","—É—Ä–∞–≥–∞–Ω","–∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–µ","–≤—É–ª–∫–∞–Ω","–≤–æ–¥–æ–≤–æ—Ä–æ—Ç","–ø—Ä–∏–ª–∏–≤","–æ—Ç–ª–∏–≤","–ª–µ–¥–Ω–∏–∫","–ø–µ—â–µ—Ä–∞"
    ],
     –ö–æ—Å–º–æ—Å: [
    "–ª—É–Ω–∞", "–º–∞—Ä—Å", "–∑–≤–µ–∑–¥–∞", "—Ç–µ–ª–µ—Å–∫–æ–ø", "—Ä–∞–∫–µ—Ç–∞", "–ø–ª–∞–Ω–µ—Ç–∞", "–∫–æ–º–µ—Ç–∞", "–∞—Å—Ç–µ—Ä–æ–∏–¥", "–≥–∞–ª–∞–∫—Ç–∏–∫–∞", "—Å–æ–ª–Ω—Ü–µ",
    "–æ—Ä–±–∏—Ç–∞", "—á–µ—Ä–Ω–∞—è–¥—ã—Ä–∞", "—Å–ø—É—Ç–Ω–∏–∫", "–º–ª–µ—á–Ω—ã–π–ø—É—Ç—å", "–∫–æ—Å–º–æ–Ω–∞–≤—Ç", "–º–µ—Ç–µ–æ—Ä", "–∫–æ—Å–º–æ—Å", "–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞", "–≤–∞–∫—É—É–º", "–∫–≤–∞–∑–∞—Ä—ã",
    "–∑–≤–µ–∑–¥–æ–ø–∞–¥", "—Å–æ–∑–≤–µ–∑–¥–∏–µ", "–º–µ—Ç–µ–æ—Ä–∏—Ç", "–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "—ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç–∞", "—Ä–∞–¥–∏–æ—Ç–µ–ª–µ—Å–∫–æ–ø", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π—Ç–µ–ª–µ—Å–∫–æ–ø", "–ø—É–ª—å—Å–∞—Ä", "–Ω–µ–π—Ç—Ä–æ–Ω–Ω–∞—è–∑–≤–µ–∑–¥–∞", "–±–µ–ª—ã–π–∫–∞—Ä–ª–∏–∫",
    "–∫—Ä–∞—Å–Ω—ã–π–≥–∏–≥–∞–Ω—Ç", "—á–µ—Ä–Ω–∞—è–¥—ã—Ä–∞", "–ø—Ä–æ—Ç–æ–∑–≤–µ–∑–¥–∞", "–ø—Ä–æ—Ç–æ–ø–ª–∞–Ω–µ—Ç–Ω—ã–π–¥–∏—Å–∫", "—Ç–µ–º–Ω–∞—è–º–∞—Ç–µ—Ä–∏—è", "—Ç–µ–º–Ω–∞—è—ç–Ω–µ—Ä–≥–∏—è", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–∫–æ—Å–º–æ–¥—Ä–æ–º", "–ª—É–Ω–æ—Ö–æ–¥", "—Å–ø—É—Ç–Ω–∏–∫–∑–µ–º–ª–∏",
    "–∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π–∫–æ—Ä–∞–±–ª—å", "—ç–∫—Å–ø–µ–¥–∏—Ü–∏—è", "—Ç–µ–ª–µ—Å–∫–æ–ø", "–∫–æ—Å–º–∏—á–µ—Å–∫–∞—è—Å—Ç–∞–Ω—Ü–∏—è", "–æ—Ä–±–∏—Ç–∞–ª—å–Ω–∞—è—Å—Ç–∞–Ω—Ü–∏—è", "–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è", "–Ω–µ–≤–µ—Å–æ–º–æ—Å—Ç—å", "–∑–≤–µ–∑–¥–Ω–∞—è—Å–∏—Å—Ç–µ–º–∞", "–º–µ—Ç–µ–æ–∑–æ–Ω–¥"
  ],
  –ú–∏—Ñ–æ–ª–æ–≥–∏—è: [
    "–∑–µ–≤—Å", "—Ç–æ—Ä", "–ø–µ–≥–∞—Å", "—Ü–µ—Ä–±–µ—Ä", "–æ–¥–∏–Ω", "–≥–µ—Ä–∞", "–∞–ø–æ–ª–ª–æ–Ω", "–∞—Ñ–∏–Ω–∞", "–¥–∏–æ–Ω–∏—Å", "–≥–∞–¥–µ—Å",
    "–ø–µ—Ä—Å–µ–π", "–∞—Ä–≥–æ–Ω–∞–≤—Ç", "–≥–µ—Ä–∫—É–ª–µ—Å", "–∞—Ñ—Ä–æ–¥–∏—Ç–∞", "—Ñ–µ–Ω–∏–∫—Å", "–º–∏–Ω–µ—Ä–≤–∞", "–∫—Ä–æ–Ω–æ—Å", "—Ä–∞", "–æ—Å–∏—Ä–∏—Å", "—Å–µ—Ç",
    "–∞–Ω—É–±–∏—Å", "–±–æ–≥–∏–Ω—è", "–±–æ–≥", "–¥–µ–º–µ—Ç—Ä–∞", "–ø–ª—É—Ç–æ–Ω", "—é–ø–∏—Ç–µ—Ä", "–Ω–µ–ø—Ç—É–Ω", "–º–∞—Ä—Å", "–≤–µ–Ω–µ—Ä–∞", "–º–µ—Ä–∫—É—Ä–∏–π",
    "–ª–æ–∫–∏", "—Ñ—Ä–µ–π—è", "–±–∞–ª–¥—Ä", "–∏–¥—É–Ω–Ω", "—Ö–µ–ª—å", "–º–∏–¥–≥–∞—Ä–¥", "–π–æ—Ç—É–Ω", "–∞—Å–≥–∞—Ä–¥", "–≤–∞–ª—å–∫–∏—Ä–∏—è", "—Ä–∏–º",
    "–≥–∏–ª—å–≥–∞–º–µ—à", "–º–µ–¥—É–∑–∞", "–≥–∞—Ä–ø–∏—è", "—Å—Ñ–∏–Ω–∫—Å", "—Ü–µ—Ä–±–µ—Ä", "–≥–∏–¥—Ä–∞", "–º–∏–Ω–æ–≥–µ–π", "–∫—É–∫–ª–∞", "–∫–µ–ª–ø–∏", "–¥—Ä–∏–∞–¥–∞"
  ],
  –°–ø–æ—Ä—Ç: [
    "—Ñ—É—Ç–±–æ–ª", "–≤–æ–ª–µ–π–±–æ–ª", "—Ç–µ–Ω–Ω–∏—Å", "–ª—ã–∂–∏", "–≥–æ–ª", "–±–∞—Å–∫–µ—Ç–±–æ–ª", "—Ö–æ–∫–∫–µ–π", "—Ä–µ–≥–±–∏", "–≥–∞–Ω–¥–±–æ–ª", "–ø–ª–∞–≤–∞–Ω–∏–µ",
    "–±–æ–∫—Å", "–±–æ—Ä—å–±–∞", "—Ñ–µ—Ö—Ç–æ–≤–∞–Ω–∏–µ", "–∫–∞—Ä–∞—Ç–µ", "–¥–∑—é–¥–æ", "–ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥", "—à–∞—Ö–º–∞—Ç—ã", "–±–∏–∞—Ç–ª–æ–Ω", "—Å–∫–µ–π—Ç–±–æ—Ä–¥", "—Å–µ—Ä—Ñ–∏–Ω–≥",
    "–≥–æ–Ω–∫–∏", "—Ç—Ä–∏–∞—Ç–ª–æ–Ω", "–ø—Ä—ã–∂–∫–∏", "–ª—ã–∂–Ω—ã–µ–≥–æ–Ω–∫–∏", "–≥–æ–ª—å—Ñ", "–≤–µ–ª–æ—Å–ø–æ—Ä—Ç", "–±–µ–≥", "—Å–ø—Ä–∏–Ω—Ç", "–º–∞—Ä–∞—Ñ–æ–Ω", "–ø—Ä—ã–∂–æ–∫–≤–≤—ã—Å–æ—Ç—É",
    "–ø—Ä—ã–∂–æ–∫–≤–¥–ª–∏–Ω—É", "–π–æ–≥–∞", "—Ç–∞–Ω—Ü—ã", "—Ñ–∏–≥—É—Ä–Ω–æ–µ–∫–∞—Ç–∞–Ω–∏–µ", "—Ç—Ö—ç–∫–≤–æ–Ω–¥–æ", "–ø–∞—Ä–∫—É—Ä", "—Å–∫–∞–ª–æ–ª–∞–∑–∞–Ω–∏–µ", "—Ä–µ–≥–±–∏", "–≤–µ–ª–æ—Ç—Ä–µ–∫", "—Ñ–ª–æ—Ä–±–æ–ª"
  ],
  –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞: [
    "–ø–æ—ç—Ç", "—Ä–æ–º–∞–Ω", "–≥–ª–∞–≤–∞", "–±–∏–±–ª–∏–æ—Ç–µ–∫–∞", "–∞–≤—Ç–æ—Ä", "—Å—Ç–∏—Ö–∏", "–ø—Ä–æ–∑–∞", "—Å–∫–∞–∑–∫–∞", "—ç–ø–æ–ø–µ—è", "—Ç—Ä–∞–≥–µ–¥–∏—è",
    "–∫–æ–º–µ–¥–∏—è", "–ø–æ–≤–µ—Å—Ç—å", "—ç—Å—Å–µ", "–¥—Ä–∞–º–∞", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–º–∏—Ñ", "–ª–µ–≥–µ–Ω–¥–∞", "–¥–µ—Ç–µ–∫—Ç–∏–≤", "—Ä–æ–º–∞–Ω—Ç–∏–∫–∞", "–ø–æ–≤–µ—Å—Ç—å",
    "–≥–µ—Ä–æ–π", "—Å—é–∂–µ—Ç", "–¥–∏–∞–ª–æ–≥", "–º–æ–Ω–æ–ª–æ–≥", "–ø–µ—Ä—Å–æ–Ω–∞–∂", "–∫–Ω–∏–≥–∞", "—Ä–∞—Å—Å–∫–∞–∑", "—Ñ–∏–ª—å–º", "–∂–∞–Ω—Ä", "–ø–∏—Å–∞—Ç–µ–ª—å",
    "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–∫–ª–∞—Å—Å–∏–∫–∞", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å", "–±–∏–æ–≥—Ä–∞—Ñ–∏—è", "–∞–≤—Ç–æ–±–∏–æ–≥—Ä–∞—Ñ–∏—è", "–∫—Ä–∏—Ç–∏–∫–∞", "–ø—É–±–ª–∏—Ü–∏—Å—Ç–∏–∫–∞", "–ø–æ—ç–º–∞", "—Å–∞—Ç–∏—Ä–∞", "–∞–ª–ª–µ–≥–æ—Ä–∏—è"
  ],
  –¢–µ—Ö–Ω–∏–∫–∞: [
    "–ø—ã–ª–µ—Å–æ—Å", "—Ç–µ–ª–µ–≤–∏–∑–æ—Ä", "–∫–æ–º–ø—å—é—Ç–µ—Ä", "–Ω–∞—É—à–Ω–∏–∫–∏", "—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞", "—Å—Ç–∏—Ä–∞–ª—å–Ω–∞—è–º–∞—à–∏–Ω–∞", "–ø—Ä–∏–Ω—Ç–µ—Ä", "—Ñ–∞–∫—Å",
    "—Ä–æ—É—Ç–µ—Ä", "–∫–æ–ª–æ–Ω–∫–∞", "–ø—Ä–æ–µ–∫—Ç–æ—Ä", "–∫–∞–±–µ–ª—å", "–∞–¥–∞–ø—Ç–µ—Ä", "–º–æ–Ω–∏—Ç–æ—Ä", "–º—ã—à—å", "–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞", "–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä", "–∂–µ—Å—Ç–∫–∏–π–¥–∏—Å–∫",
    "–ø–ª–∞–Ω—à–µ—Ç", "—Å–º–∞—Ä—Ç—Ñ–æ–Ω", "–∫–∞–º–µ—Ä–∞", "–Ω–∞–≤–∏–≥–∞—Ü–∏—è", "–±–∞—Ç–∞—Ä–µ—è", "–∑–∞—Ä—è–¥–∫–∞", "–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä", "–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä", "–º–∏–∫—Å–µ—Ä", "–±–ª–µ–Ω–¥–µ—Ä",
    "—É—Ç—é–≥", "—ç–ª–µ–∫—Ç—Ä–æ—á–∞–π–Ω–∏–∫", "–ø–ª–∏—Ç–∞", "–¥—É—Ö–æ–≤–∫–∞", "—Ç–µ–ª–µ—Å–∫–æ–ø", "—Ä–∞–¥–∏–æ", "—Ä–∞–¥–∏–æ–ø—Ä–∏–µ–º–Ω–∏–∫", "–º–∏–∫—Ä–æ—Ñ–æ–Ω", "–¥—Ä–æ–Ω", "–ª–∞–∑–µ—Ä"
  ],
  –ò—Å—Ç–æ—Ä–∏—è: [
  "–∏–º–ø–µ—Ä–∞—Ç–æ—Ä", "—Ä–µ–≤–æ–ª—é—Ü–∏—è", "—Ñ–µ–æ–¥–∞–ª–∏–∑–º", "—Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ", "–≥–ª–∞–¥–∏–∞—Ç–æ—Ä", "–∫–æ–ª–æ–Ω–∏–∑–∞—Ü–∏—è", "–º–æ–Ω–∞—Ä—Ö–∏—è", "—Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏—è", "–≤–æ–π–Ω–∞", "–ø–ª–µ–º—è",
  "–∏–Ω–∫–≤–∏–∑–∏—Ü–∏—è", "–¥–µ—Å–ø–æ—Ç", "–∞—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç", "–∫—Ä–µ—Å—Ç–æ–Ω–æ—Å–µ—Ü", "—Ä–µ–Ω–µ—Å—Å–∞–Ω—Å", "—Ä–µ—Ñ–æ—Ä–º–∞—Ü–∏—è", "—Ü–∞—Ä—å", "–∫—Ä–µ–ø–æ—Å—Ç—å", "–∞—Ä—Ö–µ–æ–ª–æ–≥–∏—è", "–∫–Ω—è–∂–µ—Å—Ç–≤–æ"
],
–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è: [
  "–∏–Ω—Å—Ç–∏–Ω–∫—Ç", "–ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ", "–º–æ—Ç–∏–≤–∞—Ü–∏—è", "—Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞", "—Å—Ç—Ä–µ—Å—Å", "—ç–º–ø–∞—Ç–∏—è", "–¥–µ–ø—Ä–µ—Å—Å–∏—è", "—Ñ–æ–±–∏—è", "—Ö–∞—Ä–∞–∫—Ç–µ—Ä", "–ø—Å–∏—Ö–æ—Ç–∏–ø",
  "–∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç", "—ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç", "–º—ã—à–ª–µ–Ω–∏–µ", "–Ω–∞–≤—ã–∫", "—É–±–µ–∂–¥–µ–Ω–∏–µ", "–ø—Å–∏—Ö–∏–∫–∞", "—É—Å—Ç–∞–Ω–æ–≤–∫–∞", "–ø–æ–≤–µ–¥–µ–Ω–∏–µ", "—Ä–µ–∞–∫—Ü–∏—è", "–ø—Å–∏—Ö–æ–ª–æ–≥"
]
  };
  const words = Object.values(categories).flat();
  const word = words[Math.floor(Math.random() * words.length)];

  const shuffle = (str) => str.split('').sort(() => Math.random() - 0.5).join('');
  const shuffled = shuffle(word);
  const prize = Math.floor(word.length * 150 * 2);

  const embedStart = createEmbed({
    title: 'üî§ –ê–Ω–∞–≥—Ä–∞–º–º–∞ ‚Äî –£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ!',
    description: [
      `üîÄ –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã: \`${shuffled}\``,
      '',
      `üí∞ –í–∑–Ω–æ—Å: **${entryFee}** –∫–æ–∏–Ω–æ–≤`,
      `üèÜ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: **${prize}** –∫–æ–∏–Ω–æ–≤`,
      '',
      '‚è≥ –£ –≤–∞—Å –µ—Å—Ç—å **20 —Å–µ–∫—É–Ω–¥**, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ!'
    ].join('\n'),
    color: '#3498db'
  });

  await message.channel.send({ embeds: [embedStart] })
    .then(msg => setTimeout(() => msg.delete().catch(() => {}), 30000));

  const filter = m => m.author.id === userId && m.content.toLowerCase() === word.toLowerCase();
  const collector = message.channel.createMessageCollector({ filter, max: 1, time: 20000 });

  collector.on('collect', async m => {
    data.coinsData[userId].coins += prize;
    saveData();

    const embedWin = createEmbed({
      title: 'üéâ –ü–æ–±–µ–¥–∞!',
      description: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, **${m.author.username}**! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ **${word}** –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ **${prize}** –∫–æ–∏–Ω–æ–≤!`,
      color: '#2ecc71'
    });

    await message.channel.send({ embeds: [embedWin] })
      .then(msg => setTimeout(() => msg.delete().catch(() => {}), 30000));
  });

  collector.on('end', async collected => {
    if (collected.size === 0) {
      const embedLose = createEmbed({
        title: 'üòû –í—Ä–µ–º—è –≤—ã—à–ª–æ!',
        description: `–í—ã –Ω–µ —É—Å–ø–µ–ª–∏ —É–≥–∞–¥–∞—Ç—å. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª: **${word}**.`,
        color: '#e74c3c'
      });

      await message.channel.send({ embeds: [embedLose] })
        .then(msg => setTimeout(() => msg.delete().catch(() => {}), 30000));
    }
  });
}

else if (command === '—Ä—É–ª–µ—Ç–∫–∞') {
  if (message.channel.id !== COINS_CHANNEL_ID) return message.delete().catch(() => {});
  
  const { ActionRowBuilder, ButtonBuilder, ButtonStyle, AttachmentBuilder, EmbedBuilder } = require('discord.js');
  const { createCanvas } = require('@napi-rs/canvas');

  const betRow = new ActionRowBuilder().addComponents(
    new ButtonBuilder().setCustomId('bet_100').setLabel('üí∞ 100').setStyle(ButtonStyle.Primary),
    new ButtonBuilder().setCustomId('bet_500').setLabel('üí∞ 500').setStyle(ButtonStyle.Primary),
    new ButtonBuilder().setCustomId('bet_1000').setLabel('üí∞ 1000').setStyle(ButtonStyle.Primary)
  );

  const sentMessage = await message.reply({ content: '–í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:', components: [betRow] });

  const betFilter = i => i.user.id === message.author.id && i.customId.startsWith('bet_');
  const betCollector = sentMessage.createMessageComponentCollector({ filter: betFilter, time: 15000, max: 1 });

  betCollector.on('collect', async betInteraction => {
    const bet = parseInt(betInteraction.customId.split('_')[1]);

    const colorRow = new ActionRowBuilder().addComponents(
      new ButtonBuilder().setCustomId(`color_red_${bet}`).setLabel('üî¥ –ö—Ä–∞—Å–Ω–æ–µ').setStyle(ButtonStyle.Danger),
      new ButtonBuilder().setCustomId(`color_black_${bet}`).setLabel('‚ö´ –ß—ë—Ä–Ω–æ–µ').setStyle(ButtonStyle.Secondary),
      new ButtonBuilder().setCustomId(`color_green_${bet}`).setLabel('üü¢ –ó–µ–ª—ë–Ω–æ–µ').setStyle(ButtonStyle.Success)
    );

    await betInteraction.update({ content: `–°—Ç–∞–≤–∫–∞: **${bet}** –∫–æ–∏–Ω–æ–≤\n–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç:`, components: [colorRow] });

    const colorFilter = i => i.user.id === message.author.id && i.customId.startsWith('color_');
    const colorCollector = sentMessage.createMessageComponentCollector({ filter: colorFilter, time: 15000, max: 1 });

    colorCollector.on('collect', async colorInteraction => {
      const [ , chosenColor, betAmount ] = colorInteraction.customId.split('_');
      const resultColor = spinRoulette();

      const resultImage = await drawRouletteResult(chosenColor, resultColor, betAmount);

      let win = chosenColor === resultColor;

      const resultEmbed = new EmbedBuilder()
        .setTitle(win ? 'üéâ –ü–æ–±–µ–¥–∞!' : 'üò¢ –ü—Ä–æ–∏–≥—Ä—ã—à!')
        .setDescription(`–í—ã–ø–∞–ª–æ: **${formatColor(resultColor)}**\n–¢—ã –≤—ã–±—Ä–∞–ª: **${formatColor(chosenColor)}**\n${win ? `–í—ã–∏–≥—Ä—ã—à: **${calcWin(betAmount, resultColor)}** –∫–æ–∏–Ω–æ–≤` : `–ü–æ—Ç–µ—Ä—è: **${betAmount}** –∫–æ–∏–Ω–æ–≤`}`)
        .setColor(win ? 0x00FF00 : 0xFF0000);

      const attachment = new AttachmentBuilder(resultImage, { name: 'roulette.png' });

      await colorInteraction.update({ content: '', components: [], embeds: [resultEmbed], files: [attachment] });
    });
  });

  function spinRoulette() {
    const roll = Math.floor(Math.random() * 37); // 0-36
    if (roll === 0) return 'green';
    return roll % 2 === 0 ? 'black' : 'red';
  }

  function calcWin(bet, color) {
    if (color === 'green') return bet * 14;
    return bet * 2;
  }

  function formatColor(color) {
    if (color === 'red') return 'üî¥ –ö—Ä–∞—Å–Ω–æ–µ';
    if (color === 'black') return '‚ö´ –ß—ë—Ä–Ω–æ–µ';
    return 'üü¢ –ó–µ–ª—ë–Ω–æ–µ';
  }

  async function drawRouletteResult(playerColor, resultColor, bet) {
    const canvas = createCanvas(500, 300);
    const ctx = canvas.getContext('2d');

    // –§–æ–Ω
    ctx.fillStyle = '#1e1e1e';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // –¢–µ–∫—Å—Ç
    ctx.font = 'bold 40px sans-serif';
    ctx.fillStyle = '#ffffff';
    ctx.fillText('üé∞ –†—É–ª–µ—Ç–∫–∞ –ö–∞–∑–∏–Ω–æ', 90, 60);

    // –ö–æ–ª–µ—Å–æ
    ctx.beginPath();
    ctx.arc(250, 160, 80, 0, Math.PI * 2);
    ctx.fillStyle = resultColor === 'red' ? '#ff0000' : resultColor === 'black' ? '#000000' : '#00ff00';
    ctx.fill();

    // –£–∫–∞–∑–∞—Ç–µ–ª—å
    ctx.beginPath();
    ctx.moveTo(250, 50);
    ctx.lineTo(240, 90);
    ctx.lineTo(260, 90);
    ctx.fillStyle = '#ffffff';
    ctx.fill();

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–≤–∫–µ
    ctx.font = 'bold 24px sans-serif';
    ctx.fillStyle = '#ffffff';
    ctx.fillText(`–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞: ${bet} –∫–æ–∏–Ω–æ–≤`, 140, 260);
    ctx.fillText(`–¢—ã –≤—ã–±—Ä–∞–ª: ${formatColor(playerColor)}`, 140, 290);

    return canvas.encode('png');
  }
}


// ===============================
// üí∞ –ë–õ–û–ö 7: –ü–û–ú–û–©–¨
// ===============================
else if (command === 'help') {
  if (message.channel.id !== COINS_CHANNEL_ID) return message.delete().catch(() => {});

  const isMod = message.member.roles.cache.has(MOD_ROLE_ID) || message.member.roles.cache.has(MAIN_MOD_ROLE_ID);

  const allCommands = [
    // –û–±—ã—á–Ω—ã–µ
    { category: '–û–±—ã—á–Ω—ã–µ', name: '/info', desc: '–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ', usage: '/info' },
    { category: '–û–±—ã—á–Ω—ã–µ', name: '/deposit', desc: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç', usage: '/deposit 1000' },
    { category: '–û–±—ã—á–Ω—ã–µ', name: '/withdraw', desc: '–°–Ω—è—Ç—å –∫–æ–∏–Ω—ã —Å –¥–µ–ø–æ–∑–∏—Ç–∞', usage: '/withdraw 500' },
    { category: '–û–±—ã—á–Ω—ã–µ', name: '/pay', desc: '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–æ–∏–Ω—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', usage: '/pay @user 200' },
    { category: '–û–±—ã—á–Ω—ã–µ', name: '/createpromo', desc: '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∑–∞ 5000 –∫–æ–∏–Ω–æ–≤', usage: '/createpromo MYCODE' },
    { category: '–û–±—ã—á–Ω—ã–µ', name: '/promo', desc: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–æ–π –ø—Ä–æ–º–æ–∫–æ–¥', usage: '/promo CODE' },
    { category: '–û–±—ã—á–Ω—ã–µ', name: '/extendrole', desc: '–ü—Ä–æ–¥–ª–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Ä–æ–ª—å', usage: '/extendrole' },
    { category: '–û–±—ã—á–Ω—ã–µ', name: '/checkroles', desc: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ä–æ–ª–∏', usage: '/checkroles' },
    { category: '–û–±—ã—á–Ω—ã–µ', name: '/top', desc: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–ø–∞ –ø–æ —ç–∫–æ–Ω–æ—á–∏–∫–µ', usage: '/top' },

    // –ò–≥—Ä–æ–≤—ã–µ
    { category: '–ò–≥—Ä–æ–≤—ã–µ', name: '/numbers', desc: '–ú–∏–Ω–∏-–∏–≥—Ä–∞ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"', usage: '/numbers' },
    { category: '–ò–≥—Ä–æ–≤—ã–µ', name: '/duel', desc: '–î—É—ç–ª—å —Å–æ —Å—Ç–∞–≤–∫–æ–π –∫–æ–∏–Ω–æ–≤', usage: '/duel @user 300' },
    { category: '–ò–≥—Ä–æ–≤—ã–µ', name: '/box', desc: '–û—Ç–∫—Ä—ã—Ç—å –±–æ–∫—Å –∑–∞ 50 –∫–æ–∏–Ω–æ–≤', usage: '/box' },
    { category: '–ò–≥—Ä–æ–≤—ã–µ', name: '/hangman', desc: '–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ –ø–æ –±—É–∫–≤–∞–º', usage: '/hangman' },
    { category: '–ò–≥—Ä–æ–≤—ã–µ', name: '/anagram', desc: '–ê–Ω–∞–≥—Ä–∞–º–º–∞ - —É–≥–∞–¥–∞–π —Å–ª–æ–≤–æ', usage: '/anagram' },

    // –°–µ–º–µ–π–Ω—ã–µ
    { category: '–°–µ–º–µ–π–Ω—ã–µ', name: '/extend_fam', desc: '–ü—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ–º—å–∏', usage: '/extend_fam' },
    { category: '–°–µ–º–µ–π–Ω—ã–µ', name: '/fam_info', desc: '–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–π —Å–µ–º—å–µ', usage: '/fam_info' },
    { category: '–°–µ–º–µ–π–Ω—ã–µ', name: '/a_fam', desc: '–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–≤–æ—é —Å–µ–º—å—é', usage: '/a_fam @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' },
    { category: '–°–µ–º–µ–π–Ω—ã–µ', name: '/d_fam', desc: '–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Å–≤–æ–µ–π —Å–µ–º—å–∏', usage: '/d_fam @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' },
    { category: '–°–µ–º–µ–π–Ω—ã–µ', name: '/a_zam', desc: '–ù–∞–∑–Ω–∞—á–∏—Ç—å/—Å–Ω—è—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è —Å–µ–º—å–∏', usage: '/a_zam @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1/2/3' },
    { category: '–°–µ–º–µ–π–Ω—ã–µ', name: '/d_zam', desc: '–°–Ω—è—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è —Å–µ–º—å–∏', usage: '/d_zam @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' },
    { category: '–°–µ–º–µ–π–Ω—ã–µ', name: '/transfer_fam', desc: '–ü–µ—Ä–µ–¥–∞—Ç—å —Å–µ–º—å—é –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É', usage: '/transfer_fam @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <—Ü–µ–Ω–∞>' },
    { category: '–°–µ–º–µ–π–Ω—ã–µ', name: '/fam_bank', desc: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–Ω–∫ —Å–µ–º—å–∏ –¥–ª—è –µ—ë –ø—Ä–æ–¥–ª–µ–Ω–∏—è', usage: '/fam_bank –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤' },
    { category: '–°–µ–º–µ–π–Ω—ã–µ', name: '/fam_psj', desc: '–ü–æ–∫–∏–Ω—É—Ç—å —Å–µ–º—å—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ', usage: '/fam_psj' },

    // –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ
    { category: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ', name: '/promocodes', desc: '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', usage: '/promocodes', mod: true },
    { category: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ', name: '/delpromo', desc: '–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', usage: '/delpromo CODE –ø—Ä–∏—á–∏–Ω–∞', mod: true },
    { category: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ', name: '/createrole', desc: '–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Ä–æ–ª—å', usage: '/createrole @user1 #FFAA00 10000', mod: true },
    { category: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ', name: '/give_coins', desc: '–í—ã–¥–∞—Ç—å –∫–æ–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', usage: '/give_coins @user 500 –ø—Ä–∏—á–∏–Ω–∞', mod: true },
    { category: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ', name: '/take_coins', desc: '–°–Ω—è—Ç—å –∫–æ–∏–Ω—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', usage: '/take_coins @user 500 –ø—Ä–∏—á–∏–Ω–∞', mod: true },
    { category: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ', name: '/give_bonus_role', desc: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤', usage: '/give_bonus_role @—Ä–æ–ª—å 5', mod: true },
    { category: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ', name: '/remove_bonus_role', desc: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ–Ω—É—Å–Ω—É—é —Ä–æ–ª—å', usage: '/remove_bonus_role @—Ä–æ–ª—å', mod: true },
    { category: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ', name: '/list_bonus_roles', desc: '–°–ø–∏—Å–æ–∫ –±–æ–Ω—É—Å–Ω—ã—Ö —Ä–æ–ª–µ–π', usage: '/list_bonus_roles', mod: true },
    { category: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ', name: '/togglecoins', desc: '–í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –∫–æ–∏–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ', usage: '/togglecoins #–∫–∞–Ω–∞–ª', mod: true },
    { category: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ', name: '/listdisabledchannels', desc: '–ö–∞–Ω–∞–ª—ã –±–µ–∑ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–∏–Ω–æ–≤', usage: '/listdisabledchannels', mod: true },
    { category: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ', name: '/create_fam', desc: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ–º—å—é', usage: '/create_fam', mod: true },
    { category: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ', name: '/delete_fam', desc: '–£–¥–∞–ª–∏—Ç—å —Å–µ–º—å—é –ø–æ —Ä–æ–ª–∏', usage: '/delete_fam @—Ä–æ–ª—å –ø—Ä–∏—á–∏–Ω–∞', mod: true },
    { category: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ', name: '/del_role', desc: '–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Ä–æ–ª—å –ø–æ–∑–æ–≤–∞—Ç–µ–ª—è', usage: '/del_role', mod: true },

    
  ];

  const filteredCommands = allCommands.filter(cmd => !(cmd.mod && !isMod));

  const categories = [...new Set(filteredCommands.map(cmd => cmd.category))];
  const commandsByCategory = {};
  for (const category of categories) {
    commandsByCategory[category] = filteredCommands.filter(c => c.category === category);
  }


  const categoryColors = {
    '–û–±—ã—á–Ω—ã–µ': '#7945ced0',
    '–ò–≥—Ä–æ–≤—ã–µ': '#e67d22d3',
    '–°–µ–º–µ–π–Ω—ã–µ': '#9c59b6b4',
    '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ': '#8bc34aa4',
  };

 
  const width = 1500;
  const padding = 50;
  const lineHeight = 38;
  const headerHeight = 90;
  const footerHeight = 50;

  function drawRoundedRect(ctx, x, y, w, h, r, color, strokeWidth = 3) {
    ctx.beginPath();
    ctx.moveTo(x + r, y);
    ctx.lineTo(x + w - r, y);
    ctx.quadraticCurveTo(x + w, y, x + w, y + r);
    ctx.lineTo(x + w, y + h - r);
    ctx.quadraticCurveTo(x + w, y + h, x + w - r, y + h);
    ctx.lineTo(x + r, y + h);
    ctx.quadraticCurveTo(x, y + h, x, y + h - r);
    ctx.lineTo(x, y + r);
    ctx.quadraticCurveTo(x, y, x + r, y);
    ctx.closePath();
    ctx.fillStyle = '#1e1e1e';
    ctx.fill();
    ctx.lineWidth = strokeWidth;
    ctx.strokeStyle = color;
    ctx.stroke();
  }

  function createPageBuffer(categoryIndex) {
    const category = categories[categoryIndex];
    const cmds = commandsByCategory[category];
    const color = categoryColors[category] || '#fff';

    const cmdHeight = 60; 
    const gap = 15;      
    const height = headerHeight + cmds.length * (cmdHeight + gap) + footerHeight;

    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext('2d');

   
    const gradient = ctx.createLinearGradient(0, 0, 0, height);
    gradient.addColorStop(0, '#0d1b2a');   // –û—á–µ–Ω—å —Ç—ë–º–Ω–æ-—Å–∏–Ω–∏–π —Å–≤–µ—Ä—Ö—É
    gradient.addColorStop(1, '#000000');   // –ß—ë—Ä–Ω—ã–π –≤–Ω–∏–∑—É
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);

  
    drawRoundedRect(ctx, 15, 15, width - 30, height - 30, 20, color, 5);

  
    ctx.font = 'bold 42px Sans';
    ctx.fillStyle = color;
    ctx.textBaseline = 'top';
    ctx.shadowColor = color;
    ctx.shadowBlur = 10;
    ctx.fillText(`üìö ${category} –∫–æ–º–∞–Ω–¥—ã`, padding, 30);
    ctx.shadowBlur = 0;

  
    let y = headerHeight;

    for (let i = 0; i < cmds.length; i++) {
      const cmd = cmds[i];
      const num = i + 1;

      const boxX = padding;
      const boxY = y;
      const boxW = width - padding * 2;
      const boxH = cmdHeight;

    
      ctx.fillStyle = '#222222';
      ctx.strokeStyle = color;
      ctx.lineWidth = 3;
      ctx.beginPath();
      ctx.moveTo(boxX + 15, boxY);
      ctx.lineTo(boxX + boxW - 15, boxY);
      ctx.quadraticCurveTo(boxX + boxW, boxY, boxX + boxW, boxY + 15);
      ctx.lineTo(boxX + boxW, boxY + boxH - 15);
      ctx.quadraticCurveTo(boxX + boxW, boxY + boxH, boxX + boxW - 15, boxY + boxH);
      ctx.lineTo(boxX + 15, boxY + boxH);
      ctx.quadraticCurveTo(boxX, boxY + boxH, boxX, boxY + boxH - 15);
      ctx.lineTo(boxX, boxY + 15);
      ctx.quadraticCurveTo(boxX, boxY, boxX + 15, boxY);
      ctx.closePath();
      ctx.fill();
      ctx.stroke();

     
      ctx.fillStyle = color;
      ctx.font = 'bold 28px Sans';
      ctx.textBaseline = 'middle';
      ctx.textAlign = 'left';
      ctx.fillText(`${num}.`, boxX + 15, boxY + boxH / 2);


      const numberWidth = ctx.measureText(`${num}.`).width;
      const baseIndent = 15;
      const gapAfterNumber = 20;

      const nameDescX = boxX + baseIndent + numberWidth + gapAfterNumber;

   
      ctx.fillStyle = '#eee';
      ctx.font = '22px "Courier New", Courier, monospace';
      ctx.fillText(`${cmd.name} ‚Äî ${cmd.desc}`, nameDescX, boxY + boxH / 2);

    
      ctx.fillStyle = '#aaa';
      ctx.textAlign = 'right';
      ctx.fillText(cmd.usage, boxX + boxW - 20, boxY + boxH / 2);

      y += boxH + gap;
    }


    ctx.font = '16px Sans';
    ctx.fillStyle = '#777';
    ctx.textAlign = 'left';
    ctx.fillText(
      `–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: ${cmds.length} | –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${categoryIndex + 1} –∏–∑ ${categories.length} | –ó–∞–ø—Ä–æ—Å–∏–ª: ${message.author.tag}`,
      padding,
      height - 30
    );

  
    ctx.textAlign = 'right';
    ctx.fillText(moment().format('HH:mm'), width - padding, height - 30);

    return canvas.toBuffer();
  }

  let page = 0;
  let buffer = createPageBuffer(page);

  const row = new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId('help_prev')
      .setLabel('–ù–∞–∑–∞–¥')
      .setStyle(ButtonStyle.Secondary)
      .setDisabled(page === 0),
    new ButtonBuilder()
      .setCustomId('help_next')
      .setLabel('–í–ø–µ—Ä—ë–¥')
      .setStyle(ButtonStyle.Secondary)
      .setDisabled(page === categories.length - 1),
    new ButtonBuilder()
      .setCustomId('help_close')
      .setLabel('–ó–∞–∫—Ä—ã—Ç—å')
      .setStyle(ButtonStyle.Danger),
  );

  const sentMsg = await message.channel.send({
    files: [{ attachment: buffer, name: 'help_commands.png' }],
    components: [row],
  });
  await message.delete().catch(() => {});

  const collector = sentMsg.createMessageComponentCollector({
    filter: i => i.user.id === message.author.id,
    time: 60000,
  });

  collector.on('collect', async (interaction) => {
    if (interaction.customId === 'help_prev' && page > 0) {
      page--;
    } else if (interaction.customId === 'help_next' && page < categories.length - 1) {
      page++;
    } else if (interaction.customId === 'help_close') {
      await sentMsg.delete().catch(() => {});
      collector.stop();
      return;
    }
    buffer = createPageBuffer(page);
    await interaction.update({
      files: [{ attachment: buffer, name: 'help_commands.png' }],
      components: [
        new ActionRowBuilder().addComponents(
          new ButtonBuilder()
            .setCustomId('help_prev')
            .setLabel('–ù–∞–∑–∞–¥')
            .setStyle(ButtonStyle.Secondary)
            .setDisabled(page === 0),
          new ButtonBuilder()
            .setCustomId('help_next')
            .setLabel('–í–ø–µ—Ä—ë–¥')
            .setStyle(ButtonStyle.Secondary)
            .setDisabled(page === categories.length - 1),
          new ButtonBuilder()
            .setCustomId('help_close')
            .setLabel('–ó–∞–∫—Ä—ã—Ç—å')
            .setStyle(ButtonStyle.Danger),
        )
      ],
    });
  });

  collector.on('end', async () => {
    if (!sentMsg.deleted) {
      await sentMsg.edit({ components: [] }).catch(() => {});
      setTimeout(() => sentMsg.delete().catch(() => {}), 15000);
    }
  });
}
else if (command === 'top') {
  if (message.channel.id !== COINS_CHANNEL_ID) return message.delete().catch(() => {});
  await message.delete().catch(() => {});

async function generateTopImage(sortBy = 'coins') {
  const sortedUsers = Object.entries(data.coinsData).sort(([, a], [, b]) => {
    if (sortBy === 'coins') return (b.coins || 0) - (a.coins || 0);
    if (sortBy === 'deposit') return (b.deposit || 0) - (a.deposit || 0);
    return 0;
  });

  let topUsers = sortedUsers;

  if (sortBy === 'name') {
    const withNames = await Promise.all(
      sortedUsers.map(async ([userId, userData]) => {
        const member = await message.guild.members.fetch(userId).catch(() => null);
        return { userId, userData, name: member?.displayName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π' };
      })
    );
    withNames.sort((a, b) => a.name.localeCompare(b.name, 'ru'));
    topUsers = withNames.map(({ userId, userData }) => [userId, userData]);
  }

  topUsers = topUsers.slice(0, 5);

  const canvasWidth = 1650;
  const rowHeight = 65;
  const headerHeight = 100;
  const tableHeaderHeight = 80;
  const footerHeight = 50;
  const sidePadding = 80;
  const canvasHeight = headerHeight + tableHeaderHeight + topUsers.length * rowHeight + footerHeight;

  const canvas = createCanvas(canvasWidth, canvasHeight);
  const ctx = canvas.getContext('2d');

  const gradient = ctx.createLinearGradient(0, 0, 0, canvasHeight);
  gradient.addColorStop(0, '#1e2125');
  gradient.addColorStop(1, '#2e3238');
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, canvasWidth, canvasHeight);

  const titleText = 'üìã –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ SUN-CITY';
  ctx.font = 'bold 42px Sans';
  const textWidth = ctx.measureText(titleText).width;
  const grad = ctx.createLinearGradient(sidePadding, 0, sidePadding + textWidth, 0);
  grad.addColorStop(0, '#e3c55a');
  grad.addColorStop(1, '#c2912a');

  ctx.fillStyle = grad;
  ctx.shadowColor = 'rgba(255, 200, 0, 0.4)';
  ctx.shadowBlur = 12;
  ctx.fillText(titleText, sidePadding, 60);
  ctx.shadowColor = 'transparent';

  const sepGradient = ctx.createLinearGradient(0, 70, 0, 76);
  sepGradient.addColorStop(0, '#ffd70033');
  sepGradient.addColorStop(0.5, '#ffaa0033');
  sepGradient.addColorStop(1, '#ffd70033');

  ctx.fillStyle = sepGradient;
  ctx.fillRect(sidePadding, 70, canvasWidth - sidePadding * 2, 6);

  const columns = [
    { title: '‚Ññ', x: sidePadding + 20, align: 'left' },
    { title: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', x: sidePadding + 120, align: 'left' },
    { title: '–ë–∞–ª–∞–Ω—Å', x: sidePadding + 810, align: 'right' },
    { title: '–î–µ–ø–æ–∑–∏—Ç', x: sidePadding + 1020, align: 'right' },
    { title: '–°—Ç–∞—Ç—É—Å', x: sidePadding + 1210, align: 'left' }
  ];

  ctx.font = 'bold 26px Sans';
  ctx.fillStyle = '#dddddd';
  for (const col of columns) {
    ctx.textAlign = col.align;
    ctx.fillText(col.title, col.x, headerHeight + 10);
  }

  let y = headerHeight + tableHeaderHeight;
  ctx.font = '22px Sans';

  for (let i = 0; i < topUsers.length; i++) {
    const [userId, userData] = topUsers[i];
    const member = await message.guild.members.fetch(userId).catch(() => null);
    const displayName = member?.displayName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    const coins = userData.coins || 0;
    const deposit = userData.deposit || 0;
    const status = getStatus(coins);

    const highlightTop = i < 5;
    if (highlightTop) {
      const rectColor = i === 0
        ? 'rgba(255, 223, 100, 0.15)'
        : i === 1
        ? 'rgba(173, 216, 230, 0.1)'
        : i === 2
        ? 'rgba(216, 191, 216, 0.1)'
        : 'rgba(255, 255, 255, 0.06)';

      const strokeColor = i === 0
        ? 'rgba(255, 223, 100, 0.5)'
        : i === 1
        ? 'rgba(135, 206, 235, 0.5)'
        : i === 2
        ? 'rgba(221, 160, 221, 0.5)'
        : 'rgba(255, 255, 255, 0.2)';

      ctx.fillStyle = rectColor;
      roundRect(ctx, sidePadding - 10, y - 42, canvasWidth - sidePadding * 2 + 20, rowHeight - 10, 12, true, false);

      ctx.strokeStyle = strokeColor;
      ctx.lineWidth = 2;
      roundRect(ctx, sidePadding - 10, y - 42, canvasWidth - sidePadding * 2 + 20, rowHeight - 10, 12, false, true);
    }

    const numberX = sidePadding + 20;
    if (i === 0 || i === 1 || i === 2) {
      const colors = i === 0
        ? ['#fff9c4', '#ffd54f']
        : i === 1
        ? ['#add8e6', '#87ceeb']
        : ['#e6ccff', '#d19fe8'];

      drawGradientText(`${i + 1}`, numberX, y, 'left', colors);
    } else {
      ctx.fillStyle = '#ffffff';
      ctx.textAlign = 'left';
      ctx.fillText(`${i + 1}`, numberX, y);
    }

    ctx.fillStyle = '#ffffff';
    ctx.textAlign = 'left';
    ctx.fillText(displayName.length > 30 ? displayName.slice(0, 30) + '‚Ä¶' : displayName, sidePadding + 120, y);

    ctx.fillStyle = '#bbbbbb';
    ctx.textAlign = 'right';
    ctx.fillText(coins.toLocaleString('ru-RU'), sidePadding + 810, y);
    ctx.fillText(deposit.toLocaleString('ru-RU'), sidePadding + 1020, y);

    ctx.textAlign = 'left';
    ctx.fillText(status, sidePadding + 1210, y);

    y += rowHeight;
  }

  ctx.fillStyle = '#888';
  ctx.font = '16px Sans';
  ctx.textAlign = 'left';
  const formattedTime = new Date().toLocaleString('ru-RU', {
    day: '2-digit', month: '2-digit', year: 'numeric',
    hour: '2-digit', minute: '2-digit'
  });
  ctx.fillText(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${topUsers.length} ‚Ä¢ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: ${formattedTime}`, sidePadding, canvasHeight - 20);

  return canvas.toBuffer();

  function drawGradientText(text, x, y, align = 'left', colors = ['#ffdb6a', '#d49a00']) {
    ctx.textAlign = align;
    const grad = ctx.createLinearGradient(x, y - 20, x, y + 10);
    grad.addColorStop(0, colors[0]);
    grad.addColorStop(1, colors[1]);
    ctx.fillStyle = grad;
    ctx.shadowColor = 'rgba(0,0,0,0.6)';
    ctx.shadowBlur = 5;
    ctx.fillText(text, x, y);
    ctx.shadowColor = 'transparent';
  }
}

function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
  if (typeof radius === 'number') {
    radius = { tl: radius, tr: radius, br: radius, bl: radius };
  } else {
    for (let side of ['tl', 'tr', 'br', 'bl']) {
      radius[side] = radius[side] || 0;
    }
  }
  ctx.beginPath();
  ctx.moveTo(x + radius.tl, y);
  ctx.lineTo(x + width - radius.tr, y);
  ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);
  ctx.lineTo(x + width, y + height - radius.br);
  ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);
  ctx.lineTo(x + radius.bl, y + height);
  ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);
  ctx.lineTo(x, y + radius.tl);
  ctx.quadraticCurveTo(x, y, x + radius.tl, y);
  ctx.closePath();
  if (fill) ctx.fill();
  if (stroke) ctx.stroke();
}





  const buffer = await generateTopImage('coins');

 
  const buttonsRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('sort_coins')
        .setLabel('–ö–æ–∏–Ω—ã')
        .setStyle(ButtonStyle.Primary),
      new ButtonBuilder()
        .setCustomId('sort_deposit')
        .setLabel('–î–µ–ø–æ–∑–∏—Ç')
        .setStyle(ButtonStyle.Success),

    );

  const sentMsg = await message.channel.send({
    files: [{ attachment: buffer, name: 'top.png' }],
    components: [buttonsRow]
  });


  const collector = sentMsg.createMessageComponentCollector({
    filter: i => i.user.id === message.author.id,
    time: 60000
  });

  collector.on('collect', async interaction => {
    let sortBy;
    if (interaction.customId === 'sort_coins') sortBy = 'coins';
    else if (interaction.customId === 'sort_deposit') sortBy = 'deposit';
    else if (interaction.customId === 'sort_name') sortBy = 'name';

    if (!sortBy) return;

    await interaction.deferUpdate();

    const newBuffer = await generateTopImage(sortBy);
    await interaction.editReply({ files: [{ attachment: newBuffer, name: 'top.png' }] });
  });

  collector.on('end', () => {
    const disabledRow = new ActionRowBuilder()
      .addComponents(
        buttonsRow.components.map(btn => btn.setDisabled(true))
      );
    sentMsg.edit({ components: [disabledRow] }).catch(() => {});
    setTimeout(() => {
  sentMsg.delete().catch(() => {});
}, 10000); // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 45 —Å–µ–∫—É–Ω–¥
  });
}
});
client.login('MTIyOTAyMDY3NjI0NjA4MTU2Ng.GNzId4.aQMynr7_AKKFT-_h7hi061zLB2TN22LKtdawSc');

